
Selex_Battery_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800d9b8  0800d9b8  0001d9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc68  0800dc68  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc68  0800dc68  0001dc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc70  0800dc70  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc70  0800dc70  0001dc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc74  0800dc74  0001dc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800dc78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001309c  200001ec  0800de64  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20013288  0800de64  00023288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000333e9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000617c  00000000  00000000  000535fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  00059780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022c0  00000000  00000000  0005bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002403d  00000000  00000000  0005df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c1da  00000000  00000000  00081f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d43fa  00000000  00000000  000ae16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00182569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a10  00000000  00000000  001825bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d9a0 	.word	0x0800d9a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800d9a0 	.word	0x0800d9a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzsi2>:
 80003f4:	211c      	movs	r1, #28
 80003f6:	2301      	movs	r3, #1
 80003f8:	041b      	lsls	r3, r3, #16
 80003fa:	4298      	cmp	r0, r3
 80003fc:	d301      	bcc.n	8000402 <__clzsi2+0xe>
 80003fe:	0c00      	lsrs	r0, r0, #16
 8000400:	3910      	subs	r1, #16
 8000402:	0a1b      	lsrs	r3, r3, #8
 8000404:	4298      	cmp	r0, r3
 8000406:	d301      	bcc.n	800040c <__clzsi2+0x18>
 8000408:	0a00      	lsrs	r0, r0, #8
 800040a:	3908      	subs	r1, #8
 800040c:	091b      	lsrs	r3, r3, #4
 800040e:	4298      	cmp	r0, r3
 8000410:	d301      	bcc.n	8000416 <__clzsi2+0x22>
 8000412:	0900      	lsrs	r0, r0, #4
 8000414:	3904      	subs	r1, #4
 8000416:	a202      	add	r2, pc, #8	; (adr r2, 8000420 <__clzsi2+0x2c>)
 8000418:	5c10      	ldrb	r0, [r2, r0]
 800041a:	1840      	adds	r0, r0, r1
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	02020304 	.word	0x02020304
 8000424:	01010101 	.word	0x01010101
	...

08000430 <__aeabi_uldivmod>:
 8000430:	2b00      	cmp	r3, #0
 8000432:	d111      	bne.n	8000458 <__aeabi_uldivmod+0x28>
 8000434:	2a00      	cmp	r2, #0
 8000436:	d10f      	bne.n	8000458 <__aeabi_uldivmod+0x28>
 8000438:	2900      	cmp	r1, #0
 800043a:	d100      	bne.n	800043e <__aeabi_uldivmod+0xe>
 800043c:	2800      	cmp	r0, #0
 800043e:	d002      	beq.n	8000446 <__aeabi_uldivmod+0x16>
 8000440:	2100      	movs	r1, #0
 8000442:	43c9      	mvns	r1, r1
 8000444:	1c08      	adds	r0, r1, #0
 8000446:	b407      	push	{r0, r1, r2}
 8000448:	4802      	ldr	r0, [pc, #8]	; (8000454 <__aeabi_uldivmod+0x24>)
 800044a:	a102      	add	r1, pc, #8	; (adr r1, 8000454 <__aeabi_uldivmod+0x24>)
 800044c:	1840      	adds	r0, r0, r1
 800044e:	9002      	str	r0, [sp, #8]
 8000450:	bd03      	pop	{r0, r1, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	ffffff9d 	.word	0xffffff9d
 8000458:	b403      	push	{r0, r1}
 800045a:	4668      	mov	r0, sp
 800045c:	b501      	push	{r0, lr}
 800045e:	9802      	ldr	r0, [sp, #8]
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	9b01      	ldr	r3, [sp, #4]
 8000466:	469e      	mov	lr, r3
 8000468:	b002      	add	sp, #8
 800046a:	bc0c      	pop	{r2, r3}
 800046c:	4770      	bx	lr
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__udivmoddi4>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	4657      	mov	r7, sl
 8000474:	464e      	mov	r6, r9
 8000476:	4645      	mov	r5, r8
 8000478:	46de      	mov	lr, fp
 800047a:	b5e0      	push	{r5, r6, r7, lr}
 800047c:	0004      	movs	r4, r0
 800047e:	000d      	movs	r5, r1
 8000480:	4692      	mov	sl, r2
 8000482:	4699      	mov	r9, r3
 8000484:	b083      	sub	sp, #12
 8000486:	428b      	cmp	r3, r1
 8000488:	d830      	bhi.n	80004ec <__udivmoddi4+0x7c>
 800048a:	d02d      	beq.n	80004e8 <__udivmoddi4+0x78>
 800048c:	4649      	mov	r1, r9
 800048e:	4650      	mov	r0, sl
 8000490:	f000 f8ba 	bl	8000608 <__clzdi2>
 8000494:	0029      	movs	r1, r5
 8000496:	0006      	movs	r6, r0
 8000498:	0020      	movs	r0, r4
 800049a:	f000 f8b5 	bl	8000608 <__clzdi2>
 800049e:	1a33      	subs	r3, r6, r0
 80004a0:	4698      	mov	r8, r3
 80004a2:	3b20      	subs	r3, #32
 80004a4:	469b      	mov	fp, r3
 80004a6:	d433      	bmi.n	8000510 <__udivmoddi4+0xa0>
 80004a8:	465a      	mov	r2, fp
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	4642      	mov	r2, r8
 80004b0:	001f      	movs	r7, r3
 80004b2:	4653      	mov	r3, sl
 80004b4:	4093      	lsls	r3, r2
 80004b6:	001e      	movs	r6, r3
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d83a      	bhi.n	8000532 <__udivmoddi4+0xc2>
 80004bc:	42af      	cmp	r7, r5
 80004be:	d100      	bne.n	80004c2 <__udivmoddi4+0x52>
 80004c0:	e078      	b.n	80005b4 <__udivmoddi4+0x144>
 80004c2:	465b      	mov	r3, fp
 80004c4:	1ba4      	subs	r4, r4, r6
 80004c6:	41bd      	sbcs	r5, r7
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	da00      	bge.n	80004ce <__udivmoddi4+0x5e>
 80004cc:	e075      	b.n	80005ba <__udivmoddi4+0x14a>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	465a      	mov	r2, fp
 80004da:	4093      	lsls	r3, r2
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	2301      	movs	r3, #1
 80004e0:	4642      	mov	r2, r8
 80004e2:	4093      	lsls	r3, r2
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	e028      	b.n	800053a <__udivmoddi4+0xca>
 80004e8:	4282      	cmp	r2, r0
 80004ea:	d9cf      	bls.n	800048c <__udivmoddi4+0x1c>
 80004ec:	2200      	movs	r2, #0
 80004ee:	2300      	movs	r3, #0
 80004f0:	9200      	str	r2, [sp, #0]
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <__udivmoddi4+0x8e>
 80004fa:	601c      	str	r4, [r3, #0]
 80004fc:	605d      	str	r5, [r3, #4]
 80004fe:	9800      	ldr	r0, [sp, #0]
 8000500:	9901      	ldr	r1, [sp, #4]
 8000502:	b003      	add	sp, #12
 8000504:	bcf0      	pop	{r4, r5, r6, r7}
 8000506:	46bb      	mov	fp, r7
 8000508:	46b2      	mov	sl, r6
 800050a:	46a9      	mov	r9, r5
 800050c:	46a0      	mov	r8, r4
 800050e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000510:	4642      	mov	r2, r8
 8000512:	2320      	movs	r3, #32
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	4652      	mov	r2, sl
 8000518:	40da      	lsrs	r2, r3
 800051a:	4641      	mov	r1, r8
 800051c:	0013      	movs	r3, r2
 800051e:	464a      	mov	r2, r9
 8000520:	408a      	lsls	r2, r1
 8000522:	0017      	movs	r7, r2
 8000524:	4642      	mov	r2, r8
 8000526:	431f      	orrs	r7, r3
 8000528:	4653      	mov	r3, sl
 800052a:	4093      	lsls	r3, r2
 800052c:	001e      	movs	r6, r3
 800052e:	42af      	cmp	r7, r5
 8000530:	d9c4      	bls.n	80004bc <__udivmoddi4+0x4c>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	4643      	mov	r3, r8
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0d9      	beq.n	80004f4 <__udivmoddi4+0x84>
 8000540:	07fb      	lsls	r3, r7, #31
 8000542:	0872      	lsrs	r2, r6, #1
 8000544:	431a      	orrs	r2, r3
 8000546:	4646      	mov	r6, r8
 8000548:	087b      	lsrs	r3, r7, #1
 800054a:	e00e      	b.n	800056a <__udivmoddi4+0xfa>
 800054c:	42ab      	cmp	r3, r5
 800054e:	d101      	bne.n	8000554 <__udivmoddi4+0xe4>
 8000550:	42a2      	cmp	r2, r4
 8000552:	d80c      	bhi.n	800056e <__udivmoddi4+0xfe>
 8000554:	1aa4      	subs	r4, r4, r2
 8000556:	419d      	sbcs	r5, r3
 8000558:	2001      	movs	r0, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2100      	movs	r1, #0
 8000560:	3e01      	subs	r6, #1
 8000562:	1824      	adds	r4, r4, r0
 8000564:	414d      	adcs	r5, r1
 8000566:	2e00      	cmp	r6, #0
 8000568:	d006      	beq.n	8000578 <__udivmoddi4+0x108>
 800056a:	42ab      	cmp	r3, r5
 800056c:	d9ee      	bls.n	800054c <__udivmoddi4+0xdc>
 800056e:	3e01      	subs	r6, #1
 8000570:	1924      	adds	r4, r4, r4
 8000572:	416d      	adcs	r5, r5
 8000574:	2e00      	cmp	r6, #0
 8000576:	d1f8      	bne.n	800056a <__udivmoddi4+0xfa>
 8000578:	9800      	ldr	r0, [sp, #0]
 800057a:	9901      	ldr	r1, [sp, #4]
 800057c:	465b      	mov	r3, fp
 800057e:	1900      	adds	r0, r0, r4
 8000580:	4169      	adcs	r1, r5
 8000582:	2b00      	cmp	r3, #0
 8000584:	db24      	blt.n	80005d0 <__udivmoddi4+0x160>
 8000586:	002b      	movs	r3, r5
 8000588:	465a      	mov	r2, fp
 800058a:	4644      	mov	r4, r8
 800058c:	40d3      	lsrs	r3, r2
 800058e:	002a      	movs	r2, r5
 8000590:	40e2      	lsrs	r2, r4
 8000592:	001c      	movs	r4, r3
 8000594:	465b      	mov	r3, fp
 8000596:	0015      	movs	r5, r2
 8000598:	2b00      	cmp	r3, #0
 800059a:	db2a      	blt.n	80005f2 <__udivmoddi4+0x182>
 800059c:	0026      	movs	r6, r4
 800059e:	409e      	lsls	r6, r3
 80005a0:	0033      	movs	r3, r6
 80005a2:	0026      	movs	r6, r4
 80005a4:	4647      	mov	r7, r8
 80005a6:	40be      	lsls	r6, r7
 80005a8:	0032      	movs	r2, r6
 80005aa:	1a80      	subs	r0, r0, r2
 80005ac:	4199      	sbcs	r1, r3
 80005ae:	9000      	str	r0, [sp, #0]
 80005b0:	9101      	str	r1, [sp, #4]
 80005b2:	e79f      	b.n	80004f4 <__udivmoddi4+0x84>
 80005b4:	42a3      	cmp	r3, r4
 80005b6:	d8bc      	bhi.n	8000532 <__udivmoddi4+0xc2>
 80005b8:	e783      	b.n	80004c2 <__udivmoddi4+0x52>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	2100      	movs	r1, #0
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	2200      	movs	r2, #0
 80005c4:	9100      	str	r1, [sp, #0]
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	2201      	movs	r2, #1
 80005ca:	40da      	lsrs	r2, r3
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	e786      	b.n	80004de <__udivmoddi4+0x6e>
 80005d0:	4642      	mov	r2, r8
 80005d2:	2320      	movs	r3, #32
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	002a      	movs	r2, r5
 80005d8:	4646      	mov	r6, r8
 80005da:	409a      	lsls	r2, r3
 80005dc:	0023      	movs	r3, r4
 80005de:	40f3      	lsrs	r3, r6
 80005e0:	4644      	mov	r4, r8
 80005e2:	4313      	orrs	r3, r2
 80005e4:	002a      	movs	r2, r5
 80005e6:	40e2      	lsrs	r2, r4
 80005e8:	001c      	movs	r4, r3
 80005ea:	465b      	mov	r3, fp
 80005ec:	0015      	movs	r5, r2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	dad4      	bge.n	800059c <__udivmoddi4+0x12c>
 80005f2:	4642      	mov	r2, r8
 80005f4:	002f      	movs	r7, r5
 80005f6:	2320      	movs	r3, #32
 80005f8:	0026      	movs	r6, r4
 80005fa:	4097      	lsls	r7, r2
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	40de      	lsrs	r6, r3
 8000600:	003b      	movs	r3, r7
 8000602:	4333      	orrs	r3, r6
 8000604:	e7cd      	b.n	80005a2 <__udivmoddi4+0x132>
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzdi2>:
 8000608:	b510      	push	{r4, lr}
 800060a:	2900      	cmp	r1, #0
 800060c:	d103      	bne.n	8000616 <__clzdi2+0xe>
 800060e:	f7ff fef1 	bl	80003f4 <__clzsi2>
 8000612:	3020      	adds	r0, #32
 8000614:	e002      	b.n	800061c <__clzdi2+0x14>
 8000616:	1c08      	adds	r0, r1, #0
 8000618:	f7ff feec 	bl	80003f4 <__clzsi2>
 800061c:	bd10      	pop	{r4, pc}
 800061e:	46c0      	nop			; (mov r8, r8)

08000620 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fd72 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f824 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 fa22 	bl	8000a88 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000644:	f000 f8a8 	bl	8000798 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000648:	f000 f8ee 	bl	8000828 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800064c:	f000 f930 	bl	80008b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000650:	f000 f98e 	bl	8000970 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000654:	f000 f9ca 	bl	80009ec <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8000658:	f00c fb3c 	bl	800ccd4 <MX_USB_Device_Init>
  MX_IWDG_Init();
 800065c:	f000 f968 	bl	8000930 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000660:	f00a f8be 	bl	800a7e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <main+0x48>)
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <main+0x4c>)
 8000668:	2100      	movs	r1, #0
 800066a:	0018      	movs	r0, r3
 800066c:	f00a f900 	bl	800a870 <osThreadNew>
 8000670:	0002      	movs	r2, r0
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <main+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000676:	f00a f8d5 	bl	800a824 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067a:	e7fe      	b.n	800067a <main+0x46>
 800067c:	0800da34 	.word	0x0800da34
 8000680:	08000bc5 	.word	0x08000bc5
 8000684:	200117fc 	.word	0x200117fc

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b0a7      	sub	sp, #156	; 0x9c
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	245c      	movs	r4, #92	; 0x5c
 8000690:	193b      	adds	r3, r7, r4
 8000692:	0018      	movs	r0, r3
 8000694:	233c      	movs	r3, #60	; 0x3c
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f00d f8aa 	bl	800d7f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069e:	234c      	movs	r3, #76	; 0x4c
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	0018      	movs	r0, r3
 80006a4:	2310      	movs	r3, #16
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f00d f8a2 	bl	800d7f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ae:	003b      	movs	r3, r7
 80006b0:	0018      	movs	r0, r3
 80006b2:	234c      	movs	r3, #76	; 0x4c
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f00d f89b 	bl	800d7f2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f003 fd9d 	bl	8004200 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	222a      	movs	r2, #42	; 0x2a
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	03d2      	lsls	r2, r2, #15
 80006da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006dc:	0021      	movs	r1, r4
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2240      	movs	r2, #64	; 0x40
 80006e8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2201      	movs	r2, #1
 80006ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2202      	movs	r2, #2
 80006f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2202      	movs	r2, #2
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2208      	movs	r2, #8
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	0292      	lsls	r2, r2, #10
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0492      	lsls	r2, r2, #18
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0592      	lsls	r2, r2, #22
 800071e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	187b      	adds	r3, r7, r1
 8000722:	0018      	movs	r0, r3
 8000724:	f003 fdb8 	bl	8004298 <HAL_RCC_OscConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800072c:	f000 fa64 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	214c      	movs	r1, #76	; 0x4c
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2207      	movs	r2, #7
 8000736:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2202      	movs	r2, #2
 800073c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2102      	movs	r1, #2
 800074e:	0018      	movs	r0, r3
 8000750:	f004 f908 	bl	8004964 <HAL_RCC_ClockConfig>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000758:	f000 fa4e 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_USART1
 800075c:	003b      	movs	r3, r7
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <SystemClock_Config+0x10c>)
 8000760:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800076e:	003b      	movs	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	649a      	str	r2, [r3, #72]	; 0x48

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077a:	003b      	movs	r3, r7
 800077c:	0018      	movs	r0, r3
 800077e:	f004 fac5 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000786:	f000 fa37 	bl	8000bf8 <Error_Handler>
  }
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b027      	add	sp, #156	; 0x9c
 8000790:	bd90      	pop	{r4, r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	03000021 	.word	0x03000021

08000798 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_FDCAN1_Init+0x88>)
 800079e:	4a21      	ldr	r2, [pc, #132]	; (8000824 <MX_FDCAN1_Init+0x8c>)
 80007a0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007bc:	2200      	movs	r2, #0
 80007be:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007da:	2202      	movs	r2, #2
 80007dc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_FDCAN1_Init+0x88>)
 80007fe:	2200      	movs	r2, #0
 8000800:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_FDCAN1_Init+0x88>)
 8000804:	2200      	movs	r2, #0
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <MX_FDCAN1_Init+0x88>)
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fe5c 	bl	80014c8 <HAL_FDCAN_Init>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000814:	f000 f9f0 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200118ec 	.word	0x200118ec
 8000824:	40006400 	.word	0x40006400

08000828 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <MX_FDCAN2_Init+0x84>)
 8000830:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000840:	2200      	movs	r2, #0
 8000842:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000846:	2200      	movs	r2, #0
 8000848:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 800084c:	2200      	movs	r2, #0
 800084e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000852:	2201      	movs	r2, #1
 8000854:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000858:	2201      	movs	r2, #1
 800085a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 800085e:	2202      	movs	r2, #2
 8000860:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000864:	2202      	movs	r2, #2
 8000866:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 800086a:	2201      	movs	r2, #1
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000870:	2201      	movs	r2, #1
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000876:	2201      	movs	r2, #1
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 800087c:	2201      	movs	r2, #1
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000882:	2200      	movs	r2, #0
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000888:	2200      	movs	r2, #0
 800088a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 800088e:	2200      	movs	r2, #0
 8000890:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_FDCAN2_Init+0x80>)
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fe17 	bl	80014c8 <HAL_FDCAN_Init>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 800089e:	f000 f9ab 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200119b4 	.word	0x200119b4
 80008ac:	40006800 	.word	0x40006800

080008b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_I2C1_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <MX_I2C1_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_I2C1_Init+0x74>)
 80008bc:	4a1b      	ldr	r2, [pc, #108]	; (800092c <MX_I2C1_Init+0x7c>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_I2C1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2C1_Init+0x74>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 f947 	bl	8001b80 <HAL_I2C_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f6:	f000 f97f 	bl	8000bf8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_I2C1_Init+0x74>)
 80008fc:	2100      	movs	r1, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 ffd4 	bl	80028ac <HAL_I2CEx_ConfigAnalogFilter>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 f976 	bl	8000bf8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <MX_I2C1_Init+0x74>)
 800090e:	2100      	movs	r1, #0
 8000910:	0018      	movs	r0, r3
 8000912:	f002 f817 	bl	8002944 <HAL_I2CEx_ConfigDigitalFilter>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 f96d 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20011800 	.word	0x20011800
 8000928:	40005400 	.word	0x40005400
 800092c:	10707dbc 	.word	0x10707dbc

08000930 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_IWDG_Init+0x34>)
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_IWDG_Init+0x38>)
 8000938:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_IWDG_Init+0x34>)
 800093c:	2202      	movs	r2, #2
 800093e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_IWDG_Init+0x34>)
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <MX_IWDG_Init+0x3c>)
 8000944:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_IWDG_Init+0x34>)
 8000948:	4a08      	ldr	r2, [pc, #32]	; (800096c <MX_IWDG_Init+0x3c>)
 800094a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_IWDG_Init+0x34>)
 800094e:	0018      	movs	r0, r3
 8000950:	f002 f844 	bl	80029dc <HAL_IWDG_Init>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000958:	f000 f94e 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	2001184c 	.word	0x2001184c
 8000968:	40003000 	.word	0x40003000
 800096c:	00000fff 	.word	0x00000fff

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_SPI1_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_SPI1_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_SPI1_Init+0x74>)
 800097c:	2282      	movs	r2, #130	; 0x82
 800097e:	0052      	lsls	r2, r2, #1
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_SPI1_Init+0x74>)
 800098a:	22e0      	movs	r2, #224	; 0xe0
 800098c:	00d2      	lsls	r2, r2, #3
 800098e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_SPI1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI1_Init+0x74>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	02d2      	lsls	r2, r2, #11
 80009a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009be:	2207      	movs	r2, #7
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <MX_SPI1_Init+0x74>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f004 fbd7 	bl	8005184 <HAL_SPI_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 f90d 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20011950 	.word	0x20011950
 80009e8:	40013000 	.word	0x40013000

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 80009f2:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <MX_USART1_UART_Init+0x98>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 80009f8:	22e1      	movs	r2, #225	; 0xe1
 80009fa:	0252      	lsls	r2, r2, #9
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f004 ff12 	bl	8005860 <HAL_UART_Init>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f8da 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f005 ff6f 	bl	800692c <HAL_UARTEx_SetTxFifoThreshold>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f8d1 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f005 ffa6 	bl	80069ac <HAL_UARTEx_SetRxFifoThreshold>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f8c8 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f005 ff24 	bl	80068b8 <HAL_UARTEx_DisableFifoMode>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f8c0 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	2001185c 	.word	0x2001185c
 8000a84:	40013800 	.word	0x40013800

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	2414      	movs	r4, #20
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	0018      	movs	r0, r3
 8000a94:	2314      	movs	r3, #20
 8000a96:	001a      	movs	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	f00c feaa 	bl	800d7f2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9e:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aae:	2220      	movs	r2, #32
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aba:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000abc:	2104      	movs	r1, #4
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad2:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000aec:	2108      	movs	r1, #8
 8000aee:	430a      	orrs	r2, r1
 8000af0:	635a      	str	r2, [r3, #52]	; 0x34
 8000af2:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af6:	2208      	movs	r2, #8
 8000af8:	4013      	ands	r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000b04:	2102      	movs	r1, #2
 8000b06:	430a      	orrs	r2, r1
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_GPIO_Init+0x12c>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0e:	2202      	movs	r2, #2
 8000b10:	4013      	ands	r3, r2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <MX_GPIO_Init+0x130>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	0019      	movs	r1, r3
 8000b20:	f001 f810 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	217f      	movs	r1, #127	; 0x7f
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 f80a 	bl	8001b44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0x138>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	2138      	movs	r1, #56	; 0x38
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 f804 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	0092      	lsls	r2, r2, #2
 8000b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2201      	movs	r2, #1
 8000b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0x130>)
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	0010      	movs	r0, r2
 8000b5e:	f000 fe85 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	227f      	movs	r2, #127	; 0x7f
 8000b66:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MX_GPIO_Init+0x134>)
 8000b7e:	0019      	movs	r1, r3
 8000b80:	0010      	movs	r0, r2
 8000b82:	f000 fe73 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2238      	movs	r2, #56	; 0x38
 8000b8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2201      	movs	r2, #1
 8000b92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <MX_GPIO_Init+0x138>)
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	0010      	movs	r0, r2
 8000ba8:	f000 fe60 	bl	800186c <HAL_GPIO_Init>

}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b00b      	add	sp, #44	; 0x2c
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	50000800 	.word	0x50000800
 8000bbc:	50000c00 	.word	0x50000c00
 8000bc0:	50000400 	.word	0x50000400

08000bc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f009 fee6 	bl	800a99e <osDelay>
 8000bd2:	e7fb      	b.n	8000bcc <StartDefaultTask+0x8>

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be6:	f000 fabb 	bl	8001160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	0549      	lsls	r1, r1, #21
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	055b      	lsls	r3, r3, #21
 8000c38:	4013      	ands	r3, r2
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000c3e:	2302      	movs	r3, #2
 8000c40:	425b      	negs	r3, r3
 8000c42:	2200      	movs	r2, #0
 8000c44:	2103      	movs	r1, #3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fb44 	bl	80012d4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 faa1 	bl	8001198 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	231c      	movs	r3, #28
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	0018      	movs	r0, r3
 8000c72:	2314      	movs	r3, #20
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f00c fdbb 	bl	800d7f2 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a3f      	ldr	r2, [pc, #252]	; (8000d80 <HAL_FDCAN_MspInit+0x11c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d139      	bne.n	8000cfa <HAL_FDCAN_MspInit+0x96>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <HAL_FDCAN_MspInit+0x120>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <HAL_FDCAN_MspInit+0x120>)
 8000c8e:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c90:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <HAL_FDCAN_MspInit+0x120>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10d      	bne.n	8000cb4 <HAL_FDCAN_MspInit+0x50>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c98:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	0149      	lsls	r1, r1, #5
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca6:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	015b      	lsls	r3, r3, #5
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb8:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000cba:	2104      	movs	r1, #4
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PC4     ------> FDCAN1_RX
    PC5     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ccc:	211c      	movs	r1, #28
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2230      	movs	r2, #48	; 0x30
 8000cd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <HAL_FDCAN_MspInit+0x128>)
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	0010      	movs	r0, r2
 8000cf4:	f000 fdba 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000cf8:	e03d      	b.n	8000d76 <HAL_FDCAN_MspInit+0x112>
  else if(hfdcan->Instance==FDCAN2)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <HAL_FDCAN_MspInit+0x12c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d138      	bne.n	8000d76 <HAL_FDCAN_MspInit+0x112>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <HAL_FDCAN_MspInit+0x120>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_FDCAN_MspInit+0x120>)
 8000d0c:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_FDCAN_MspInit+0x120>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10d      	bne.n	8000d32 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0149      	lsls	r1, r1, #5
 8000d20:	430a      	orrs	r2, r1
 8000d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000d38:	2104      	movs	r1, #4
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_FDCAN_MspInit+0x124>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	2204      	movs	r2, #4
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d4a:	211c      	movs	r1, #28
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2202      	movs	r2, #2
 8000d56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2203      	movs	r2, #3
 8000d68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_FDCAN_MspInit+0x128>)
 8000d6e:	0019      	movs	r1, r3
 8000d70:	0010      	movs	r0, r2
 8000d72:	f000 fd7b 	bl	800186c <HAL_GPIO_Init>
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b00c      	add	sp, #48	; 0x30
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40006400 	.word	0x40006400
 8000d84:	20000208 	.word	0x20000208
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	50000800 	.word	0x50000800
 8000d90:	40006800 	.word	0x40006800

08000d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b08b      	sub	sp, #44	; 0x2c
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2414      	movs	r4, #20
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	0018      	movs	r0, r3
 8000da2:	2314      	movs	r3, #20
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f00c fd23 	bl	800d7f2 <memset>
  if(hi2c->Instance==I2C1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <HAL_I2C_MspInit+0xa0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d139      	bne.n	8000e2a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_I2C_MspInit+0xa4>)
 8000db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <HAL_I2C_MspInit+0xa4>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_I2C_MspInit+0xa4>)
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	22c0      	movs	r2, #192	; 0xc0
 8000dd2:	00d2      	lsls	r2, r2, #3
 8000dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	0021      	movs	r1, r4
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2212      	movs	r2, #18
 8000ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2201      	movs	r2, #1
 8000de2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2206      	movs	r2, #6
 8000dee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	187a      	adds	r2, r7, r1
 8000df2:	23a0      	movs	r3, #160	; 0xa0
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 fd37 	bl	800186c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_I2C_MspInit+0xa4>)
 8000e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_I2C_MspInit+0xa4>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0389      	lsls	r1, r1, #14
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_I2C_MspInit+0xa4>)
 8000e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	039b      	lsls	r3, r3, #14
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	2017      	movs	r0, #23
 8000e20:	f000 fa58 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000e24:	2017      	movs	r0, #23
 8000e26:	f000 fa6a 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b00b      	add	sp, #44	; 0x2c
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b08b      	sub	sp, #44	; 0x2c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	2414      	movs	r4, #20
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f00c fccf 	bl	800d7f2 <memset>
  if(hspi->Instance==SPI1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0149      	lsls	r1, r1, #5
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e92:	0021      	movs	r1, r4
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	22f0      	movs	r2, #240	; 0xf0
 8000e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	187a      	adds	r2, r7, r1
 8000eb4:	23a0      	movs	r3, #160	; 0xa0
 8000eb6:	05db      	lsls	r3, r3, #23
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fcd6 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b00b      	add	sp, #44	; 0x2c
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	2414      	movs	r4, #20
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f00c fc85 	bl	800d7f2 <memset>
  if(huart->Instance==USART1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_UART_MspInit+0x9c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d137      	bne.n	8000f62 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	01c9      	lsls	r1, r1, #7
 8000efc:	430a      	orrs	r2, r1
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f14:	2102      	movs	r1, #2
 8000f16:	430a      	orrs	r2, r1
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1e:	2202      	movs	r2, #2
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f26:	0021      	movs	r1, r4
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
 8000f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2202      	movs	r2, #2
 8000f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_UART_MspInit+0xa4>)
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	0010      	movs	r0, r2
 8000f4e:	f000 fc8d 	bl	800186c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2103      	movs	r1, #3
 8000f56:	201b      	movs	r0, #27
 8000f58:	f000 f9bc 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5c:	201b      	movs	r0, #27
 8000f5e:	f000 f9ce 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b00b      	add	sp, #44	; 0x2c
 8000f68:	bd90      	pop	{r4, r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40021000 	.word	0x40021000
 8000f74:	50000400 	.word	0x50000400

08000f78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority ,0);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	2011      	movs	r0, #17
 8000f90:	f000 f9a0 	bl	80012d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000f94:	2011      	movs	r0, #17
 8000f96:	f000 f9b2 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_InitTick+0xa4>)
 8000f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <HAL_InitTick+0xa4>)
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_InitTick+0xa4>)
 8000fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000faa:	2210      	movs	r2, #16
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	18fa      	adds	r2, r7, r3
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f003 fe7b 	bl	8004cb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fc2:	f003 fe63 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	4914      	ldr	r1, [pc, #80]	; (8001020 <HAL_InitTick+0xa8>)
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff f89a 	bl	8000108 <__udivsi3>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0xac>)
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <HAL_InitTick+0xb0>)
 8000fde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_InitTick+0xac>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_InitTick+0xb4>)
 8000fe4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_InitTick+0xac>)
 8000fe8:	6a3a      	ldr	r2, [r7, #32]
 8000fea:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_InitTick+0xac>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_InitTick+0xac>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_InitTick+0xac>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f004 f97a 	bl	80052f4 <HAL_TIM_Base_Init>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d105      	bne.n	8001010 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_InitTick+0xac>)
 8001006:	0018      	movs	r0, r3
 8001008:	f004 f9d4 	bl	80053b4 <HAL_TIM_Base_Start_IT>
 800100c:	0003      	movs	r3, r0
 800100e:	e000      	b.n	8001012 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b00a      	add	sp, #40	; 0x28
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40021000 	.word	0x40021000
 8001020:	000f4240 	.word	0x000f4240
 8001024:	20011a18 	.word	0x20011a18
 8001028:	40001000 	.word	0x40001000
 800102c:	000003e7 	.word	0x000003e7

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <USB_UCPD1_2_IRQHandler+0x14>)
 8001042:	0018      	movs	r0, r3
 8001044:	f001 fe50 	bl	8002ce8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20012f78 	.word	0x20012f78

08001054 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800105a:	0018      	movs	r0, r3
 800105c:	f004 fa0c 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20011a18 	.word	0x20011a18

0800106c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <I2C1_IRQHandler+0x2c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	699a      	ldr	r2, [r3, #24]
 8001076:	23e0      	movs	r3, #224	; 0xe0
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4013      	ands	r3, r2
 800107c:	d004      	beq.n	8001088 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <I2C1_IRQHandler+0x2c>)
 8001080:	0018      	movs	r0, r3
 8001082:	f000 fe2d 	bl	8001ce0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001086:	e003      	b.n	8001090 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <I2C1_IRQHandler+0x2c>)
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fe0e 	bl	8001cac <HAL_I2C_EV_IRQHandler>
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	20011800 	.word	0x20011800

0800109c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <USART1_IRQHandler+0x14>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f004 fc32 	bl	800590c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	2001185c 	.word	0x2001185c

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <SystemInit+0x14>)
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	0512      	lsls	r2, r2, #20
 80010be:	609a      	str	r2, [r3, #8]
#endif
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d0:	f7ff fff0 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopForever+0xe>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopForever+0x16>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010fa:	f00c fb4b 	bl	800d794 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010fe:	f7ff fa99 	bl	8000634 <main>

08001102 <LoopForever>:

LoopForever:
  b LoopForever
 8001102:	e7fe      	b.n	8001102 <LoopForever>
  ldr   r0, =_estack
 8001104:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001110:	0800dc78 	.word	0x0800dc78
  ldr r2, =_sbss
 8001114:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001118:	20013288 	.word	0x20013288

0800111c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_COMP_IRQHandler>
	...

08001120 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x3c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Init+0x3c>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	0049      	lsls	r1, r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff1c 	bl	8000f78 <HAL_InitTick>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d003      	beq.n	800114c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fd5a 	bl	8000c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	18d2      	adds	r2, r2, r3
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_IncTick+0x20>)
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000008 	.word	0x20000008
 8001180:	20011a64 	.word	0x20011a64

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20011a64 	.word	0x20011a64

08001198 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40010000 	.word	0x40010000
 80011c0:	fffff9ff 	.word	0xfffff9ff

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	0002      	movs	r2, r0
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b7f      	cmp	r3, #127	; 0x7f
 80011d6:	d809      	bhi.n	80011ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	001a      	movs	r2, r3
 80011de:	231f      	movs	r3, #31
 80011e0:	401a      	ands	r2, r3
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_EnableIRQ+0x30>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	4091      	lsls	r1, r2
 80011e8:	000a      	movs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0002      	movs	r2, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b7f      	cmp	r3, #127	; 0x7f
 800120c:	d828      	bhi.n	8001260 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120e:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <__NVIC_SetPriority+0xd4>)
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b25b      	sxtb	r3, r3
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	33c0      	adds	r3, #192	; 0xc0
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	589b      	ldr	r3, [r3, r2]
 800121e:	1dfa      	adds	r2, r7, #7
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	0011      	movs	r1, r2
 8001224:	2203      	movs	r2, #3
 8001226:	400a      	ands	r2, r1
 8001228:	00d2      	lsls	r2, r2, #3
 800122a:	21ff      	movs	r1, #255	; 0xff
 800122c:	4091      	lsls	r1, r2
 800122e:	000a      	movs	r2, r1
 8001230:	43d2      	mvns	r2, r2
 8001232:	401a      	ands	r2, r3
 8001234:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	019b      	lsls	r3, r3, #6
 800123a:	22ff      	movs	r2, #255	; 0xff
 800123c:	401a      	ands	r2, r3
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	0018      	movs	r0, r3
 8001244:	2303      	movs	r3, #3
 8001246:	4003      	ands	r3, r0
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124c:	481f      	ldr	r0, [pc, #124]	; (80012cc <__NVIC_SetPriority+0xd4>)
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b25b      	sxtb	r3, r3
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	430a      	orrs	r2, r1
 8001258:	33c0      	adds	r3, #192	; 0xc0
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800125e:	e031      	b.n	80012c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <__NVIC_SetPriority+0xd8>)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	0019      	movs	r1, r3
 8001268:	230f      	movs	r3, #15
 800126a:	400b      	ands	r3, r1
 800126c:	3b08      	subs	r3, #8
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3306      	adds	r3, #6
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	18d3      	adds	r3, r2, r3
 8001276:	3304      	adds	r3, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0011      	movs	r1, r2
 8001280:	2203      	movs	r2, #3
 8001282:	400a      	ands	r2, r1
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	21ff      	movs	r1, #255	; 0xff
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	401a      	ands	r2, r3
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	2303      	movs	r3, #3
 80012a2:	4003      	ands	r3, r0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <__NVIC_SetPriority+0xd8>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	001c      	movs	r4, r3
 80012b0:	230f      	movs	r3, #15
 80012b2:	4023      	ands	r3, r4
 80012b4:	3b08      	subs	r3, #8
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	430a      	orrs	r2, r1
 80012ba:	3306      	adds	r3, #6
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	18c3      	adds	r3, r0, r3
 80012c0:	3304      	adds	r3, #4
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b003      	add	sp, #12
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	210f      	movs	r1, #15
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	1c02      	adds	r2, r0, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff81 	bl	80011f8 <__NVIC_SetPriority>
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	0002      	movs	r2, r0
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff57 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e04f      	b.n	80013d2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2225      	movs	r2, #37	; 0x25
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d008      	beq.n	8001350 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2204      	movs	r2, #4
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	; 0x24
 8001348:	2100      	movs	r1, #0
 800134a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e040      	b.n	80013d2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	210e      	movs	r1, #14
 800135c:	438a      	bics	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136a:	491c      	ldr	r1, [pc, #112]	; (80013dc <HAL_DMA_Abort+0xbc>)
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	221c      	movs	r2, #28
 8001386:	401a      	ands	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2101      	movs	r1, #1
 800138e:	4091      	lsls	r1, r2
 8001390:	000a      	movs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800139c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	490a      	ldr	r1, [pc, #40]	; (80013dc <HAL_DMA_Abort+0xbc>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2225      	movs	r2, #37	; 0x25
 80013c4:	2101      	movs	r1, #1
 80013c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2224      	movs	r2, #36	; 0x24
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	fffffeff 	.word	0xfffffeff

080013e0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	210f      	movs	r1, #15
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2225      	movs	r2, #37	; 0x25
 80013f4:	5c9b      	ldrb	r3, [r3, r2]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d006      	beq.n	800140a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2204      	movs	r2, #4
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e048      	b.n	800149c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	210e      	movs	r1, #14
 8001416:	438a      	bics	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	491d      	ldr	r1, [pc, #116]	; (80014ac <HAL_DMA_Abort_IT+0xcc>)
 8001436:	400a      	ands	r2, r1
 8001438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	221c      	movs	r2, #28
 8001440:	401a      	ands	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2101      	movs	r1, #1
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001456:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146a:	4910      	ldr	r1, [pc, #64]	; (80014ac <HAL_DMA_Abort_IT+0xcc>)
 800146c:	400a      	ands	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001478:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2225      	movs	r2, #37	; 0x25
 800147e:	2101      	movs	r1, #1
 8001480:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2224      	movs	r2, #36	; 0x24
 8001486:	2100      	movs	r1, #0
 8001488:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	0010      	movs	r0, r2
 800149a:	4798      	blx	r3
    }
  }
  return status;
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b004      	add	sp, #16
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	fffffeff 	.word	0xfffffeff

080014b0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2225      	movs	r2, #37	; 0x25
 80014bc:	5c9b      	ldrb	r3, [r3, r2]
 80014be:	b2db      	uxtb	r3, r3
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e14e      	b.n	8001778 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	225c      	movs	r2, #92	; 0x5c
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d107      	bne.n	80014f6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	225d      	movs	r2, #93	; 0x5d
 80014ea:	2100      	movs	r1, #0
 80014ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff fbb7 	bl	8000c64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2110      	movs	r1, #16
 8001502:	438a      	bics	r2, r1
 8001504:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001506:	f7ff fe3d 	bl	8001184 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800150e:	e012      	b.n	8001536 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001510:	f7ff fe38 	bl	8001184 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d90b      	bls.n	8001536 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	2201      	movs	r2, #1
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	225c      	movs	r2, #92	; 0x5c
 800152e:	2103      	movs	r1, #3
 8001530:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e120      	b.n	8001778 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2208      	movs	r2, #8
 800153e:	4013      	ands	r3, r2
 8001540:	2b08      	cmp	r3, #8
 8001542:	d0e5      	beq.n	8001510 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2101      	movs	r1, #1
 8001550:	430a      	orrs	r2, r1
 8001552:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff fe16 	bl	8001184 <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800155c:	e012      	b.n	8001584 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800155e:	f7ff fe11 	bl	8001184 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b0a      	cmp	r3, #10
 800156a:	d90b      	bls.n	8001584 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	2201      	movs	r2, #1
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	225c      	movs	r2, #92	; 0x5c
 800157c:	2103      	movs	r1, #3
 800157e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0f9      	b.n	8001778 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	d0e6      	beq.n	800155e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2102      	movs	r1, #2
 800159c:	430a      	orrs	r2, r1
 800159e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a76      	ldr	r2, [pc, #472]	; (8001780 <HAL_FDCAN_Init+0x2b8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d103      	bne.n	80015b2 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80015aa:	4a76      	ldr	r2, [pc, #472]	; (8001784 <HAL_FDCAN_Init+0x2bc>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7c1b      	ldrb	r3, [r3, #16]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	438a      	bics	r2, r1
 80015c8:	619a      	str	r2, [r3, #24]
 80015ca:	e007      	b.n	80015dc <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2140      	movs	r1, #64	; 0x40
 80015d8:	430a      	orrs	r2, r1
 80015da:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7c5b      	ldrb	r3, [r3, #17]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d109      	bne.n	80015f8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	01c9      	lsls	r1, r1, #7
 80015f2:	430a      	orrs	r2, r1
 80015f4:	619a      	str	r2, [r3, #24]
 80015f6:	e007      	b.n	8001608 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4961      	ldr	r1, [pc, #388]	; (8001788 <HAL_FDCAN_Init+0x2c0>)
 8001604:	400a      	ands	r2, r1
 8001606:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7c9b      	ldrb	r3, [r3, #18]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d108      	bne.n	8001622 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	495c      	ldr	r1, [pc, #368]	; (800178c <HAL_FDCAN_Init+0x2c4>)
 800161c:	400a      	ands	r2, r1
 800161e:	619a      	str	r2, [r3, #24]
 8001620:	e008      	b.n	8001634 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699a      	ldr	r2, [r3, #24]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0149      	lsls	r1, r1, #5
 8001630:	430a      	orrs	r2, r1
 8001632:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a55      	ldr	r2, [pc, #340]	; (8001790 <HAL_FDCAN_Init+0x2c8>)
 800163c:	4013      	ands	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	21a4      	movs	r1, #164	; 0xa4
 8001658:	438a      	bics	r2, r1
 800165a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2110      	movs	r1, #16
 8001668:	438a      	bics	r2, r1
 800166a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2104      	movs	r1, #4
 8001680:	430a      	orrs	r2, r1
 8001682:	619a      	str	r2, [r3, #24]
 8001684:	e02c      	b.n	80016e0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d028      	beq.n	80016e0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d01c      	beq.n	80016d0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	430a      	orrs	r2, r1
 80016a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2110      	movs	r1, #16
 80016b2:	430a      	orrs	r2, r1
 80016b4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d110      	bne.n	80016e0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2120      	movs	r1, #32
 80016ca:	430a      	orrs	r2, r1
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	e007      	b.n	80016e0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2120      	movs	r1, #32
 80016dc:	430a      	orrs	r2, r1
 80016de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016f8:	431a      	orrs	r2, r3
 80016fa:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	3b01      	subs	r3, #1
 8001702:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001708:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800170a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	23c0      	movs	r3, #192	; 0xc0
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d115      	bne.n	8001744 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	3b01      	subs	r3, #1
 8001724:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001726:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	3b01      	subs	r3, #1
 800172e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001730:	431a      	orrs	r2, r3
 8001732:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	3b01      	subs	r3, #1
 800173a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001740:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001742:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	22c0      	movs	r2, #192	; 0xc0
 800174a:	5899      	ldr	r1, [r3, r2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	21c0      	movs	r1, #192	; 0xc0
 8001758:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f000 f819 	bl	8001794 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	225c      	movs	r2, #92	; 0x5c
 8001772:	2101      	movs	r1, #1
 8001774:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b004      	add	sp, #16
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40006400 	.word	0x40006400
 8001784:	40006500 	.word	0x40006500
 8001788:	ffffbfff 	.word	0xffffbfff
 800178c:	ffffefff 	.word	0xffffefff
 8001790:	fffffcff 	.word	0xfffffcff

08001794 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800179e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d105      	bne.n	80017b6 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	22d4      	movs	r2, #212	; 0xd4
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4694      	mov	ip, r2
 80017b2:	4463      	add	r3, ip
 80017b4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	589b      	ldr	r3, [r3, r2]
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	041a      	lsls	r2, r3, #16
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3370      	adds	r3, #112	; 0x70
 80017de:	001a      	movs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	589b      	ldr	r3, [r3, r2]
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	061a      	lsls	r2, r3, #24
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	33b0      	adds	r3, #176	; 0xb0
 8001806:	001a      	movs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3389      	adds	r3, #137	; 0x89
 8001810:	33ff      	adds	r3, #255	; 0xff
 8001812:	001a      	movs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2298      	movs	r2, #152	; 0x98
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	189a      	adds	r2, r3, r2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	229e      	movs	r2, #158	; 0x9e
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	189a      	adds	r2, r3, r2
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e005      	b.n	8001842 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3304      	adds	r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	22d4      	movs	r2, #212	; 0xd4
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4694      	mov	ip, r2
 800184a:	4463      	add	r3, ip
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3f1      	bcc.n	8001836 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	4000b400 	.word	0x4000b400
 8001860:	40006800 	.word	0x40006800
 8001864:	ffe0ffff 	.word	0xffe0ffff
 8001868:	f0ffffff 	.word	0xf0ffffff

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e14d      	b.n	8001b18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4091      	lsls	r1, r2
 8001886:	000a      	movs	r2, r1
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x28>
 8001892:	e13e      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d00b      	beq.n	80018b4 <HAL_GPIO_Init+0x48>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a8:	2b11      	cmp	r3, #17
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b12      	cmp	r3, #18
 80018b2:	d130      	bne.n	8001916 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	409a      	lsls	r2, r3
 80018c2:	0013      	movs	r3, r2
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	409a      	lsls	r2, r3
 80018d6:	0013      	movs	r3, r2
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ea:	2201      	movs	r2, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
 80018f0:	0013      	movs	r3, r2
 80018f2:	43da      	mvns	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	2201      	movs	r2, #1
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0xea>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b12      	cmp	r3, #18
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	58d3      	ldr	r3, [r2, r3]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2107      	movs	r1, #7
 8001982:	400b      	ands	r3, r1
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	409a      	lsls	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	6939      	ldr	r1, [r7, #16]
 800199c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2203      	movs	r2, #3
 80019bc:	401a      	ands	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_GPIO_Init+0x174>
 80019de:	e098      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80019e0:	4a53      	ldr	r2, [pc, #332]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3318      	adds	r3, #24
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	589b      	ldr	r3, [r3, r2]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2203      	movs	r2, #3
 80019f2:	4013      	ands	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	220f      	movs	r2, #15
 80019f8:	409a      	lsls	r2, r3
 80019fa:	0013      	movs	r3, r2
 80019fc:	43da      	mvns	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	23a0      	movs	r3, #160	; 0xa0
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x1d2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x1ce>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a46      	ldr	r2, [pc, #280]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x1ca>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a45      	ldr	r2, [pc, #276]	; (8001b40 <HAL_GPIO_Init+0x2d4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x1c6>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a42:	2300      	movs	r3, #0
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	2103      	movs	r1, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a54:	4936      	ldr	r1, [pc, #216]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a62:	4a33      	ldr	r2, [pc, #204]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	58d3      	ldr	r3, [r2, r3]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a88:	4929      	ldr	r1, [pc, #164]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a92:	2384      	movs	r3, #132	; 0x84
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ab6:	491e      	ldr	r1, [pc, #120]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	2284      	movs	r2, #132	; 0x84
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	035b      	lsls	r3, r3, #13
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	4013      	ands	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	1e13      	subs	r3, r2, #0
 8001b22:	d000      	beq.n	8001b26 <HAL_GPIO_Init+0x2ba>
 8001b24:	e6aa      	b.n	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021800 	.word	0x40021800
 8001b34:	50000400 	.word	0x50000400
 8001b38:	50000800 	.word	0x50000800
 8001b3c:	50000c00 	.word	0x50000c00
 8001b40:	50001000 	.word	0x50001000

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	0008      	movs	r0, r1
 8001b4e:	0011      	movs	r1, r2
 8001b50:	1cbb      	adds	r3, r7, #2
 8001b52:	1c02      	adds	r2, r0, #0
 8001b54:	801a      	strh	r2, [r3, #0]
 8001b56:	1c7b      	adds	r3, r7, #1
 8001b58:	1c0a      	adds	r2, r1, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b5c:	1c7b      	adds	r3, r7, #1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b64:	1cbb      	adds	r3, r7, #2
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6e:	1cbb      	adds	r3, r7, #2
 8001b70:	881a      	ldrh	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e082      	b.n	8001c98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2241      	movs	r2, #65	; 0x41
 8001b96:	5c9b      	ldrb	r3, [r3, r2]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff f8f3 	bl	8000d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2241      	movs	r2, #65	; 0x41
 8001bb2:	2124      	movs	r1, #36	; 0x24
 8001bb4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	438a      	bics	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4934      	ldr	r1, [pc, #208]	; (8001ca0 <HAL_I2C_Init+0x120>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4931      	ldr	r1, [pc, #196]	; (8001ca4 <HAL_I2C_Init+0x124>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d108      	bne.n	8001bfe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0209      	lsls	r1, r1, #8
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e007      	b.n	8001c0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2184      	movs	r1, #132	; 0x84
 8001c08:	0209      	lsls	r1, r1, #8
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d104      	bne.n	8001c20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	491f      	ldr	r1, [pc, #124]	; (8001ca8 <HAL_I2C_Init+0x128>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	491a      	ldr	r1, [pc, #104]	; (8001ca4 <HAL_I2C_Init+0x124>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	021a      	lsls	r2, r3, #8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69d9      	ldr	r1, [r3, #28]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2241      	movs	r2, #65	; 0x41
 8001c84:	2120      	movs	r1, #32
 8001c86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2242      	movs	r2, #66	; 0x42
 8001c92:	2100      	movs	r1, #0
 8001c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	f0ffffff 	.word	0xf0ffffff
 8001ca4:	ffff7fff 	.word	0xffff7fff
 8001ca8:	02008000 	.word	0x02008000

08001cac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
  }
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	2301      	movs	r3, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d010      	beq.n	8001d26 <HAL_I2C_ER_IRQHandler+0x46>
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	09db      	lsrs	r3, r3, #7
 8001d08:	001a      	movs	r2, r3
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d00a      	beq.n	8001d26 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	2201      	movs	r2, #1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	0052      	lsls	r2, r2, #1
 8001d24:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	0a9b      	lsrs	r3, r3, #10
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d010      	beq.n	8001d54 <HAL_I2C_ER_IRQHandler+0x74>
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	09db      	lsrs	r3, r3, #7
 8001d36:	001a      	movs	r2, r3
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d00a      	beq.n	8001d54 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	2208      	movs	r2, #8
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	00d2      	lsls	r2, r2, #3
 8001d52:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	0a5b      	lsrs	r3, r3, #9
 8001d58:	001a      	movs	r2, r3
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d010      	beq.n	8001d82 <HAL_I2C_ER_IRQHandler+0xa2>
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	09db      	lsrs	r3, r3, #7
 8001d64:	001a      	movs	r2, r3
 8001d66:	2301      	movs	r3, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d00a      	beq.n	8001d82 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	2202      	movs	r2, #2
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	220b      	movs	r2, #11
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d005      	beq.n	8001d9c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0011      	movs	r1, r2
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 fbd8 	bl	800254c <I2C_ITError>
  }
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b006      	add	sp, #24
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	0008      	movs	r0, r1
 8001dce:	0011      	movs	r1, r2
 8001dd0:	1cfb      	adds	r3, r7, #3
 8001dd2:	1c02      	adds	r2, r0, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	003b      	movs	r3, r7
 8001dd8:	1c0a      	adds	r2, r1, #0
 8001dda:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2240      	movs	r2, #64	; 0x40
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <I2C_Slave_ISR_IT+0x24>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e0fa      	b.n	800202e <I2C_Slave_ISR_IT+0x21a>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	001a      	movs	r2, r3
 8001e46:	2301      	movs	r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d00b      	beq.n	8001e64 <I2C_Slave_ISR_IT+0x50>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	001a      	movs	r2, r3
 8001e52:	2301      	movs	r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d005      	beq.n	8001e64 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 f9f6 	bl	8002250 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	001a      	movs	r2, r3
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d054      	beq.n	8001f1a <I2C_Slave_ISR_IT+0x106>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	001a      	movs	r2, r3
 8001e76:	2301      	movs	r3, #1
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d04e      	beq.n	8001f1a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d12d      	bne.n	8001ee2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2241      	movs	r2, #65	; 0x41
 8001e8a:	5c9b      	ldrb	r3, [r3, r2]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b28      	cmp	r3, #40	; 0x28
 8001e90:	d10b      	bne.n	8001eaa <I2C_Slave_ISR_IT+0x96>
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	049b      	lsls	r3, r3, #18
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d106      	bne.n	8001eaa <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	0011      	movs	r1, r2
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 faf8 	bl	8002498 <I2C_ITListenCplt>
 8001ea8:	e036      	b.n	8001f18 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2241      	movs	r2, #65	; 0x41
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b29      	cmp	r3, #41	; 0x29
 8001eb4:	d110      	bne.n	8001ed8 <I2C_Slave_ISR_IT+0xc4>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <I2C_Slave_ISR_IT+0x224>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00c      	beq.n	8001ed8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 fc4a 	bl	8002762 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f957 	bl	8002184 <I2C_ITSlaveSeqCplt>
 8001ed6:	e01f      	b.n	8001f18 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2210      	movs	r2, #16
 8001ede:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ee0:	e09d      	b.n	800201e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	2204      	movs	r2, #4
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <I2C_Slave_ISR_IT+0xf4>
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	045b      	lsls	r3, r3, #17
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d000      	beq.n	8001f08 <I2C_Slave_ISR_IT+0xf4>
 8001f06:	e08a      	b.n	800201e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0011      	movs	r1, r2
 8001f10:	0018      	movs	r0, r3
 8001f12:	f000 fb1b 	bl	800254c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001f16:	e082      	b.n	800201e <I2C_Slave_ISR_IT+0x20a>
 8001f18:	e081      	b.n	800201e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	001a      	movs	r2, r3
 8001f20:	2301      	movs	r3, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	d031      	beq.n	8001f8a <I2C_Slave_ISR_IT+0x176>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d02b      	beq.n	8001f8a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d018      	beq.n	8001f6e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d154      	bne.n	8002022 <I2C_Slave_ISR_IT+0x20e>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <I2C_Slave_ISR_IT+0x224>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d050      	beq.n	8002022 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 f8fe 	bl	8002184 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f88:	e04b      	b.n	8002022 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	001a      	movs	r2, r3
 8001f90:	2301      	movs	r3, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	d00c      	beq.n	8001fb0 <I2C_Slave_ISR_IT+0x19c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d006      	beq.n	8001fb0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 f847 	bl	800203c <I2C_ITAddrCplt>
 8001fae:	e039      	b.n	8002024 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d033      	beq.n	8002024 <I2C_Slave_ISR_IT+0x210>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d02d      	beq.n	8002024 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d018      	beq.n	8002004 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
 8002002:	e00f      	b.n	8002024 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	045b      	lsls	r3, r3, #17
 800200a:	429a      	cmp	r2, r3
 800200c:	d002      	beq.n	8002014 <I2C_Slave_ISR_IT+0x200>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 f8b4 	bl	8002184 <I2C_ITSlaveSeqCplt>
 800201c:	e002      	b.n	8002024 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	e000      	b.n	8002024 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002022:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b006      	add	sp, #24
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	ffff0000 	.word	0xffff0000

0800203c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2241      	movs	r2, #65	; 0x41
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	001a      	movs	r2, r3
 8002050:	2328      	movs	r3, #40	; 0x28
 8002052:	4013      	ands	r3, r2
 8002054:	2b28      	cmp	r3, #40	; 0x28
 8002056:	d000      	beq.n	800205a <I2C_ITAddrCplt+0x1e>
 8002058:	e088      	b.n	800216c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2da      	uxtb	r2, r3
 8002064:	250f      	movs	r5, #15
 8002066:	197b      	adds	r3, r7, r5
 8002068:	2101      	movs	r1, #1
 800206a:	400a      	ands	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b29a      	uxth	r2, r3
 8002078:	200c      	movs	r0, #12
 800207a:	183b      	adds	r3, r7, r0
 800207c:	21fe      	movs	r1, #254	; 0xfe
 800207e:	400a      	ands	r2, r1
 8002080:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	b29a      	uxth	r2, r3
 800208a:	240a      	movs	r4, #10
 800208c:	193b      	adds	r3, r7, r4
 800208e:	0592      	lsls	r2, r2, #22
 8002090:	0d92      	lsrs	r2, r2, #22
 8002092:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2308      	movs	r3, #8
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	21fe      	movs	r1, #254	; 0xfe
 80020a2:	400a      	ands	r2, r1
 80020a4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d148      	bne.n	8002140 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80020ae:	0021      	movs	r1, r4
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	09db      	lsrs	r3, r3, #7
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	4053      	eors	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	001a      	movs	r2, r3
 80020c2:	2306      	movs	r3, #6
 80020c4:	4013      	ands	r3, r2
 80020c6:	d120      	bne.n	800210a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80020c8:	183b      	adds	r3, r7, r0
 80020ca:	187a      	adds	r2, r7, r1
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d14c      	bne.n	800217c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2208      	movs	r2, #8
 80020ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80020f8:	183b      	adds	r3, r7, r0
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	197b      	adds	r3, r7, r5
 80020fe:	7819      	ldrb	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff fe5e 	bl	8001dc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002108:	e038      	b.n	800217c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800210a:	240c      	movs	r4, #12
 800210c:	193b      	adds	r3, r7, r4
 800210e:	2208      	movs	r2, #8
 8002110:	18ba      	adds	r2, r7, r2
 8002112:	8812      	ldrh	r2, [r2, #0]
 8002114:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	021a      	lsls	r2, r3, #8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0011      	movs	r1, r2
 800211e:	0018      	movs	r0, r3
 8002120:	f000 fb60 	bl	80027e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	2100      	movs	r1, #0
 800212a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800212c:	193b      	adds	r3, r7, r4
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	7819      	ldrb	r1, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff fe43 	bl	8001dc4 <HAL_I2C_AddrCallback>
}
 800213e:	e01d      	b.n	800217c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	021a      	lsls	r2, r3, #8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0011      	movs	r1, r2
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fb4b 	bl	80027e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002156:	230c      	movs	r3, #12
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	230f      	movs	r3, #15
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	7819      	ldrb	r1, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff fe2d 	bl	8001dc4 <HAL_I2C_AddrCallback>
}
 800216a:	e007      	b.n	800217c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2208      	movs	r2, #8
 8002172:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2240      	movs	r2, #64	; 0x40
 8002178:	2100      	movs	r1, #0
 800217a:	5499      	strb	r1, [r3, r2]
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bdb0      	pop	{r4, r5, r7, pc}

08002184 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2242      	movs	r2, #66	; 0x42
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	0b9b      	lsrs	r3, r3, #14
 80021a0:	001a      	movs	r2, r3
 80021a2:	2301      	movs	r3, #1
 80021a4:	4013      	ands	r3, r2
 80021a6:	d008      	beq.n	80021ba <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4925      	ldr	r1, [pc, #148]	; (8002248 <I2C_ITSlaveSeqCplt+0xc4>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e00d      	b.n	80021d6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0bdb      	lsrs	r3, r3, #15
 80021be:	001a      	movs	r2, r3
 80021c0:	2301      	movs	r3, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	d007      	beq.n	80021d6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	491e      	ldr	r1, [pc, #120]	; (800224c <I2C_ITSlaveSeqCplt+0xc8>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2241      	movs	r2, #65	; 0x41
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b29      	cmp	r3, #41	; 0x29
 80021e0:	d114      	bne.n	800220c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2241      	movs	r2, #65	; 0x41
 80021e6:	2128      	movs	r1, #40	; 0x28
 80021e8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2101      	movs	r1, #1
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 faf5 	bl	80027e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	2100      	movs	r1, #0
 8002200:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f7ff fdcd 	bl	8001da4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800220a:	e019      	b.n	8002240 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2241      	movs	r2, #65	; 0x41
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b2a      	cmp	r3, #42	; 0x2a
 8002216:	d113      	bne.n	8002240 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2128      	movs	r1, #40	; 0x28
 800221e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2222      	movs	r2, #34	; 0x22
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2102      	movs	r1, #2
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fada 	bl	80027e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	2100      	movs	r1, #0
 8002236:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff fdba 	bl	8001db4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	ffffbfff 	.word	0xffffbfff
 800224c:	ffff7fff 	.word	0xffff7fff

08002250 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002266:	200f      	movs	r0, #15
 8002268:	183b      	adds	r3, r7, r0
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	2141      	movs	r1, #65	; 0x41
 800226e:	5c52      	ldrb	r2, [r2, r1]
 8002270:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2220      	movs	r2, #32
 8002278:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800227a:	183b      	adds	r3, r7, r0
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b21      	cmp	r3, #33	; 0x21
 8002280:	d003      	beq.n	800228a <I2C_ITSlaveCplt+0x3a>
 8002282:	183b      	adds	r3, r7, r0
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b29      	cmp	r3, #41	; 0x29
 8002288:	d109      	bne.n	800229e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800228a:	4a7d      	ldr	r2, [pc, #500]	; (8002480 <I2C_ITSlaveCplt+0x230>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0011      	movs	r1, r2
 8002290:	0018      	movs	r0, r3
 8002292:	f000 faa7 	bl	80027e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2221      	movs	r2, #33	; 0x21
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
 800229c:	e011      	b.n	80022c2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800229e:	220f      	movs	r2, #15
 80022a0:	18bb      	adds	r3, r7, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b22      	cmp	r3, #34	; 0x22
 80022a6:	d003      	beq.n	80022b0 <I2C_ITSlaveCplt+0x60>
 80022a8:	18bb      	adds	r3, r7, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b2a      	cmp	r3, #42	; 0x2a
 80022ae:	d108      	bne.n	80022c2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80022b0:	4a74      	ldr	r2, [pc, #464]	; (8002484 <I2C_ITSlaveCplt+0x234>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0011      	movs	r1, r2
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 fa94 	bl	80027e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2222      	movs	r2, #34	; 0x22
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0209      	lsls	r1, r1, #8
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	496a      	ldr	r1, [pc, #424]	; (8002488 <I2C_ITSlaveCplt+0x238>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fa3b 	bl	8002762 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	0b9b      	lsrs	r3, r3, #14
 80022f0:	001a      	movs	r2, r3
 80022f2:	2301      	movs	r3, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	d013      	beq.n	8002320 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4962      	ldr	r1, [pc, #392]	; (800248c <I2C_ITSlaveCplt+0x23c>)
 8002304:	400a      	ands	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800231e:	e018      	b.n	8002352 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	0bdb      	lsrs	r3, r3, #15
 8002324:	001a      	movs	r2, r3
 8002326:	2301      	movs	r3, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d012      	beq.n	8002352 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4956      	ldr	r1, [pc, #344]	; (8002490 <I2C_ITSlaveCplt+0x240>)
 8002338:	400a      	ands	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	b29a      	uxth	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	001a      	movs	r2, r3
 8002358:	2301      	movs	r3, #1
 800235a:	4013      	ands	r3, r2
 800235c:	d020      	beq.n	80023a0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2204      	movs	r2, #4
 8002362:	4393      	bics	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	2204      	movs	r2, #4
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2242      	movs	r2, #66	; 0x42
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0011      	movs	r1, r2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f8b9 	bl	800254c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2241      	movs	r2, #65	; 0x41
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b28      	cmp	r3, #40	; 0x28
 80023e4:	d147      	bne.n	8002476 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0011      	movs	r1, r2
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f853 	bl	8002498 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023f2:	e040      	b.n	8002476 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	4a26      	ldr	r2, [pc, #152]	; (8002494 <I2C_ITSlaveCplt+0x244>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d016      	beq.n	800242c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff febf 	bl	8002184 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a22      	ldr	r2, [pc, #136]	; (8002494 <I2C_ITSlaveCplt+0x244>)
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2241      	movs	r2, #65	; 0x41
 8002410:	2120      	movs	r1, #32
 8002412:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f7ff fcdd 	bl	8001de4 <HAL_I2C_ListenCpltCallback>
}
 800242a:	e024      	b.n	8002476 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2241      	movs	r2, #65	; 0x41
 8002430:	5c9b      	ldrb	r3, [r3, r2]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b22      	cmp	r3, #34	; 0x22
 8002436:	d10f      	bne.n	8002458 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2241      	movs	r2, #65	; 0x41
 800243c:	2120      	movs	r1, #32
 800243e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	2100      	movs	r1, #0
 800244c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff fcaf 	bl	8001db4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002456:	e00e      	b.n	8002476 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2241      	movs	r2, #65	; 0x41
 800245c:	2120      	movs	r1, #32
 800245e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff fc97 	bl	8001da4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b006      	add	sp, #24
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	00008001 	.word	0x00008001
 8002484:	00008002 	.word	0x00008002
 8002488:	fe00e800 	.word	0xfe00e800
 800248c:	ffffbfff 	.word	0xffffbfff
 8002490:	ffff7fff 	.word	0xffff7fff
 8002494:	ffff0000 	.word	0xffff0000

08002498 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a27      	ldr	r2, [pc, #156]	; (8002544 <I2C_ITListenCplt+0xac>)
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2241      	movs	r2, #65	; 0x41
 80024b2:	2120      	movs	r1, #32
 80024b4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2242      	movs	r2, #66	; 0x42
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	001a      	movs	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d022      	beq.n	8002516 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d012      	beq.n	8002516 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	2204      	movs	r2, #4
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002516:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <I2C_ITListenCplt+0xb0>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f000 f961 	bl	80027e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2210      	movs	r2, #16
 8002528:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2240      	movs	r2, #64	; 0x40
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff fc55 	bl	8001de4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b002      	add	sp, #8
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	ffff0000 	.word	0xffff0000
 8002548:	00008003 	.word	0x00008003

0800254c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002556:	200f      	movs	r0, #15
 8002558:	183b      	adds	r3, r7, r0
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	2141      	movs	r1, #65	; 0x41
 800255e:	5c52      	ldrb	r2, [r2, r1]
 8002560:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2242      	movs	r2, #66	; 0x42
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a62      	ldr	r2, [pc, #392]	; (80026f8 <I2C_ITError+0x1ac>)
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002582:	183b      	adds	r3, r7, r0
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b28      	cmp	r3, #40	; 0x28
 8002588:	d007      	beq.n	800259a <I2C_ITError+0x4e>
 800258a:	183b      	adds	r3, r7, r0
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b29      	cmp	r3, #41	; 0x29
 8002590:	d003      	beq.n	800259a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002592:	183b      	adds	r3, r7, r0
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b2a      	cmp	r3, #42	; 0x2a
 8002598:	d10c      	bne.n	80025b4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2103      	movs	r1, #3
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f920 	bl	80027e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2241      	movs	r2, #65	; 0x41
 80025a8:	2128      	movs	r1, #40	; 0x28
 80025aa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a53      	ldr	r2, [pc, #332]	; (80026fc <I2C_ITError+0x1b0>)
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
 80025b2:	e012      	b.n	80025da <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <I2C_ITError+0x1b4>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0011      	movs	r1, r2
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f912 	bl	80027e4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2241      	movs	r2, #65	; 0x41
 80025c4:	5c9b      	ldrb	r3, [r3, r2]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d003      	beq.n	80025d4 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2241      	movs	r2, #65	; 0x41
 80025d0:	2120      	movs	r1, #32
 80025d2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03b      	beq.n	8002660 <I2C_ITError+0x114>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b11      	cmp	r3, #17
 80025ec:	d002      	beq.n	80025f4 <I2C_ITError+0xa8>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b21      	cmp	r3, #33	; 0x21
 80025f2:	d135      	bne.n	8002660 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	01db      	lsls	r3, r3, #7
 80025fe:	401a      	ands	r2, r3
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	01db      	lsls	r3, r3, #7
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	493c      	ldr	r1, [pc, #240]	; (8002704 <I2C_ITError+0x1b8>)
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261c:	0018      	movs	r0, r3
 800261e:	f7fe ff47 	bl	80014b0 <HAL_DMA_GetState>
 8002622:	0003      	movs	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d016      	beq.n	8002656 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	4a36      	ldr	r2, [pc, #216]	; (8002708 <I2C_ITError+0x1bc>)
 800262e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	2100      	movs	r1, #0
 8002636:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	0018      	movs	r0, r3
 800263e:	f7fe fecf 	bl	80013e0 <HAL_DMA_Abort_IT>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d051      	beq.n	80026ea <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	0018      	movs	r0, r3
 8002652:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002654:	e049      	b.n	80026ea <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f000 f859 	bl	8002710 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800265e:	e044      	b.n	80026ea <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03b      	beq.n	80026e0 <I2C_ITError+0x194>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b12      	cmp	r3, #18
 800266c:	d002      	beq.n	8002674 <I2C_ITError+0x128>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b22      	cmp	r3, #34	; 0x22
 8002672:	d135      	bne.n	80026e0 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	401a      	ands	r2, r3
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	429a      	cmp	r2, r3
 8002686:	d107      	bne.n	8002698 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	491e      	ldr	r1, [pc, #120]	; (800270c <I2C_ITError+0x1c0>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	0018      	movs	r0, r3
 800269e:	f7fe ff07 	bl	80014b0 <HAL_DMA_GetState>
 80026a2:	0003      	movs	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d016      	beq.n	80026d6 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <I2C_ITError+0x1bc>)
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	0018      	movs	r0, r3
 80026be:	f7fe fe8f 	bl	80013e0 <HAL_DMA_Abort_IT>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d013      	beq.n	80026ee <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	0018      	movs	r0, r3
 80026d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026d4:	e00b      	b.n	80026ee <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f819 	bl	8002710 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026de:	e006      	b.n	80026ee <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 f814 	bl	8002710 <I2C_TreatErrorCallback>
  }
}
 80026e8:	e002      	b.n	80026f0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	e000      	b.n	80026f0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026ee:	46c0      	nop			; (mov r8, r8)
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b004      	add	sp, #16
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	ffff0000 	.word	0xffff0000
 80026fc:	08001e15 	.word	0x08001e15
 8002700:	00008003 	.word	0x00008003
 8002704:	ffffbfff 	.word	0xffffbfff
 8002708:	080027a7 	.word	0x080027a7
 800270c:	ffff7fff 	.word	0xffff7fff

08002710 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2241      	movs	r2, #65	; 0x41
 800271c:	5c9b      	ldrb	r3, [r3, r2]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d10f      	bne.n	8002744 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2241      	movs	r2, #65	; 0x41
 8002728:	2120      	movs	r1, #32
 800272a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff fb61 	bl	8001e04 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002742:	e00a      	b.n	800275a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2240      	movs	r2, #64	; 0x40
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff fb4d 	bl	8001df4 <HAL_I2C_ErrorCallback>
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}

08002762 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2202      	movs	r2, #2
 8002772:	4013      	ands	r3, r2
 8002774:	2b02      	cmp	r3, #2
 8002776:	d103      	bne.n	8002780 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	2b01      	cmp	r3, #1
 800278c:	d007      	beq.n	800279e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2101      	movs	r1, #1
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
  }
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	2200      	movs	r2, #0
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2200      	movs	r2, #0
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff ff9a 	bl	8002710 <I2C_TreatErrorCallback>
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	000a      	movs	r2, r1
 80027ee:	1cbb      	adds	r3, r7, #2
 80027f0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027f6:	1cbb      	adds	r3, r7, #2
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d010      	beq.n	8002822 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2242      	movs	r2, #66	; 0x42
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2241      	movs	r2, #65	; 0x41
 800280c:	5c9b      	ldrb	r3, [r3, r2]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	001a      	movs	r2, r3
 8002812:	2328      	movs	r3, #40	; 0x28
 8002814:	4013      	ands	r3, r2
 8002816:	2b28      	cmp	r3, #40	; 0x28
 8002818:	d003      	beq.n	8002822 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	22b0      	movs	r2, #176	; 0xb0
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002822:	1cbb      	adds	r3, r7, #2
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d010      	beq.n	800284e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2244      	movs	r2, #68	; 0x44
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2241      	movs	r2, #65	; 0x41
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	001a      	movs	r2, r3
 800283e:	2328      	movs	r3, #40	; 0x28
 8002840:	4013      	ands	r3, r2
 8002842:	2b28      	cmp	r3, #40	; 0x28
 8002844:	d003      	beq.n	800284e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22b0      	movs	r2, #176	; 0xb0
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800284e:	1cbb      	adds	r3, r7, #2
 8002850:	2200      	movs	r2, #0
 8002852:	5e9b      	ldrsh	r3, [r3, r2]
 8002854:	2b00      	cmp	r3, #0
 8002856:	da03      	bge.n	8002860 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	22b8      	movs	r2, #184	; 0xb8
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002860:	1cbb      	adds	r3, r7, #2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	2b10      	cmp	r3, #16
 8002866:	d103      	bne.n	8002870 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2290      	movs	r2, #144	; 0x90
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002870:	1cbb      	adds	r3, r7, #2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	2b20      	cmp	r3, #32
 8002876:	d103      	bne.n	8002880 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002880:	1cbb      	adds	r3, r7, #2
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d103      	bne.n	8002890 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43d9      	mvns	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b004      	add	sp, #16
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2241      	movs	r2, #65	; 0x41
 80028ba:	5c9b      	ldrb	r3, [r3, r2]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d138      	bne.n	8002934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	5c9b      	ldrb	r3, [r3, r2]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e032      	b.n	8002936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	2101      	movs	r1, #1
 80028d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2241      	movs	r2, #65	; 0x41
 80028dc:	2124      	movs	r1, #36	; 0x24
 80028de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2101      	movs	r1, #1
 80028ec:	438a      	bics	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4911      	ldr	r1, [pc, #68]	; (8002940 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2241      	movs	r2, #65	; 0x41
 8002924:	2120      	movs	r1, #32
 8002926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	2100      	movs	r1, #0
 800292e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	ffffefff 	.word	0xffffefff

08002944 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2241      	movs	r2, #65	; 0x41
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	d139      	bne.n	80029ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002964:	2302      	movs	r3, #2
 8002966:	e033      	b.n	80029d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	2101      	movs	r1, #1
 800296e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2241      	movs	r2, #65	; 0x41
 8002974:	2124      	movs	r1, #36	; 0x24
 8002976:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2101      	movs	r1, #1
 8002984:	438a      	bics	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2241      	movs	r2, #65	; 0x41
 80029be:	2120      	movs	r1, #32
 80029c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
  }
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	fffff0ff 	.word	0xfffff0ff

080029dc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e036      	b.n	8002a5c <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_IWDG_Init+0x88>)
 80029f4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_IWDG_Init+0x8c>)
 80029fc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6852      	ldr	r2, [r2, #4]
 8002a06:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002a12:	f7fe fbb7 	bl	8001184 <HAL_GetTick>
 8002a16:	0003      	movs	r3, r0
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002a1a:	e008      	b.n	8002a2e <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002a1c:	f7fe fbb2 	bl	8001184 <HAL_GetTick>
 8002a20:	0002      	movs	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b30      	cmp	r3, #48	; 0x30
 8002a28:	d901      	bls.n	8002a2e <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e016      	b.n	8002a5c <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f1      	bne.n	8002a1c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d005      	beq.n	8002a52 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
 8002a50:	e003      	b.n	8002a5a <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <HAL_IWDG_Init+0x90>)
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b004      	add	sp, #16
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0000cccc 	.word	0x0000cccc
 8002a68:	00005555 	.word	0x00005555
 8002a6c:	0000aaaa 	.word	0x0000aaaa

08002a70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a72:	b08f      	sub	sp, #60	; 0x3c
 8002a74:	af0a      	add	r7, sp, #40	; 0x28
 8002a76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e105      	b.n	8002c8e <HAL_PCD_Init+0x21e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a84      	ldr	r2, [pc, #528]	; (8002c98 <HAL_PCD_Init+0x228>)
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d108      	bne.n	8002aa0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	23ae      	movs	r3, #174	; 0xae
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	2100      	movs	r1, #0
 8002a96:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f00a fade 	bl	800d05c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <HAL_PCD_Init+0x228>)
 8002aa4:	2103      	movs	r1, #3
 8002aa6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f004 f83d 	bl	8006b2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab2:	230f      	movs	r3, #15
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e05b      	b.n	8002b74 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002abc:	240f      	movs	r4, #15
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	2039      	movs	r0, #57	; 0x39
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	18cb      	adds	r3, r1, r3
 8002ad0:	181b      	adds	r3, r3, r0
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	2038      	movs	r0, #56	; 0x38
 8002ade:	0013      	movs	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	18cb      	adds	r3, r1, r3
 8002ae8:	181b      	adds	r3, r3, r0
 8002aea:	193a      	adds	r2, r7, r4
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002af0:	0025      	movs	r5, r4
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	197b      	adds	r3, r7, r5
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b29c      	uxth	r4, r3
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	2044      	movs	r0, #68	; 0x44
 8002b00:	0013      	movs	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	189b      	adds	r3, r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	18cb      	adds	r3, r1, r3
 8002b0a:	181b      	adds	r3, r3, r0
 8002b0c:	1c22      	adds	r2, r4, #0
 8002b0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b10:	197b      	adds	r3, r7, r5
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	203b      	movs	r0, #59	; 0x3b
 8002b18:	0013      	movs	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	18cb      	adds	r3, r1, r3
 8002b22:	181b      	adds	r3, r3, r0
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b28:	197b      	adds	r3, r7, r5
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	0013      	movs	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	18cb      	adds	r3, r1, r3
 8002b38:	3348      	adds	r3, #72	; 0x48
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b3e:	197b      	adds	r3, r7, r5
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	0013      	movs	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	189b      	adds	r3, r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	18cb      	adds	r3, r1, r3
 8002b4e:	334c      	adds	r3, #76	; 0x4c
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b54:	197b      	adds	r3, r7, r5
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	18cb      	adds	r3, r1, r3
 8002b64:	3350      	adds	r3, #80	; 0x50
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6a:	197b      	adds	r3, r7, r5
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	197b      	adds	r3, r7, r5
 8002b70:	3201      	adds	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	210f      	movs	r1, #15
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d39c      	bcc.n	8002abc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e056      	b.n	8002c38 <HAL_PCD_Init+0x1c8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b8a:	240f      	movs	r4, #15
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	781a      	ldrb	r2, [r3, #0]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	237a      	movs	r3, #122	; 0x7a
 8002b94:	33ff      	adds	r3, #255	; 0xff
 8002b96:	0019      	movs	r1, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	18c3      	adds	r3, r0, r3
 8002ba2:	185b      	adds	r3, r3, r1
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	23bc      	movs	r3, #188	; 0xbc
 8002bb0:	0059      	lsls	r1, r3, #1
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	18c3      	adds	r3, r0, r3
 8002bbc:	185b      	adds	r3, r3, r1
 8002bbe:	193a      	adds	r2, r7, r4
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	237c      	movs	r3, #124	; 0x7c
 8002bcc:	33ff      	adds	r3, #255	; 0xff
 8002bce:	0019      	movs	r1, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	189b      	adds	r3, r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	18c3      	adds	r3, r0, r3
 8002bda:	185b      	adds	r3, r3, r1
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	23c4      	movs	r3, #196	; 0xc4
 8002be8:	0059      	lsls	r1, r3, #1
 8002bea:	0013      	movs	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	18c3      	adds	r3, r0, r3
 8002bf4:	185b      	adds	r3, r3, r1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	23c6      	movs	r3, #198	; 0xc6
 8002c02:	0059      	lsls	r1, r3, #1
 8002c04:	0013      	movs	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	18c3      	adds	r3, r0, r3
 8002c0e:	185b      	adds	r3, r3, r1
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	23c8      	movs	r3, #200	; 0xc8
 8002c1c:	0059      	lsls	r1, r3, #1
 8002c1e:	0013      	movs	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	18c3      	adds	r3, r0, r3
 8002c28:	185b      	adds	r3, r3, r1
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	3201      	adds	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3a1      	bcc.n	8002b8a <HAL_PCD_Init+0x11a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681c      	ldr	r4, [r3, #0]
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	466b      	mov	r3, sp
 8002c4e:	001a      	movs	r2, r3
 8002c50:	0003      	movs	r3, r0
 8002c52:	3310      	adds	r3, #16
 8002c54:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002c56:	c262      	stmia	r2!, {r1, r5, r6}
 8002c58:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002c5a:	c262      	stmia	r2!, {r1, r5, r6}
 8002c5c:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002c5e:	c262      	stmia	r2!, {r1, r5, r6}
 8002c60:	6841      	ldr	r1, [r0, #4]
 8002c62:	6882      	ldr	r2, [r0, #8]
 8002c64:	68c3      	ldr	r3, [r0, #12]
 8002c66:	0020      	movs	r0, r4
 8002c68:	f003 ff92 	bl	8006b90 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2234      	movs	r2, #52	; 0x34
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_PCD_Init+0x228>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d103      	bne.n	8002c8c <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f001 fa98 	bl	80041bc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b005      	add	sp, #20
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	000002b9 	.word	0x000002b9

08002c9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	23ae      	movs	r3, #174	; 0xae
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_Start+0x18>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e014      	b.n	8002cde <HAL_PCD_Start+0x42>
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	23ae      	movs	r3, #174	; 0xae
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	2101      	movs	r1, #1
 8002cbc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f003 ff1e 	bl	8006b04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f005 fde2 	bl	8008896 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	23ae      	movs	r3, #174	; 0xae
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	2100      	movs	r1, #0
 8002cda:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f005 fdde 	bl	80088b6 <USB_ReadInterrupts>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	401a      	ands	r2, r3
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d103      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fb83 	bl	8003418 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f005 fdcd 	bl	80088b6 <USB_ReadInterrupts>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	401a      	ands	r2, r3
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d110      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4986      	ldr	r1, [pc, #536]	; (8002f50 <HAL_PCD_IRQHandler+0x268>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f00a fa17 	bl	800d172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2100      	movs	r1, #0
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f911 	bl	8002f70 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f005 fdaf 	bl	80088b6 <USB_ReadInterrupts>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	01db      	lsls	r3, r3, #7
 8002d5e:	401a      	ands	r2, r3
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	01db      	lsls	r3, r3, #7
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4978      	ldr	r1, [pc, #480]	; (8002f54 <HAL_PCD_IRQHandler+0x26c>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f005 fd9a 	bl	80088b6 <USB_ReadInterrupts>
 8002d82:	0002      	movs	r2, r0
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	019b      	lsls	r3, r3, #6
 8002d88:	401a      	ands	r2, r3
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d107      	bne.n	8002da2 <HAL_PCD_IRQHandler+0xba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	496e      	ldr	r1, [pc, #440]	; (8002f58 <HAL_PCD_IRQHandler+0x270>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f005 fd85 	bl	80088b6 <USB_ReadInterrupts>
 8002dac:	0002      	movs	r2, r0
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	015b      	lsls	r3, r3, #5
 8002db2:	401a      	ands	r2, r3
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	015b      	lsls	r3, r3, #5
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d12b      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x12c>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	438a      	bics	r2, r1
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2108      	movs	r1, #8
 8002dd8:	438a      	bics	r2, r1
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	23bc      	movs	r3, #188	; 0xbc
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d109      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x114>
    {
      hpcd->LPM_State = LPM_L0;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	23bc      	movs	r3, #188	; 0xbc
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	2100      	movs	r1, #0
 8002df0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2100      	movs	r1, #0
 8002df6:	0018      	movs	r0, r3
 8002df8:	f00a fc40 	bl	800d67c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f00a f9fc 	bl	800d1fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4953      	ldr	r1, [pc, #332]	; (8002f5c <HAL_PCD_IRQHandler+0x274>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f005 fd4c 	bl	80088b6 <USB_ReadInterrupts>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	401a      	ands	r2, r3
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d11b      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x17e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2108      	movs	r1, #8
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4945      	ldr	r1, [pc, #276]	; (8002f60 <HAL_PCD_IRQHandler+0x278>)
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2104      	movs	r1, #4
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f00a f9af 	bl	800d1c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f005 fd23 	bl	80088b6 <USB_ReadInterrupts>
 8002e70:	0003      	movs	r3, r0
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d137      	bne.n	8002eea <HAL_PCD_IRQHandler+0x202>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4937      	ldr	r1, [pc, #220]	; (8002f64 <HAL_PCD_IRQHandler+0x27c>)
 8002e86:	400a      	ands	r2, r1
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	23bc      	movs	r3, #188	; 0xbc
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d125      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x1fa>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	23bc      	movs	r3, #188	; 0xbc
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	223c      	movs	r2, #60	; 0x3c
 8002eca:	4013      	ands	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	23bd      	movs	r3, #189	; 0xbd
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	0018      	movs	r0, r3
 8002edc:	f00a fbce 	bl	800d67c <HAL_PCDEx_LPM_Callback>
 8002ee0:	e003      	b.n	8002eea <HAL_PCD_IRQHandler+0x202>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f00a f96d 	bl	800d1c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f005 fce1 	bl	80088b6 <USB_ReadInterrupts>
 8002ef4:	0002      	movs	r2, r0
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	401a      	ands	r2, r3
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d10b      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x234>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4916      	ldr	r1, [pc, #88]	; (8002f68 <HAL_PCD_IRQHandler+0x280>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f00a f91c 	bl	800d154 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f005 fcc8 	bl	80088b6 <USB_ReadInterrupts>
 8002f26:	0002      	movs	r2, r0
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d107      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	490a      	ldr	r1, [pc, #40]	; (8002f6c <HAL_PCD_IRQHandler+0x284>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	0000fbff 	.word	0x0000fbff
 8002f54:	0000bfff 	.word	0x0000bfff
 8002f58:	0000dfff 	.word	0x0000dfff
 8002f5c:	0000efff 	.word	0x0000efff
 8002f60:	0000f7ff 	.word	0x0000f7ff
 8002f64:	0000ff7f 	.word	0x0000ff7f
 8002f68:	0000fdff 	.word	0x0000fdff
 8002f6c:	0000feff 	.word	0x0000feff

08002f70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	000a      	movs	r2, r1
 8002f7a:	1cfb      	adds	r3, r7, #3
 8002f7c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	23ae      	movs	r3, #174	; 0xae
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_PCD_SetAddress+0x1e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e017      	b.n	8002fbe <HAL_PCD_SetAddress+0x4e>
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	23ae      	movs	r3, #174	; 0xae
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	2101      	movs	r1, #1
 8002f96:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1cfa      	adds	r2, r7, #3
 8002f9c:	2134      	movs	r1, #52	; 0x34
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	1cfb      	adds	r3, r7, #3
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	0019      	movs	r1, r3
 8002fac:	0010      	movs	r0, r2
 8002fae:	f005 fc5f 	bl	8008870 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	23ae      	movs	r3, #174	; 0xae
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	2100      	movs	r1, #0
 8002fba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fc6:	b590      	push	{r4, r7, lr}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	000c      	movs	r4, r1
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	1cfb      	adds	r3, r7, #3
 8002fd6:	1c22      	adds	r2, r4, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	003b      	movs	r3, r7
 8002fdc:	1c02      	adds	r2, r0, #0
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	1cbb      	adds	r3, r7, #2
 8002fe2:	1c0a      	adds	r2, r1, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fe6:	230b      	movs	r3, #11
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fee:	1cfb      	adds	r3, r7, #3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0f      	bge.n	8003018 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	1cfb      	adds	r3, r7, #3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	401a      	ands	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	189b      	adds	r3, r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	3338      	adds	r3, #56	; 0x38
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	18d3      	adds	r3, r2, r3
 800300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	705a      	strb	r2, [r3, #1]
 8003016:	e00f      	b.n	8003038 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003018:	1cfb      	adds	r3, r7, #3
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2207      	movs	r2, #7
 800301e:	401a      	ands	r2, r3
 8003020:	0013      	movs	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	189b      	adds	r3, r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	3379      	adds	r3, #121	; 0x79
 800302a:	33ff      	adds	r3, #255	; 0xff
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	18d3      	adds	r3, r2, r3
 8003030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003038:	1cfb      	adds	r3, r7, #3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2207      	movs	r2, #7
 800303e:	4013      	ands	r3, r2
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003046:	003b      	movs	r3, r7
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1cba      	adds	r2, r7, #2
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	785b      	ldrb	r3, [r3, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003068:	1cbb      	adds	r3, r7, #2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d102      	bne.n	8003076 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	23ae      	movs	r3, #174	; 0xae
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_PCD_EP_Open+0xc0>
 8003082:	2302      	movs	r3, #2
 8003084:	e013      	b.n	80030ae <HAL_PCD_EP_Open+0xe8>
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	23ae      	movs	r3, #174	; 0xae
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	2101      	movs	r1, #1
 800308e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	0011      	movs	r1, r2
 8003098:	0018      	movs	r0, r3
 800309a:	f003 fda7 	bl	8006bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	23ae      	movs	r3, #174	; 0xae
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	2100      	movs	r1, #0
 80030a6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80030a8:	230b      	movs	r3, #11
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	781b      	ldrb	r3, [r3, #0]
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b005      	add	sp, #20
 80030b4:	bd90      	pop	{r4, r7, pc}

080030b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	000a      	movs	r2, r1
 80030c0:	1cfb      	adds	r3, r7, #3
 80030c2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c4:	1cfb      	adds	r3, r7, #3
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da0f      	bge.n	80030ee <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	1cfb      	adds	r3, r7, #3
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2207      	movs	r2, #7
 80030d4:	401a      	ands	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	3338      	adds	r3, #56	; 0x38
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	18d3      	adds	r3, r2, r3
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	705a      	strb	r2, [r3, #1]
 80030ec:	e00f      	b.n	800310e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	1cfb      	adds	r3, r7, #3
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2207      	movs	r2, #7
 80030f4:	401a      	ands	r2, r3
 80030f6:	0013      	movs	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	3379      	adds	r3, #121	; 0x79
 8003100:	33ff      	adds	r3, #255	; 0xff
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	18d3      	adds	r3, r2, r3
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800310e:	1cfb      	adds	r3, r7, #3
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2207      	movs	r2, #7
 8003114:	4013      	ands	r3, r2
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	23ae      	movs	r3, #174	; 0xae
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_PCD_EP_Close+0x76>
 8003128:	2302      	movs	r3, #2
 800312a:	e011      	b.n	8003150 <HAL_PCD_EP_Close+0x9a>
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	23ae      	movs	r3, #174	; 0xae
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	2101      	movs	r1, #1
 8003134:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	0011      	movs	r1, r2
 800313e:	0018      	movs	r0, r3
 8003140:	f004 f864 	bl	800720c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	23ae      	movs	r3, #174	; 0xae
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	2100      	movs	r1, #0
 800314c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	200b      	movs	r0, #11
 8003166:	183b      	adds	r3, r7, r0
 8003168:	1c0a      	adds	r2, r1, #0
 800316a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316c:	0001      	movs	r1, r0
 800316e:	187b      	adds	r3, r7, r1
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2207      	movs	r2, #7
 8003174:	401a      	ands	r2, r3
 8003176:	0013      	movs	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	189b      	adds	r3, r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	3379      	adds	r3, #121	; 0x79
 8003180:	33ff      	adds	r3, #255	; 0xff
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	18d3      	adds	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2207      	movs	r2, #7
 80031a6:	4013      	ands	r3, r2
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2207      	movs	r2, #7
 80031b4:	4013      	ands	r3, r2
 80031b6:	d107      	bne.n	80031c8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	0011      	movs	r1, r2
 80031c0:	0018      	movs	r0, r3
 80031c2:	f004 f989 	bl	80074d8 <USB_EPStartXfer>
 80031c6:	e006      	b.n	80031d6 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	0011      	movs	r1, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f004 f981 	bl	80074d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b006      	add	sp, #24
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	000a      	movs	r2, r1
 80031ea:	1cfb      	adds	r3, r7, #3
 80031ec:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031ee:	1cfb      	adds	r3, r7, #3
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2207      	movs	r2, #7
 80031f4:	401a      	ands	r2, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	23ca      	movs	r3, #202	; 0xca
 80031fa:	0059      	lsls	r1, r3, #1
 80031fc:	0013      	movs	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	189b      	adds	r3, r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	18c3      	adds	r3, r0, r3
 8003206:	185b      	adds	r3, r3, r1
 8003208:	681b      	ldr	r3, [r3, #0]
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	200b      	movs	r0, #11
 8003220:	183b      	adds	r3, r7, r0
 8003222:	1c0a      	adds	r2, r1, #0
 8003224:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003226:	183b      	adds	r3, r7, r0
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2207      	movs	r2, #7
 800322c:	401a      	ands	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	189b      	adds	r3, r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	3338      	adds	r3, #56	; 0x38
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	18d3      	adds	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2224      	movs	r2, #36	; 0x24
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2201      	movs	r2, #1
 8003262:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003264:	183b      	adds	r3, r7, r0
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2207      	movs	r2, #7
 800326a:	4013      	ands	r3, r2
 800326c:	b2da      	uxtb	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003272:	183b      	adds	r3, r7, r0
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	d107      	bne.n	800328c <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	0011      	movs	r1, r2
 8003284:	0018      	movs	r0, r3
 8003286:	f004 f927 	bl	80074d8 <USB_EPStartXfer>
 800328a:	e006      	b.n	800329a <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	0011      	movs	r1, r2
 8003294:	0018      	movs	r0, r3
 8003296:	f004 f91f 	bl	80074d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b006      	add	sp, #24
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	000a      	movs	r2, r1
 80032ae:	1cfb      	adds	r3, r7, #3
 80032b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032b2:	1cfb      	adds	r3, r7, #3
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2207      	movs	r2, #7
 80032b8:	401a      	ands	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d901      	bls.n	80032c6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e046      	b.n	8003354 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032c6:	1cfb      	adds	r3, r7, #3
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b25b      	sxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	da0f      	bge.n	80032f0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d0:	1cfb      	adds	r3, r7, #3
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2207      	movs	r2, #7
 80032d6:	401a      	ands	r2, r3
 80032d8:	0013      	movs	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	189b      	adds	r3, r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	3338      	adds	r3, #56	; 0x38
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	18d3      	adds	r3, r2, r3
 80032e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	705a      	strb	r2, [r3, #1]
 80032ee:	e00d      	b.n	800330c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032f0:	1cfb      	adds	r3, r7, #3
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	0013      	movs	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	3379      	adds	r3, #121	; 0x79
 80032fe:	33ff      	adds	r3, #255	; 0xff
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	18d3      	adds	r3, r2, r3
 8003304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003312:	1cfb      	adds	r3, r7, #3
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2207      	movs	r2, #7
 8003318:	4013      	ands	r3, r2
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	23ae      	movs	r3, #174	; 0xae
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_PCD_EP_SetStall+0x8c>
 800332c:	2302      	movs	r3, #2
 800332e:	e011      	b.n	8003354 <HAL_PCD_EP_SetStall+0xb0>
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	23ae      	movs	r3, #174	; 0xae
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	2101      	movs	r1, #1
 8003338:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f005 f9c0 	bl	80086c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	23ae      	movs	r3, #174	; 0xae
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	2100      	movs	r1, #0
 8003350:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b004      	add	sp, #16
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	000a      	movs	r2, r1
 8003366:	1cfb      	adds	r3, r7, #3
 8003368:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800336a:	1cfb      	adds	r3, r7, #3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	220f      	movs	r2, #15
 8003370:	401a      	ands	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d901      	bls.n	800337e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e048      	b.n	8003410 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800337e:	1cfb      	adds	r3, r7, #3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b25b      	sxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	da0f      	bge.n	80033a8 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003388:	1cfb      	adds	r3, r7, #3
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2207      	movs	r2, #7
 800338e:	401a      	ands	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	189b      	adds	r3, r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	3338      	adds	r3, #56	; 0x38
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	18d3      	adds	r3, r2, r3
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
 80033a6:	e00f      	b.n	80033c8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	1cfb      	adds	r3, r7, #3
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2207      	movs	r2, #7
 80033ae:	401a      	ands	r2, r3
 80033b0:	0013      	movs	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	3379      	adds	r3, #121	; 0x79
 80033ba:	33ff      	adds	r3, #255	; 0xff
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	18d3      	adds	r3, r2, r3
 80033c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2207      	movs	r2, #7
 80033d4:	4013      	ands	r3, r2
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	23ae      	movs	r3, #174	; 0xae
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	5cd3      	ldrb	r3, [r2, r3]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_PCD_EP_ClrStall+0x90>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e011      	b.n	8003410 <HAL_PCD_EP_ClrStall+0xb4>
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	23ae      	movs	r3, #174	; 0xae
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	2101      	movs	r1, #1
 80033f4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	0011      	movs	r1, r2
 80033fe:	0018      	movs	r0, r3
 8003400:	f005 f9a4 	bl	800874c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	23ae      	movs	r3, #174	; 0xae
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	2100      	movs	r1, #0
 800340c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b004      	add	sp, #16
 8003416:	bd80      	pop	{r7, pc}

08003418 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b091      	sub	sp, #68	; 0x44
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003420:	e2ab      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003428:	2036      	movs	r0, #54	; 0x36
 800342a:	183b      	adds	r3, r7, r0
 800342c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800342e:	183b      	adds	r3, r7, r0
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	2435      	movs	r4, #53	; 0x35
 8003436:	193b      	adds	r3, r7, r4
 8003438:	210f      	movs	r1, #15
 800343a:	400a      	ands	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800343e:	193b      	adds	r3, r7, r4
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d000      	beq.n	8003448 <PCD_EP_ISR_Handler+0x30>
 8003446:	e11d      	b.n	8003684 <PCD_EP_ISR_Handler+0x26c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003448:	183b      	adds	r3, r7, r0
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	2210      	movs	r2, #16
 800344e:	4013      	ands	r3, r2
 8003450:	d143      	bne.n	80034da <PCD_EP_ISR_Handler+0xc2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4add      	ldr	r2, [pc, #884]	; (80037d0 <PCD_EP_ISR_Handler+0x3b8>)
 800345a:	4013      	ands	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	0209      	lsls	r1, r1, #8
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3338      	adds	r3, #56	; 0x38
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4ad6      	ldr	r2, [pc, #856]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 800347a:	4694      	mov	ip, r2
 800347c:	4463      	add	r3, ip
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	059b      	lsls	r3, r3, #22
 8003484:	0d9a      	lsrs	r2, r3, #22
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	18d2      	adds	r2, r2, r3
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2100      	movs	r1, #0
 800349c:	0018      	movs	r0, r3
 800349e:	f009 fe3b 	bl	800d118 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2234      	movs	r2, #52	; 0x34
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d100      	bne.n	80034b0 <PCD_EP_ISR_Handler+0x98>
 80034ae:	e264      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d000      	beq.n	80034ba <PCD_EP_ISR_Handler+0xa2>
 80034b8:	e25f      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2234      	movs	r2, #52	; 0x34
 80034be:	5c9b      	ldrb	r3, [r3, r2]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	4252      	negs	r2, r2
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2234      	movs	r2, #52	; 0x34
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]
 80034d8:	e24f      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3379      	adds	r3, #121	; 0x79
 80034de:	33ff      	adds	r3, #255	; 0xff
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2132      	movs	r1, #50	; 0x32
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	d029      	beq.n	800354e <PCD_EP_ISR_Handler+0x136>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4ab4      	ldr	r2, [pc, #720]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 8003502:	4694      	mov	ip, r2
 8003504:	4463      	add	r3, ip
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	059b      	lsls	r3, r3, #22
 800350c:	0d9a      	lsrs	r2, r3, #22
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	22b0      	movs	r2, #176	; 0xb0
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	1899      	adds	r1, r3, r2
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003526:	b29b      	uxth	r3, r3
 8003528:	f005 fa4a 	bl	80089c0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4aa9      	ldr	r2, [pc, #676]	; (80037d8 <PCD_EP_ISR_Handler+0x3c0>)
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	0018      	movs	r0, r3
 8003548:	f009 fdb0 	bl	800d0ac <HAL_PCD_SetupStageCallback>
 800354c:	e215      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800354e:	2332      	movs	r3, #50	; 0x32
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2200      	movs	r2, #0
 8003554:	5e9b      	ldrsh	r3, [r3, r2]
 8003556:	2b00      	cmp	r3, #0
 8003558:	db00      	blt.n	800355c <PCD_EP_ISR_Handler+0x144>
 800355a:	e20e      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a9d      	ldr	r2, [pc, #628]	; (80037d8 <PCD_EP_ISR_Handler+0x3c0>)
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4a96      	ldr	r2, [pc, #600]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 800357c:	4694      	mov	ip, r2
 800357e:	4463      	add	r3, ip
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	059b      	lsls	r3, r3, #22
 8003586:	0d9a      	lsrs	r2, r3, #22
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <PCD_EP_ISR_Handler+0x1b2>
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <PCD_EP_ISR_Handler+0x1b2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	6959      	ldr	r1, [r3, #20]
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f005 fa07 	bl	80089c0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	18d2      	adds	r2, r2, r3
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2100      	movs	r1, #0
 80035c4:	0018      	movs	r0, r3
 80035c6:	f009 fd86 	bl	800d0d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035ca:	4b82      	ldr	r3, [pc, #520]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 80035d0:	0412      	lsls	r2, r2, #16
 80035d2:	0c12      	lsrs	r2, r2, #16
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <PCD_EP_ISR_Handler+0x1e2>
 80035de:	4b7d      	ldr	r3, [pc, #500]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4b7c      	ldr	r3, [pc, #496]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 80035e4:	497d      	ldr	r1, [pc, #500]	; (80037dc <PCD_EP_ISR_Handler+0x3c4>)
 80035e6:	400a      	ands	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0609      	lsls	r1, r1, #24
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e02d      	b.n	8003656 <PCD_EP_ISR_Handler+0x23e>
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003600:	d813      	bhi.n	800362a <PCD_EP_ISR_Handler+0x212>
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d002      	beq.n	800361a <PCD_EP_ISR_Handler+0x202>
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	3301      	adds	r3, #1
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
 800361a:	4b6e      	ldr	r3, [pc, #440]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	069a      	lsls	r2, r3, #26
 8003622:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	e015      	b.n	8003656 <PCD_EP_ISR_Handler+0x23e>
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	221f      	movs	r2, #31
 8003638:	4013      	ands	r3, r2
 800363a:	d102      	bne.n	8003642 <PCD_EP_ISR_Handler+0x22a>
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	3b01      	subs	r3, #1
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
 8003642:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	431a      	orrs	r2, r3
 800364c:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	0609      	lsls	r1, r1, #24
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a60      	ldr	r2, [pc, #384]	; (80037e0 <PCD_EP_ISR_Handler+0x3c8>)
 800365e:	4013      	ands	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	0152      	lsls	r2, r2, #5
 8003668:	4053      	eors	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	0192      	lsls	r2, r2, #6
 8003672:	4053      	eors	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4959      	ldr	r1, [pc, #356]	; (80037e4 <PCD_EP_ISR_Handler+0x3cc>)
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e17a      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	001a      	movs	r2, r3
 800368a:	2135      	movs	r1, #53	; 0x35
 800368c:	187b      	adds	r3, r7, r1
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	18d3      	adds	r3, r2, r3
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	2032      	movs	r0, #50	; 0x32
 8003698:	183b      	adds	r3, r7, r0
 800369a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800369c:	183b      	adds	r3, r7, r0
 800369e:	2200      	movs	r2, #0
 80036a0:	5e9b      	ldrsh	r3, [r3, r2]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db00      	blt.n	80036a8 <PCD_EP_ISR_Handler+0x290>
 80036a6:	e0e7      	b.n	8003878 <PCD_EP_ISR_Handler+0x460>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	001a      	movs	r2, r3
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	18d3      	adds	r3, r2, r3
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <PCD_EP_ISR_Handler+0x3c0>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	001a      	movs	r2, r3
 80036c4:	0008      	movs	r0, r1
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	18d3      	adds	r3, r2, r3
 80036ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036d6:	183b      	adds	r3, r7, r0
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	0013      	movs	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	3379      	adds	r3, #121	; 0x79
 80036e4:	33ff      	adds	r3, #255	; 0xff
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	7a9b      	ldrb	r3, [r3, #10]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <PCD_EP_ISR_Handler+0x318>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4a36      	ldr	r2, [pc, #216]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 80036fc:	4694      	mov	ip, r2
 80036fe:	4463      	add	r3, ip
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	b29a      	uxth	r2, r3
 8003706:	243e      	movs	r4, #62	; 0x3e
 8003708:	193b      	adds	r3, r7, r4
 800370a:	0592      	lsls	r2, r2, #22
 800370c:	0d92      	lsrs	r2, r2, #22
 800370e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003710:	193b      	adds	r3, r7, r4
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d100      	bne.n	800371a <PCD_EP_ISR_Handler+0x302>
 8003718:	e086      	b.n	8003828 <PCD_EP_ISR_Handler+0x410>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	6959      	ldr	r1, [r3, #20]
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	889a      	ldrh	r2, [r3, #4]
 8003726:	193b      	adds	r3, r7, r4
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f005 f949 	bl	80089c0 <USB_ReadPMA>
 800372e:	e07b      	b.n	8003828 <PCD_EP_ISR_Handler+0x410>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	78db      	ldrb	r3, [r3, #3]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d10c      	bne.n	8003752 <PCD_EP_ISR_Handler+0x33a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003738:	233e      	movs	r3, #62	; 0x3e
 800373a:	18fc      	adds	r4, r7, r3
 800373c:	2332      	movs	r3, #50	; 0x32
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f928 	bl	800399c <HAL_PCD_EP_DB_Receive>
 800374c:	0003      	movs	r3, r0
 800374e:	8023      	strh	r3, [r4, #0]
 8003750:	e06a      	b.n	8003828 <PCD_EP_ISR_Handler+0x410>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	001a      	movs	r2, r3
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	18d3      	adds	r3, r2, r3
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <PCD_EP_ISR_Handler+0x3d0>)
 8003764:	4013      	ands	r3, r2
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	001a      	movs	r2, r3
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	18d3      	adds	r3, r2, r3
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	491c      	ldr	r1, [pc, #112]	; (80037ec <PCD_EP_ISR_Handler+0x3d4>)
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	001a      	movs	r2, r3
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	18d3      	adds	r3, r2, r3
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	01db      	lsls	r3, r3, #7
 8003792:	4013      	ands	r3, r2
 8003794:	d02c      	beq.n	80037f0 <PCD_EP_ISR_Handler+0x3d8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <PCD_EP_ISR_Handler+0x3bc>)
 800379e:	4694      	mov	ip, r2
 80037a0:	4463      	add	r3, ip
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	243e      	movs	r4, #62	; 0x3e
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	0592      	lsls	r2, r2, #22
 80037ae:	0d92      	lsrs	r2, r2, #22
 80037b0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d036      	beq.n	8003828 <PCD_EP_ISR_Handler+0x410>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	6959      	ldr	r1, [r3, #20]
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	88da      	ldrh	r2, [r3, #6]
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	f005 f8f9 	bl	80089c0 <USB_ReadPMA>
 80037ce:	e02b      	b.n	8003828 <PCD_EP_ISR_Handler+0x410>
 80037d0:	077f8f0f 	.word	0x077f8f0f
 80037d4:	40009800 	.word	0x40009800
 80037d8:	077f0f8f 	.word	0x077f0f8f
 80037dc:	83ffffff 	.word	0x83ffffff
 80037e0:	077fbf8f 	.word	0x077fbf8f
 80037e4:	00008080 	.word	0x00008080
 80037e8:	077f8f8f 	.word	0x077f8f8f
 80037ec:	000080c0 	.word	0x000080c0
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4a67      	ldr	r2, [pc, #412]	; (8003994 <PCD_EP_ISR_Handler+0x57c>)
 80037f8:	4694      	mov	ip, r2
 80037fa:	4463      	add	r3, ip
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	b29a      	uxth	r2, r3
 8003802:	243e      	movs	r4, #62	; 0x3e
 8003804:	193b      	adds	r3, r7, r4
 8003806:	0592      	lsls	r2, r2, #22
 8003808:	0d92      	lsrs	r2, r2, #22
 800380a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800380c:	193b      	adds	r3, r7, r4
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <PCD_EP_ISR_Handler+0x410>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	6959      	ldr	r1, [r3, #20]
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	891a      	ldrh	r2, [r3, #8]
 8003820:	193b      	adds	r3, r7, r4
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	f005 f8cc 	bl	80089c0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	69da      	ldr	r2, [r3, #28]
 800382c:	213e      	movs	r1, #62	; 0x3e
 800382e:	187b      	adds	r3, r7, r1
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	18d2      	adds	r2, r2, r3
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	187b      	adds	r3, r7, r1
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	18d2      	adds	r2, r2, r3
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <PCD_EP_ISR_Handler+0x442>
 800384e:	187b      	adds	r3, r7, r1
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	429a      	cmp	r2, r3
 8003858:	d207      	bcs.n	800386a <PCD_EP_ISR_Handler+0x452>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0011      	movs	r1, r2
 8003862:	0018      	movs	r0, r3
 8003864:	f009 fc37 	bl	800d0d6 <HAL_PCD_DataOutStageCallback>
 8003868:	e006      	b.n	8003878 <PCD_EP_ISR_Handler+0x460>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f003 fe30 	bl	80074d8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003878:	2032      	movs	r0, #50	; 0x32
 800387a:	183b      	adds	r3, r7, r0
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	4013      	ands	r3, r2
 8003882:	d100      	bne.n	8003886 <PCD_EP_ISR_Handler+0x46e>
 8003884:	e079      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
      {
        ep = &hpcd->IN_ep[epindex];
 8003886:	2135      	movs	r1, #53	; 0x35
 8003888:	187b      	adds	r3, r7, r1
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	0013      	movs	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	189b      	adds	r3, r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	3338      	adds	r3, #56	; 0x38
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	18d3      	adds	r3, r2, r3
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	001a      	movs	r2, r3
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	18d3      	adds	r3, r2, r3
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <PCD_EP_ISR_Handler+0x580>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	001a      	movs	r2, r3
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	18d3      	adds	r3, r2, r3
 80038c0:	6a3a      	ldr	r2, [r7, #32]
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	0209      	lsls	r1, r1, #8
 80038c6:	430a      	orrs	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	78db      	ldrb	r3, [r3, #3]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d109      	bne.n	80038e6 <PCD_EP_ISR_Handler+0x4ce>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d147      	bne.n	800396a <PCD_EP_ISR_Handler+0x552>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038da:	183b      	adds	r3, r7, r0
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d141      	bne.n	800396a <PCD_EP_ISR_Handler+0x552>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <PCD_EP_ISR_Handler+0x57c>)
 80038ee:	4694      	mov	ip, r2
 80038f0:	4463      	add	r3, ip
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	211e      	movs	r1, #30
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	0592      	lsls	r2, r2, #22
 80038fe:	0d92      	lsrs	r2, r2, #22
 8003900:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	187b      	adds	r3, r7, r1
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d907      	bls.n	800391e <PCD_EP_ISR_Handler+0x506>
          {
            ep->xfer_len -= TxByteNbre;
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	187b      	adds	r3, r7, r1
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	619a      	str	r2, [r3, #24]
 800391c:	e002      	b.n	8003924 <PCD_EP_ISR_Handler+0x50c>
          }
          else
          {
            ep->xfer_len = 0U;
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <PCD_EP_ISR_Handler+0x524>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f009 fbef 	bl	800d118 <HAL_PCD_DataInStageCallback>
 800393a:	e01e      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	211e      	movs	r1, #30
 8003942:	187b      	adds	r3, r7, r1
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	18d2      	adds	r2, r2, r3
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	187b      	adds	r3, r7, r1
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	18d2      	adds	r2, r2, r3
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003960:	0011      	movs	r1, r2
 8003962:	0018      	movs	r0, r3
 8003964:	f003 fdb8 	bl	80074d8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003968:	e007      	b.n	800397a <PCD_EP_ISR_Handler+0x562>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800396a:	2332      	movs	r3, #50	; 0x32
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	881a      	ldrh	r2, [r3, #0]
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0018      	movs	r0, r3
 8003976:	f000 f901 	bl	8003b7c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	4013      	ands	r3, r2
 8003986:	d000      	beq.n	800398a <PCD_EP_ISR_Handler+0x572>
 8003988:	e54b      	b.n	8003422 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b011      	add	sp, #68	; 0x44
 8003992:	bd90      	pop	{r4, r7, pc}
 8003994:	40009800 	.word	0x40009800
 8003998:	077f8f0f 	.word	0x077f8f0f

0800399c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b08b      	sub	sp, #44	; 0x2c
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	1dbb      	adds	r3, r7, #6
 80039a8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039aa:	1dbb      	adds	r3, r7, #6
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	01db      	lsls	r3, r3, #7
 80039b2:	4013      	ands	r3, r2
 80039b4:	d069      	beq.n	8003a8a <HAL_PCD_EP_DB_Receive+0xee>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4a6a      	ldr	r2, [pc, #424]	; (8003b68 <HAL_PCD_EP_DB_Receive+0x1cc>)
 80039be:	4694      	mov	ip, r2
 80039c0:	4463      	add	r3, ip
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	211e      	movs	r1, #30
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	0592      	lsls	r2, r2, #22
 80039ce:	0d92      	lsrs	r2, r2, #22
 80039d0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d307      	bcc.n	80039ee <HAL_PCD_EP_DB_Receive+0x52>
    {
      ep->xfer_len -= count;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	619a      	str	r2, [r3, #24]
 80039ec:	e002      	b.n	80039f4 <HAL_PCD_EP_DB_Receive+0x58>
    }
    else
    {
      ep->xfer_len = 0U;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11a      	bne.n	8003a32 <HAL_PCD_EP_DB_Receive+0x96>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	001a      	movs	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	0192      	lsls	r2, r2, #6
 8003a18:	4053      	eors	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	001a      	movs	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4950      	ldr	r1, [pc, #320]	; (8003b70 <HAL_PCD_EP_DB_Receive+0x1d4>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a32:	1dbb      	adds	r3, r7, #6
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d015      	beq.n	8003a68 <HAL_PCD_EP_DB_Receive+0xcc>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	001a      	movs	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	18d3      	adds	r3, r2, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a49      	ldr	r2, [pc, #292]	; (8003b74 <HAL_PCD_EP_DB_Receive+0x1d8>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	001a      	movs	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	18d3      	adds	r3, r2, r3
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4945      	ldr	r1, [pc, #276]	; (8003b78 <HAL_PCD_EP_DB_Receive+0x1dc>)
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8003a68:	241e      	movs	r4, #30
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d100      	bne.n	8003a74 <HAL_PCD_EP_DB_Receive+0xd8>
 8003a72:	e072      	b.n	8003b5a <HAL_PCD_EP_DB_Receive+0x1be>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6959      	ldr	r1, [r3, #20]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	88da      	ldrh	r2, [r3, #6]
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	f004 ff9c 	bl	80089c0 <USB_ReadPMA>
 8003a88:	e067      	b.n	8003b5a <HAL_PCD_EP_DB_Receive+0x1be>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8003a92:	4694      	mov	ip, r2
 8003a94:	4463      	add	r3, ip
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	211e      	movs	r1, #30
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	0592      	lsls	r2, r2, #22
 8003aa2:	0d92      	lsrs	r2, r2, #22
 8003aa4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d307      	bcc.n	8003ac2 <HAL_PCD_EP_DB_Receive+0x126>
    {
      ep->xfer_len -= count;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	1ad2      	subs	r2, r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	619a      	str	r2, [r3, #24]
 8003ac0:	e002      	b.n	8003ac8 <HAL_PCD_EP_DB_Receive+0x12c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11a      	bne.n	8003b06 <HAL_PCD_EP_DB_Receive+0x16a>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0192      	lsls	r2, r2, #6
 8003aec:	4053      	eors	r3, r2
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	001a      	movs	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	18d3      	adds	r3, r2, r3
 8003afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b00:	491b      	ldr	r1, [pc, #108]	; (8003b70 <HAL_PCD_EP_DB_Receive+0x1d4>)
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b06:	1dbb      	adds	r3, r7, #6
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d115      	bne.n	8003b3c <HAL_PCD_EP_DB_Receive+0x1a0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	001a      	movs	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	18d3      	adds	r3, r2, r3
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <HAL_PCD_EP_DB_Receive+0x1d8>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	001a      	movs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	18d3      	adds	r3, r2, r3
 8003b34:	6a3a      	ldr	r2, [r7, #32]
 8003b36:	4910      	ldr	r1, [pc, #64]	; (8003b78 <HAL_PCD_EP_DB_Receive+0x1dc>)
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8003b3c:	241e      	movs	r4, #30
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_PCD_EP_DB_Receive+0x1be>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6959      	ldr	r1, [r3, #20]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	891a      	ldrh	r2, [r3, #8]
 8003b52:	193b      	adds	r3, r7, r4
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	f004 ff33 	bl	80089c0 <USB_ReadPMA>
    }
  }

  return count;
 8003b5a:	231e      	movs	r3, #30
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	881b      	ldrh	r3, [r3, #0]
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b00b      	add	sp, #44	; 0x2c
 8003b66:	bd90      	pop	{r4, r7, pc}
 8003b68:	40009800 	.word	0x40009800
 8003b6c:	077fbf8f 	.word	0x077fbf8f
 8003b70:	00008080 	.word	0x00008080
 8003b74:	077f8f8f 	.word	0x077f8f8f
 8003b78:	000080c0 	.word	0x000080c0

08003b7c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08e      	sub	sp, #56	; 0x38
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	1dbb      	adds	r3, r7, #6
 8003b88:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b8a:	1dbb      	adds	r3, r7, #6
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	4013      	ands	r3, r2
 8003b92:	d100      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003b94:	e146      	b.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x2a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4ac5      	ldr	r2, [pc, #788]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003b9e:	4694      	mov	ip, r2
 8003ba0:	4463      	add	r3, ip
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	2132      	movs	r1, #50	; 0x32
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	0592      	lsls	r2, r2, #22
 8003bae:	0d92      	lsrs	r2, r2, #22
 8003bb0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d907      	bls.n	8003bce <HAL_PCD_EP_DB_Transmit+0x52>
    {
      ep->xfer_len -= TxByteNbre;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	1ad2      	subs	r2, r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	619a      	str	r2, [r3, #24]
 8003bcc:	e002      	b.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x58>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d124      	bne.n	8003c26 <HAL_PCD_EP_DB_Transmit+0xaa>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	0011      	movs	r1, r2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f009 fa97 	bl	800d118 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bea:	1dbb      	adds	r3, r7, #6
 8003bec:	881a      	ldrh	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	01db      	lsls	r3, r3, #7
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d100      	bne.n	8003bf8 <HAL_PCD_EP_DB_Transmit+0x7c>
 8003bf6:	e263      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x544>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4aab      	ldr	r2, [pc, #684]	; (8003eb8 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	001a      	movs	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	18d3      	adds	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	49a7      	ldr	r1, [pc, #668]	; (8003ebc <HAL_PCD_EP_DB_Transmit+0x340>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e24c      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x544>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c26:	1dbb      	adds	r3, r7, #6
 8003c28:	881a      	ldrh	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d015      	beq.n	8003c5e <HAL_PCD_EP_DB_Transmit+0xe2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	001a      	movs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a9d      	ldr	r2, [pc, #628]	; (8003eb8 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	001a      	movs	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c58:	4998      	ldr	r1, [pc, #608]	; (8003ebc <HAL_PCD_EP_DB_Transmit+0x340>)
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2224      	movs	r2, #36	; 0x24
 8003c62:	5c9b      	ldrb	r3, [r3, r2]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d000      	beq.n	8003c6a <HAL_PCD_EP_DB_Transmit+0xee>
 8003c68:	e22a      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x544>
      {
        ep->xfer_buff += TxByteNbre;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	2132      	movs	r1, #50	; 0x32
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	18d2      	adds	r2, r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	18d2      	adds	r2, r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6a1a      	ldr	r2, [r3, #32]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d309      	bcc.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x12c>
        {
          len = ep->maxpacket;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db -= len;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6a1a      	ldr	r2, [r3, #32]
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	1ad2      	subs	r2, r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	621a      	str	r2, [r3, #32]
 8003ca6:	e016      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x15a>
        }
        else if (ep->xfer_len_db == 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d108      	bne.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x146>
        {
          len = TxByteNbre;
 8003cb0:	2332      	movs	r3, #50	; 0x32
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_fill_db = 0U;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]
 8003cc0:	e009      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x15a>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2224      	movs	r2, #36	; 0x24
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db = 0U;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d172      	bne.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x248>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4a73      	ldr	r2, [pc, #460]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003ce6:	4694      	mov	ip, r2
 8003ce8:	4463      	add	r3, ip
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4970      	ldr	r1, [pc, #448]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003cf4:	468c      	mov	ip, r1
 8003cf6:	4463      	add	r3, ip
 8003cf8:	0412      	lsls	r2, r2, #16
 8003cfa:	0c12      	lsrs	r2, r2, #16
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d121      	bne.n	8003d48 <HAL_PCD_EP_DB_Transmit+0x1cc>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4a6a      	ldr	r2, [pc, #424]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	4463      	add	r3, ip
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4966      	ldr	r1, [pc, #408]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003d1a:	468c      	mov	ip, r1
 8003d1c:	4463      	add	r3, ip
 8003d1e:	4968      	ldr	r1, [pc, #416]	; (8003ec0 <HAL_PCD_EP_DB_Transmit+0x344>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4a62      	ldr	r2, [pc, #392]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003d2c:	4694      	mov	ip, r2
 8003d2e:	4463      	add	r3, ip
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	495e      	ldr	r1, [pc, #376]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003d3a:	468c      	mov	ip, r1
 8003d3c:	4463      	add	r3, ip
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0609      	lsls	r1, r1, #24
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e062      	b.n	8003e0e <HAL_PCD_EP_DB_Transmit+0x292>
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d4c:	d81b      	bhi.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x20a>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	2201      	movs	r2, #1
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d002      	beq.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x1e6>
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4a52      	ldr	r2, [pc, #328]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003d6a:	4694      	mov	ip, r2
 8003d6c:	4463      	add	r3, ip
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	069a      	lsls	r2, r3, #26
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	484e      	ldr	r0, [pc, #312]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003d7c:	4684      	mov	ip, r0
 8003d7e:	4463      	add	r3, ip
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e043      	b.n	8003e0e <HAL_PCD_EP_DB_Transmit+0x292>
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	221f      	movs	r2, #31
 8003d90:	4013      	ands	r3, r2
 8003d92:	d102      	bne.n	8003d9a <HAL_PCD_EP_DB_Transmit+0x21e>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4a44      	ldr	r2, [pc, #272]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003da2:	4694      	mov	ip, r2
 8003da4:	4463      	add	r3, ip
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	069b      	lsls	r3, r3, #26
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	493f      	ldr	r1, [pc, #252]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003db6:	468c      	mov	ip, r1
 8003db8:	4463      	add	r3, ip
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	0609      	lsls	r1, r1, #24
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e024      	b.n	8003e0e <HAL_PCD_EP_DB_Transmit+0x292>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	785b      	ldrb	r3, [r3, #1]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d120      	bne.n	8003e0e <HAL_PCD_EP_DB_Transmit+0x292>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003dd4:	4694      	mov	ip, r2
 8003dd6:	4463      	add	r3, ip
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4934      	ldr	r1, [pc, #208]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003de2:	468c      	mov	ip, r1
 8003de4:	4463      	add	r3, ip
 8003de6:	0412      	lsls	r2, r2, #16
 8003de8:	0c12      	lsrs	r2, r2, #16
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003df4:	4694      	mov	ip, r2
 8003df6:	4463      	add	r3, ip
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	482b      	ldr	r0, [pc, #172]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003e06:	4684      	mov	ip, r0
 8003e08:	4463      	add	r3, ip
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6959      	ldr	r1, [r3, #20]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	88da      	ldrh	r2, [r3, #6]
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f004 fd57 	bl	80088d0 <USB_WritePMA>
 8003e22:	e14d      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x544>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8003e2c:	4694      	mov	ip, r2
 8003e2e:	4463      	add	r3, ip
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	2132      	movs	r1, #50	; 0x32
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	0592      	lsls	r2, r2, #22
 8003e3c:	0d92      	lsrs	r2, r2, #22
 8003e3e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d307      	bcc.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x2e0>
    {
      ep->xfer_len -= TxByteNbre;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	1ad2      	subs	r2, r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	619a      	str	r2, [r3, #24]
 8003e5a:	e002      	b.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x2e6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d12c      	bne.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0x348>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f009 f950 	bl	800d118 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e78:	1dbb      	adds	r3, r7, #6
 8003e7a:	881a      	ldrh	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	01db      	lsls	r3, r3, #7
 8003e80:	4013      	ands	r3, r2
 8003e82:	d000      	beq.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x30a>
 8003e84:	e11c      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x544>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	18d3      	adds	r3, r2, r3
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	001a      	movs	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_PCD_EP_DB_Transmit+0x340>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e105      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x544>
 8003eb4:	40009800 	.word	0x40009800
 8003eb8:	077f8f8f 	.word	0x077f8f8f
 8003ebc:	0000c080 	.word	0x0000c080
 8003ec0:	83ffffff 	.word	0x83ffffff
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ec4:	1dbb      	adds	r3, r7, #6
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	01db      	lsls	r3, r3, #7
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d115      	bne.n	8003efc <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a89      	ldr	r2, [pc, #548]	; (8004108 <HAL_PCD_EP_DB_Transmit+0x58c>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	001a      	movs	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	18d3      	adds	r3, r2, r3
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	4985      	ldr	r1, [pc, #532]	; (800410c <HAL_PCD_EP_DB_Transmit+0x590>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	5c9b      	ldrb	r3, [r3, r2]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d000      	beq.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x38c>
 8003f06:	e0db      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x544>
      {
        ep->xfer_buff += TxByteNbre;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	2132      	movs	r1, #50	; 0x32
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	18d2      	adds	r2, r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	18d2      	adds	r2, r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d309      	bcc.n	8003f46 <HAL_PCD_EP_DB_Transmit+0x3ca>
        {
          len = ep->maxpacket;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db -= len;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6a1a      	ldr	r2, [r3, #32]
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	621a      	str	r2, [r3, #32]
 8003f44:	e016      	b.n	8003f74 <HAL_PCD_EP_DB_Transmit+0x3f8>
        }
        else if (ep->xfer_len_db == 0U)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d108      	bne.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x3e4>
        {
          len = TxByteNbre;
 8003f4e:	2332      	movs	r3, #50	; 0x32
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_fill_db = 0U;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2224      	movs	r2, #36	; 0x24
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]
 8003f5e:	e009      	b.n	8003f74 <HAL_PCD_EP_DB_Transmit+0x3f8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db = 0U;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	2100      	movs	r1, #0
 8003f72:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d172      	bne.n	8004062 <HAL_PCD_EP_DB_Transmit+0x4e6>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4a63      	ldr	r2, [pc, #396]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8003f84:	4694      	mov	ip, r2
 8003f86:	4463      	add	r3, ip
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	495f      	ldr	r1, [pc, #380]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8003f92:	468c      	mov	ip, r1
 8003f94:	4463      	add	r3, ip
 8003f96:	0412      	lsls	r2, r2, #16
 8003f98:	0c12      	lsrs	r2, r2, #16
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d121      	bne.n	8003fe6 <HAL_PCD_EP_DB_Transmit+0x46a>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4a59      	ldr	r2, [pc, #356]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8003faa:	4694      	mov	ip, r2
 8003fac:	4463      	add	r3, ip
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4956      	ldr	r1, [pc, #344]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8003fb8:	468c      	mov	ip, r1
 8003fba:	4463      	add	r3, ip
 8003fbc:	4955      	ldr	r1, [pc, #340]	; (8004114 <HAL_PCD_EP_DB_Transmit+0x598>)
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4a51      	ldr	r2, [pc, #324]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8003fca:	4694      	mov	ip, r2
 8003fcc:	4463      	add	r3, ip
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	494e      	ldr	r1, [pc, #312]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8003fd8:	468c      	mov	ip, r1
 8003fda:	4463      	add	r3, ip
 8003fdc:	2180      	movs	r1, #128	; 0x80
 8003fde:	0609      	lsls	r1, r1, #24
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	e062      	b.n	80040ac <HAL_PCD_EP_DB_Transmit+0x530>
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8003fea:	d81b      	bhi.n	8004024 <HAL_PCD_EP_DB_Transmit+0x4a8>
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d002      	beq.n	8004000 <HAL_PCD_EP_DB_Transmit+0x484>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4a42      	ldr	r2, [pc, #264]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8004008:	4694      	mov	ip, r2
 800400a:	4463      	add	r3, ip
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	069a      	lsls	r2, r3, #26
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	483d      	ldr	r0, [pc, #244]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 800401a:	4684      	mov	ip, r0
 800401c:	4463      	add	r3, ip
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	e043      	b.n	80040ac <HAL_PCD_EP_DB_Transmit+0x530>
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	221f      	movs	r2, #31
 800402e:	4013      	ands	r3, r2
 8004030:	d102      	bne.n	8004038 <HAL_PCD_EP_DB_Transmit+0x4bc>
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	3b01      	subs	r3, #1
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4a34      	ldr	r2, [pc, #208]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8004040:	4694      	mov	ip, r2
 8004042:	4463      	add	r3, ip
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	069b      	lsls	r3, r3, #26
 800404a:	431a      	orrs	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	492f      	ldr	r1, [pc, #188]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8004054:	468c      	mov	ip, r1
 8004056:	4463      	add	r3, ip
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	0609      	lsls	r1, r1, #24
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	e024      	b.n	80040ac <HAL_PCD_EP_DB_Transmit+0x530>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	785b      	ldrb	r3, [r3, #1]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d120      	bne.n	80040ac <HAL_PCD_EP_DB_Transmit+0x530>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4a27      	ldr	r2, [pc, #156]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8004072:	4694      	mov	ip, r2
 8004074:	4463      	add	r3, ip
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4924      	ldr	r1, [pc, #144]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8004080:	468c      	mov	ip, r1
 8004082:	4463      	add	r3, ip
 8004084:	0412      	lsls	r2, r2, #16
 8004086:	0c12      	lsrs	r2, r2, #16
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 8004092:	4694      	mov	ip, r2
 8004094:	4463      	add	r3, ip
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	041a      	lsls	r2, r3, #16
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	481b      	ldr	r0, [pc, #108]	; (8004110 <HAL_PCD_EP_DB_Transmit+0x594>)
 80040a4:	4684      	mov	ip, r0
 80040a6:	4463      	add	r3, ip
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6959      	ldr	r1, [r3, #20]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	891a      	ldrh	r2, [r3, #8]
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f004 fc08 	bl	80088d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	001a      	movs	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	18d3      	adds	r3, r2, r3
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a11      	ldr	r2, [pc, #68]	; (8004118 <HAL_PCD_EP_DB_Transmit+0x59c>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2210      	movs	r2, #16
 80040da:	4053      	eors	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2220      	movs	r2, #32
 80040e2:	4053      	eors	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	001a      	movs	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	18d3      	adds	r3, r2, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4909      	ldr	r1, [pc, #36]	; (800411c <HAL_PCD_EP_DB_Transmit+0x5a0>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b00e      	add	sp, #56	; 0x38
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	077f8f8f 	.word	0x077f8f8f
 800410c:	0000c080 	.word	0x0000c080
 8004110:	40009800 	.word	0x40009800
 8004114:	83ffffff 	.word	0x83ffffff
 8004118:	077f8fbf 	.word	0x077f8fbf
 800411c:	00008080 	.word	0x00008080

08004120 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	0008      	movs	r0, r1
 800412a:	0011      	movs	r1, r2
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	240a      	movs	r4, #10
 8004130:	193b      	adds	r3, r7, r4
 8004132:	1c02      	adds	r2, r0, #0
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	2308      	movs	r3, #8
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	1c0a      	adds	r2, r1, #0
 800413c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800413e:	0021      	movs	r1, r4
 8004140:	187b      	adds	r3, r7, r1
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	4013      	ands	r3, r2
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414e:	187b      	adds	r3, r7, r1
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	2207      	movs	r2, #7
 8004154:	401a      	ands	r2, r3
 8004156:	0013      	movs	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	189b      	adds	r3, r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	3338      	adds	r3, #56	; 0x38
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	18d3      	adds	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e00b      	b.n	8004180 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004168:	230a      	movs	r3, #10
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	881a      	ldrh	r2, [r3, #0]
 800416e:	0013      	movs	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	189b      	adds	r3, r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	3379      	adds	r3, #121	; 0x79
 8004178:	33ff      	adds	r3, #255	; 0xff
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	18d3      	adds	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004180:	2308      	movs	r3, #8
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	b29a      	uxth	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	809a      	strh	r2, [r3, #4]
 8004198:	e00b      	b.n	80041b2 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2201      	movs	r2, #1
 800419e:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	811a      	strh	r2, [r3, #8]
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b007      	add	sp, #28
 80041ba:	bd90      	pop	{r4, r7, pc}

080041bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	23be      	movs	r3, #190	; 0xbe
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	2101      	movs	r1, #1
 80041d2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	23bc      	movs	r3, #188	; 0xbc
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	2100      	movs	r1, #0
 80041dc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	2201      	movs	r2, #1
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	2202      	movs	r2, #2
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800420e:	4013      	ands	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d11f      	bne.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	0013      	movs	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	189b      	adds	r3, r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4912      	ldr	r1, [pc, #72]	; (800427c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004232:	0018      	movs	r0, r3
 8004234:	f7fb ff68 	bl	8000108 <__udivsi3>
 8004238:	0003      	movs	r3, r0
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800423e:	e008      	b.n	8004252 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3b01      	subs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e001      	b.n	8004252 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e009      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	401a      	ands	r2, r3
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	429a      	cmp	r2, r3
 8004262:	d0ed      	beq.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b004      	add	sp, #16
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	40007000 	.word	0x40007000
 8004274:	fffff9ff 	.word	0xfffff9ff
 8004278:	20000000 	.word	0x20000000
 800427c:	000f4240 	.word	0x000f4240

08004280 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	23e0      	movs	r3, #224	; 0xe0
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	4013      	ands	r3, r2
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f000 fb56 	bl	8004958 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	d100      	bne.n	80042b8 <HAL_RCC_OscConfig+0x20>
 80042b6:	e07d      	b.n	80043b4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b8:	4bc3      	ldr	r3, [pc, #780]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2238      	movs	r2, #56	; 0x38
 80042be:	4013      	ands	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c2:	4bc1      	ldr	r3, [pc, #772]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2203      	movs	r2, #3
 80042c8:	4013      	ands	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_OscConfig+0x40>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d002      	beq.n	80042de <HAL_RCC_OscConfig+0x46>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042de:	4bba      	ldr	r3, [pc, #744]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	4013      	ands	r3, r2
 80042e8:	d063      	beq.n	80043b2 <HAL_RCC_OscConfig+0x11a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d15f      	bne.n	80043b2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f000 fb30 	bl	8004958 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	025b      	lsls	r3, r3, #9
 8004300:	429a      	cmp	r2, r3
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x7c>
 8004304:	4bb0      	ldr	r3, [pc, #704]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4baf      	ldr	r3, [pc, #700]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	0249      	lsls	r1, r1, #9
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e020      	b.n	8004356 <HAL_RCC_OscConfig+0xbe>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	23a0      	movs	r3, #160	; 0xa0
 800431a:	02db      	lsls	r3, r3, #11
 800431c:	429a      	cmp	r2, r3
 800431e:	d10e      	bne.n	800433e <HAL_RCC_OscConfig+0xa6>
 8004320:	4ba9      	ldr	r3, [pc, #676]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4ba8      	ldr	r3, [pc, #672]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	02c9      	lsls	r1, r1, #11
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	4ba6      	ldr	r3, [pc, #664]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4ba5      	ldr	r3, [pc, #660]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	0249      	lsls	r1, r1, #9
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e00b      	b.n	8004356 <HAL_RCC_OscConfig+0xbe>
 800433e:	4ba2      	ldr	r3, [pc, #648]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4ba1      	ldr	r3, [pc, #644]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004344:	49a1      	ldr	r1, [pc, #644]	; (80045cc <HAL_RCC_OscConfig+0x334>)
 8004346:	400a      	ands	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	4b9f      	ldr	r3, [pc, #636]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b9e      	ldr	r3, [pc, #632]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004350:	499f      	ldr	r1, [pc, #636]	; (80045d0 <HAL_RCC_OscConfig+0x338>)
 8004352:	400a      	ands	r2, r1
 8004354:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fc ff11 	bl	8001184 <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fc ff0c 	bl	8001184 <HAL_GetTick>
 800436c:	0002      	movs	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e2ee      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437a:	4b93      	ldr	r3, [pc, #588]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	4013      	ands	r3, r2
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xd0>
 8004386:	e015      	b.n	80043b4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fc fefc 	bl	8001184 <HAL_GetTick>
 800438c:	0003      	movs	r3, r0
 800438e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004392:	f7fc fef7 	bl	8001184 <HAL_GetTick>
 8004396:	0002      	movs	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b64      	cmp	r3, #100	; 0x64
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e2d9      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a4:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	4013      	ands	r3, r2
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0xfa>
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2202      	movs	r2, #2
 80043ba:	4013      	ands	r3, r2
 80043bc:	d100      	bne.n	80043c0 <HAL_RCC_OscConfig+0x128>
 80043be:	e099      	b.n	80044f4 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c0:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2238      	movs	r2, #56	; 0x38
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ca:	4b7f      	ldr	r3, [pc, #508]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2203      	movs	r2, #3
 80043d0:	4013      	ands	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d102      	bne.n	80043e0 <HAL_RCC_OscConfig+0x148>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d002      	beq.n	80043e6 <HAL_RCC_OscConfig+0x14e>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d135      	bne.n	8004452 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e6:	4b78      	ldr	r3, [pc, #480]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4013      	ands	r3, r2
 80043f0:	d005      	beq.n	80043fe <HAL_RCC_OscConfig+0x166>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e2ac      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	4b72      	ldr	r3, [pc, #456]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4a74      	ldr	r2, [pc, #464]	; (80045d4 <HAL_RCC_OscConfig+0x33c>)
 8004404:	4013      	ands	r3, r2
 8004406:	0019      	movs	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	021a      	lsls	r2, r3, #8
 800440e:	4b6e      	ldr	r3, [pc, #440]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d112      	bne.n	8004440 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800441a:	4b6b      	ldr	r3, [pc, #428]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6e      	ldr	r2, [pc, #440]	; (80045d8 <HAL_RCC_OscConfig+0x340>)
 8004420:	4013      	ands	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	4b67      	ldr	r3, [pc, #412]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800442e:	4b66      	ldr	r3, [pc, #408]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	0adb      	lsrs	r3, r3, #11
 8004434:	2207      	movs	r2, #7
 8004436:	4013      	ands	r3, r2
 8004438:	4a68      	ldr	r2, [pc, #416]	; (80045dc <HAL_RCC_OscConfig+0x344>)
 800443a:	40da      	lsrs	r2, r3
 800443c:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <HAL_RCC_OscConfig+0x348>)
 800443e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004440:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <HAL_RCC_OscConfig+0x34c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0018      	movs	r0, r3
 8004446:	f7fc fd97 	bl	8000f78 <HAL_InitTick>
 800444a:	1e03      	subs	r3, r0, #0
 800444c:	d051      	beq.n	80044f2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e282      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d030      	beq.n	80044bc <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800445a:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a5e      	ldr	r2, [pc, #376]	; (80045d8 <HAL_RCC_OscConfig+0x340>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	4b57      	ldr	r3, [pc, #348]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800446e:	4b56      	ldr	r3, [pc, #344]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b55      	ldr	r3, [pc, #340]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	0049      	lsls	r1, r1, #1
 8004478:	430a      	orrs	r2, r1
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fc fe82 	bl	8001184 <HAL_GetTick>
 8004480:	0003      	movs	r3, r0
 8004482:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004486:	f7fc fe7d 	bl	8001184 <HAL_GetTick>
 800448a:	0002      	movs	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e25f      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004498:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4013      	ands	r3, r2
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a4a      	ldr	r2, [pc, #296]	; (80045d4 <HAL_RCC_OscConfig+0x33c>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	4b44      	ldr	r3, [pc, #272]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	e01b      	b.n	80044f4 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80044bc:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80044c2:	4949      	ldr	r1, [pc, #292]	; (80045e8 <HAL_RCC_OscConfig+0x350>)
 80044c4:	400a      	ands	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fc fe5c 	bl	8001184 <HAL_GetTick>
 80044cc:	0003      	movs	r3, r0
 80044ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d2:	f7fc fe57 	bl	8001184 <HAL_GetTick>
 80044d6:	0002      	movs	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e239      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e4:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4013      	ands	r3, r2
 80044ee:	d1f0      	bne.n	80044d2 <HAL_RCC_OscConfig+0x23a>
 80044f0:	e000      	b.n	80044f4 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2208      	movs	r2, #8
 80044fa:	4013      	ands	r3, r2
 80044fc:	d047      	beq.n	800458e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2238      	movs	r2, #56	; 0x38
 8004504:	4013      	ands	r3, r2
 8004506:	2b18      	cmp	r3, #24
 8004508:	d10a      	bne.n	8004520 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800450a:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800450c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d03c      	beq.n	800458e <HAL_RCC_OscConfig+0x2f6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d138      	bne.n	800458e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e21b      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d019      	beq.n	800455c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800452a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800452c:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800452e:	2101      	movs	r1, #1
 8004530:	430a      	orrs	r2, r1
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fc fe26 	bl	8001184 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453e:	f7fc fe21 	bl	8001184 <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e203      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004550:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004554:	2202      	movs	r2, #2
 8004556:	4013      	ands	r3, r2
 8004558:	d0f1      	beq.n	800453e <HAL_RCC_OscConfig+0x2a6>
 800455a:	e018      	b.n	800458e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800455c:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 800455e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004560:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004562:	2101      	movs	r1, #1
 8004564:	438a      	bics	r2, r1
 8004566:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fc fe0c 	bl	8001184 <HAL_GetTick>
 800456c:	0003      	movs	r3, r0
 800456e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004572:	f7fc fe07 	bl	8001184 <HAL_GetTick>
 8004576:	0002      	movs	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1e9      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d1f1      	bne.n	8004572 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2204      	movs	r2, #4
 8004594:	4013      	ands	r3, r2
 8004596:	d100      	bne.n	800459a <HAL_RCC_OscConfig+0x302>
 8004598:	e0c6      	b.n	8004728 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	231f      	movs	r3, #31
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2238      	movs	r2, #56	; 0x38
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d11e      	bne.n	80045ec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	2202      	movs	r2, #2
 80045b4:	4013      	ands	r3, r2
 80045b6:	d100      	bne.n	80045ba <HAL_RCC_OscConfig+0x322>
 80045b8:	e0b6      	b.n	8004728 <HAL_RCC_OscConfig+0x490>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d000      	beq.n	80045c4 <HAL_RCC_OscConfig+0x32c>
 80045c2:	e0b1      	b.n	8004728 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e1c7      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	fffeffff 	.word	0xfffeffff
 80045d0:	fffbffff 	.word	0xfffbffff
 80045d4:	ffff80ff 	.word	0xffff80ff
 80045d8:	ffffc7ff 	.word	0xffffc7ff
 80045dc:	00f42400 	.word	0x00f42400
 80045e0:	20000000 	.word	0x20000000
 80045e4:	20000004 	.word	0x20000004
 80045e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ec:	4bb8      	ldr	r3, [pc, #736]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80045ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	055b      	lsls	r3, r3, #21
 80045f4:	4013      	ands	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_OscConfig+0x364>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x366>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d011      	beq.n	8004626 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4bb3      	ldr	r3, [pc, #716]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004606:	4bb2      	ldr	r3, [pc, #712]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004608:	2180      	movs	r1, #128	; 0x80
 800460a:	0549      	lsls	r1, r1, #21
 800460c:	430a      	orrs	r2, r1
 800460e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004610:	4baf      	ldr	r3, [pc, #700]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	055b      	lsls	r3, r3, #21
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800461e:	231f      	movs	r3, #31
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004626:	4bab      	ldr	r3, [pc, #684]	; (80048d4 <HAL_RCC_OscConfig+0x63c>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4013      	ands	r3, r2
 8004630:	d11a      	bne.n	8004668 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004632:	4ba8      	ldr	r3, [pc, #672]	; (80048d4 <HAL_RCC_OscConfig+0x63c>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4ba7      	ldr	r3, [pc, #668]	; (80048d4 <HAL_RCC_OscConfig+0x63c>)
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	0049      	lsls	r1, r1, #1
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004640:	f7fc fda0 	bl	8001184 <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fc fd9b 	bl	8001184 <HAL_GetTick>
 800464e:	0002      	movs	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e17d      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465c:	4b9d      	ldr	r3, [pc, #628]	; (80048d4 <HAL_RCC_OscConfig+0x63c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4013      	ands	r3, r2
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x3e6>
 8004670:	4b97      	ldr	r3, [pc, #604]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004672:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004674:	4b96      	ldr	r3, [pc, #600]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004676:	2101      	movs	r1, #1
 8004678:	430a      	orrs	r2, r1
 800467a:	65da      	str	r2, [r3, #92]	; 0x5c
 800467c:	e01c      	b.n	80046b8 <HAL_RCC_OscConfig+0x420>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x408>
 8004686:	4b92      	ldr	r3, [pc, #584]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800468a:	4b91      	ldr	r3, [pc, #580]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800468c:	2104      	movs	r1, #4
 800468e:	430a      	orrs	r2, r1
 8004690:	65da      	str	r2, [r3, #92]	; 0x5c
 8004692:	4b8f      	ldr	r3, [pc, #572]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004696:	4b8e      	ldr	r3, [pc, #568]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004698:	2101      	movs	r1, #1
 800469a:	430a      	orrs	r2, r1
 800469c:	65da      	str	r2, [r3, #92]	; 0x5c
 800469e:	e00b      	b.n	80046b8 <HAL_RCC_OscConfig+0x420>
 80046a0:	4b8b      	ldr	r3, [pc, #556]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80046a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046a4:	4b8a      	ldr	r3, [pc, #552]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	438a      	bics	r2, r1
 80046aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80046ac:	4b88      	ldr	r3, [pc, #544]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80046ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046b0:	4b87      	ldr	r3, [pc, #540]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80046b2:	2104      	movs	r1, #4
 80046b4:	438a      	bics	r2, r1
 80046b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d014      	beq.n	80046ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fc fd60 	bl	8001184 <HAL_GetTick>
 80046c4:	0003      	movs	r3, r0
 80046c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c8:	e009      	b.n	80046de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fc fd5b 	bl	8001184 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	4a80      	ldr	r2, [pc, #512]	; (80048d8 <HAL_RCC_OscConfig+0x640>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e13c      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046de:	4b7c      	ldr	r3, [pc, #496]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	2202      	movs	r2, #2
 80046e4:	4013      	ands	r3, r2
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x432>
 80046e8:	e013      	b.n	8004712 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fc fd4b 	bl	8001184 <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f2:	e009      	b.n	8004708 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fc fd46 	bl	8001184 <HAL_GetTick>
 80046f8:	0002      	movs	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	4a76      	ldr	r2, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x640>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e127      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004708:	4b71      	ldr	r3, [pc, #452]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	2202      	movs	r2, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004712:	231f      	movs	r3, #31
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b6c      	ldr	r3, [pc, #432]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800471e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004720:	4b6b      	ldr	r3, [pc, #428]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004722:	496e      	ldr	r1, [pc, #440]	; (80048dc <HAL_RCC_OscConfig+0x644>)
 8004724:	400a      	ands	r2, r1
 8004726:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2220      	movs	r2, #32
 800472e:	4013      	ands	r3, r2
 8004730:	d039      	beq.n	80047a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01b      	beq.n	8004772 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800473a:	4b65      	ldr	r3, [pc, #404]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b64      	ldr	r3, [pc, #400]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	03c9      	lsls	r1, r1, #15
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fc fd1c 	bl	8001184 <HAL_GetTick>
 800474c:	0003      	movs	r3, r0
 800474e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004752:	f7fc fd17 	bl	8001184 <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0f9      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004764:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	4013      	ands	r3, r2
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x4ba>
 8004770:	e019      	b.n	80047a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004772:	4b57      	ldr	r3, [pc, #348]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b56      	ldr	r3, [pc, #344]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004778:	4959      	ldr	r1, [pc, #356]	; (80048e0 <HAL_RCC_OscConfig+0x648>)
 800477a:	400a      	ands	r2, r1
 800477c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7fc fd01 	bl	8001184 <HAL_GetTick>
 8004782:	0003      	movs	r3, r0
 8004784:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004788:	f7fc fcfc 	bl	8001184 <HAL_GetTick>
 800478c:	0002      	movs	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0de      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800479a:	4b4d      	ldr	r3, [pc, #308]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	4013      	ands	r3, r2
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d100      	bne.n	80047b0 <HAL_RCC_OscConfig+0x518>
 80047ae:	e0d2      	b.n	8004956 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b0:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2238      	movs	r2, #56	; 0x38
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d100      	bne.n	80047be <HAL_RCC_OscConfig+0x526>
 80047bc:	e081      	b.n	80048c2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d156      	bne.n	8004874 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b41      	ldr	r3, [pc, #260]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80047cc:	4945      	ldr	r1, [pc, #276]	; (80048e4 <HAL_RCC_OscConfig+0x64c>)
 80047ce:	400a      	ands	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fc fcd7 	bl	8001184 <HAL_GetTick>
 80047d6:	0003      	movs	r3, r0
 80047d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fc fcd2 	bl	8001184 <HAL_GetTick>
 80047e0:	0002      	movs	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e0b4      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ee:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	049b      	lsls	r3, r3, #18
 80047f6:	4013      	ands	r3, r2
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fa:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <HAL_RCC_OscConfig+0x650>)
 8004800:	4013      	ands	r3, r2
 8004802:	0019      	movs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	431a      	orrs	r2, r3
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800482a:	430a      	orrs	r2, r1
 800482c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	0449      	lsls	r1, r1, #17
 8004838:	430a      	orrs	r2, r1
 800483a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004842:	2180      	movs	r1, #128	; 0x80
 8004844:	0549      	lsls	r1, r1, #21
 8004846:	430a      	orrs	r2, r1
 8004848:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fc fc9b 	bl	8001184 <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fc fc96 	bl	8001184 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e078      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	049b      	lsls	r3, r3, #18
 800486e:	4013      	ands	r3, r2
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x5bc>
 8004872:	e070      	b.n	8004956 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004874:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800487a:	491a      	ldr	r1, [pc, #104]	; (80048e4 <HAL_RCC_OscConfig+0x64c>)
 800487c:	400a      	ands	r2, r1
 800487e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004880:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004886:	2103      	movs	r1, #3
 8004888:	438a      	bics	r2, r1
 800488a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 8004892:	4916      	ldr	r1, [pc, #88]	; (80048ec <HAL_RCC_OscConfig+0x654>)
 8004894:	400a      	ands	r2, r1
 8004896:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fc fc74 	bl	8001184 <HAL_GetTick>
 800489c:	0003      	movs	r3, r0
 800489e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fc fc6f 	bl	8001184 <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e051      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_RCC_OscConfig+0x638>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	049b      	lsls	r3, r3, #18
 80048bc:	4013      	ands	r3, r2
 80048be:	d1f0      	bne.n	80048a2 <HAL_RCC_OscConfig+0x60a>
 80048c0:	e049      	b.n	8004956 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d112      	bne.n	80048f0 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e044      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40007000 	.word	0x40007000
 80048d8:	00001388 	.word	0x00001388
 80048dc:	efffffff 	.word	0xefffffff
 80048e0:	ffbfffff 	.word	0xffbfffff
 80048e4:	feffffff 	.word	0xfeffffff
 80048e8:	11c1808c 	.word	0x11c1808c
 80048ec:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x6c8>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2203      	movs	r2, #3
 80048fa:	401a      	ands	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	429a      	cmp	r2, r3
 8004902:	d126      	bne.n	8004952 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2270      	movs	r2, #112	; 0x70
 8004908:	401a      	ands	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d11f      	bne.n	8004952 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	23fe      	movs	r3, #254	; 0xfe
 8004916:	01db      	lsls	r3, r3, #7
 8004918:	401a      	ands	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d116      	bne.n	8004952 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	23f8      	movs	r3, #248	; 0xf8
 8004928:	039b      	lsls	r3, r3, #14
 800492a:	401a      	ands	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d10e      	bne.n	8004952 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	23e0      	movs	r3, #224	; 0xe0
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	401a      	ands	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	0f5b      	lsrs	r3, r3, #29
 8004948:	075a      	lsls	r2, r3, #29
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b008      	add	sp, #32
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000

08004964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0e9      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2207      	movs	r2, #7
 800497e:	4013      	ands	r3, r2
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d91e      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b73      	ldr	r3, [pc, #460]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2207      	movs	r2, #7
 800498c:	4393      	bics	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	4b70      	ldr	r3, [pc, #448]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004998:	f7fc fbf4 	bl	8001184 <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049a0:	e009      	b.n	80049b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a2:	f7fc fbef 	bl	8001184 <HAL_GetTick>
 80049a6:	0002      	movs	r2, r0
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	4a6a      	ldr	r2, [pc, #424]	; (8004b58 <HAL_RCC_ClockConfig+0x1f4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0ca      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2207      	movs	r2, #7
 80049bc:	4013      	ands	r3, r2
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d1ee      	bne.n	80049a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2202      	movs	r2, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d015      	beq.n	80049fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2204      	movs	r2, #4
 80049d4:	4013      	ands	r3, r2
 80049d6:	d006      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049d8:	4b60      	ldr	r3, [pc, #384]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 80049de:	21e0      	movs	r1, #224	; 0xe0
 80049e0:	01c9      	lsls	r1, r1, #7
 80049e2:	430a      	orrs	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e6:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4a5d      	ldr	r2, [pc, #372]	; (8004b60 <HAL_RCC_ClockConfig+0x1fc>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2201      	movs	r2, #1
 8004a00:	4013      	ands	r3, r2
 8004a02:	d057      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	029b      	lsls	r3, r3, #10
 8004a14:	4013      	ands	r3, r2
 8004a16:	d12b      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e097      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a24:	4b4d      	ldr	r3, [pc, #308]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	049b      	lsls	r3, r3, #18
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d11f      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e08b      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a3c:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4013      	ands	r3, r2
 8004a46:	d113      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e07f      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a54:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a58:	2202      	movs	r2, #2
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d108      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e074      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a62:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a66:	2202      	movs	r2, #2
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e06d      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a70:	4b3a      	ldr	r3, [pc, #232]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2207      	movs	r2, #7
 8004a76:	4393      	bics	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4b37      	ldr	r3, [pc, #220]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fc fb7e 	bl	8001184 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8c:	e009      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8e:	f7fc fb79 	bl	8001184 <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <HAL_RCC_ClockConfig+0x1f4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	4b2e      	ldr	r3, [pc, #184]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2238      	movs	r2, #56	; 0x38
 8004aa8:	401a      	ands	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1ec      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2207      	movs	r2, #7
 8004aba:	4013      	ands	r3, r2
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d21e      	bcs.n	8004b00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	4393      	bics	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fb56 	bl	8001184 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004adc:	e009      	b.n	8004af2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ade:	f7fc fb51 	bl	8001184 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <HAL_RCC_ClockConfig+0x1f4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e02c      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004af2:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <HAL_RCC_ClockConfig+0x1f0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2207      	movs	r2, #7
 8004af8:	4013      	ands	r3, r2
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2204      	movs	r2, #4
 8004b06:	4013      	ands	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <HAL_RCC_ClockConfig+0x200>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b1e:	f000 f829 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8004b22:	0001      	movs	r1, r0
 8004b24:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	220f      	movs	r2, #15
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <HAL_RCC_ClockConfig+0x204>)
 8004b30:	0092      	lsls	r2, r2, #2
 8004b32:	58d3      	ldr	r3, [r2, r3]
 8004b34:	221f      	movs	r2, #31
 8004b36:	4013      	ands	r3, r2
 8004b38:	000a      	movs	r2, r1
 8004b3a:	40da      	lsrs	r2, r3
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_ClockConfig+0x208>)
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x20c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fc fa17 	bl	8000f78 <HAL_InitTick>
 8004b4a:	0003      	movs	r3, r0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b004      	add	sp, #16
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40022000 	.word	0x40022000
 8004b58:	00001388 	.word	0x00001388
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	fffff0ff 	.word	0xfffff0ff
 8004b64:	ffff8fff 	.word	0xffff8fff
 8004b68:	0800da58 	.word	0x0800da58
 8004b6c:	20000000 	.word	0x20000000
 8004b70:	20000004 	.word	0x20000004

08004b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b7a:	4b3c      	ldr	r3, [pc, #240]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2238      	movs	r2, #56	; 0x38
 8004b80:	4013      	ands	r3, r2
 8004b82:	d10f      	bne.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b84:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	0adb      	lsrs	r3, r3, #11
 8004b8a:	2207      	movs	r2, #7
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2201      	movs	r2, #1
 8004b90:	409a      	lsls	r2, r3
 8004b92:	0013      	movs	r3, r2
 8004b94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	4835      	ldr	r0, [pc, #212]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b9a:	f7fb fab5 	bl	8000108 <__udivsi3>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	e05d      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba4:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2238      	movs	r2, #56	; 0x38
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bb0:	4b30      	ldr	r3, [pc, #192]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x100>)
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e054      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2238      	movs	r2, #56	; 0x38
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d138      	bne.n	8004c34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	2207      	movs	r2, #7
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	4824      	ldr	r0, [pc, #144]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x100>)
 8004be4:	f7fb fa90 	bl	8000108 <__udivsi3>
 8004be8:	0003      	movs	r3, r0
 8004bea:	0019      	movs	r1, r3
 8004bec:	4b1f      	ldr	r3, [pc, #124]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	227f      	movs	r2, #127	; 0x7f
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	434b      	muls	r3, r1
 8004bf8:	617b      	str	r3, [r7, #20]
        break;
 8004bfa:	e00d      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	481c      	ldr	r0, [pc, #112]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c00:	f7fb fa82 	bl	8000108 <__udivsi3>
 8004c04:	0003      	movs	r3, r0
 8004c06:	0019      	movs	r1, r3
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	227f      	movs	r2, #127	; 0x7f
 8004c10:	4013      	ands	r3, r2
 8004c12:	434b      	muls	r3, r1
 8004c14:	617b      	str	r3, [r7, #20]
        break;
 8004c16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	0f5b      	lsrs	r3, r3, #29
 8004c1e:	2207      	movs	r2, #7
 8004c20:	4013      	ands	r3, r2
 8004c22:	3301      	adds	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	6978      	ldr	r0, [r7, #20]
 8004c2a:	f7fb fa6d 	bl	8000108 <__udivsi3>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	e015      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2238      	movs	r2, #56	; 0x38
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d103      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e00b      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c48:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2238      	movs	r2, #56	; 0x38
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b18      	cmp	r3, #24
 8004c52:	d103      	bne.n	8004c5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c54:	23fa      	movs	r3, #250	; 0xfa
 8004c56:	01db      	lsls	r3, r3, #7
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	e001      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c60:	693b      	ldr	r3, [r7, #16]
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b006      	add	sp, #24
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	007a1200 	.word	0x007a1200

08004c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c7c:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b5b0      	push	{r4, r5, r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c90:	f7ff fff2 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004c94:	0004      	movs	r4, r0
 8004c96:	f7ff faf3 	bl	8004280 <LL_RCC_GetAPB1Prescaler>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	0b1a      	lsrs	r2, r3, #12
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ca0:	0092      	lsls	r2, r2, #2
 8004ca2:	58d3      	ldr	r3, [r2, r3]
 8004ca4:	221f      	movs	r2, #31
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	40dc      	lsrs	r4, r3
 8004caa:	0023      	movs	r3, r4
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	0800da98 	.word	0x0800da98

08004cb8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <HAL_RCC_GetClockConfig+0x4c>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2207      	movs	r2, #7
 8004cce:	401a      	ands	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCC_GetClockConfig+0x4c>)
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	23f0      	movs	r3, #240	; 0xf0
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	401a      	ands	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_RCC_GetClockConfig+0x4c>)
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	23e0      	movs	r3, #224	; 0xe0
 8004ce8:	01db      	lsls	r3, r3, #7
 8004cea:	401a      	ands	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCC_GetClockConfig+0x50>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40022000 	.word	0x40022000

08004d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004d14:	2313      	movs	r3, #19
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d1c:	2312      	movs	r3, #18
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004d30:	e0ad      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2011      	movs	r0, #17
 8004d34:	183b      	adds	r3, r7, r0
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3e:	2380      	movs	r3, #128	; 0x80
 8004d40:	055b      	lsls	r3, r3, #21
 8004d42:	4013      	ands	r3, r2
 8004d44:	d110      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b44      	ldr	r3, [pc, #272]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d4a:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	0549      	lsls	r1, r1, #21
 8004d50:	430a      	orrs	r2, r1
 8004d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d54:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	055b      	lsls	r3, r3, #21
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d62:	183b      	adds	r3, r7, r0
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d68:	4b3c      	ldr	r3, [pc, #240]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	0049      	lsls	r1, r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d76:	f7fc fa05 	bl	8001184 <HAL_GetTick>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d80:	f7fc fa00 	bl	8001184 <HAL_GetTick>
 8004d84:	0002      	movs	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d904      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004d8e:	2313      	movs	r3, #19
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	2203      	movs	r2, #3
 8004d94:	701a      	strb	r2, [r3, #0]
        break;
 8004d96:	e005      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d98:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d0ed      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004da4:	2313      	movs	r3, #19
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d15e      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dae:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004db2:	23c0      	movs	r3, #192	; 0xc0
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4013      	ands	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d019      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d014      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dce:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dd4:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dd8:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	0249      	lsls	r1, r1, #9
 8004dde:	430a      	orrs	r2, r1
 8004de0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004de2:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004de4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004de6:	4b1c      	ldr	r3, [pc, #112]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004de8:	491e      	ldr	r1, [pc, #120]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004dea:	400a      	ands	r2, r1
 8004dec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dee:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2201      	movs	r2, #1
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d016      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fc f9c2 	bl	8001184 <HAL_GetTick>
 8004e00:	0003      	movs	r3, r0
 8004e02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e04:	e00c      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fc f9bd 	bl	8001184 <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d904      	bls.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004e16:	2313      	movs	r3, #19
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	701a      	strb	r2, [r3, #0]
            break;
 8004e1e:	e004      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	2202      	movs	r2, #2
 8004e26:	4013      	ands	r3, r2
 8004e28:	d0ed      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004e2a:	2313      	movs	r3, #19
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e44:	430a      	orrs	r2, r1
 8004e46:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e48:	e016      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e4a:	2312      	movs	r3, #18
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	2213      	movs	r2, #19
 8004e50:	18ba      	adds	r2, r7, r2
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e00f      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	fffffcff 	.word	0xfffffcff
 8004e64:	fffeffff 	.word	0xfffeffff
 8004e68:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	2312      	movs	r3, #18
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	2213      	movs	r2, #19
 8004e72:	18ba      	adds	r2, r7, r2
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e78:	2311      	movs	r3, #17
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e82:	4bb6      	ldr	r3, [pc, #728]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e86:	4bb5      	ldr	r3, [pc, #724]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e88:	49b5      	ldr	r1, [pc, #724]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2201      	movs	r2, #1
 8004e94:	4013      	ands	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e98:	4bb0      	ldr	r3, [pc, #704]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	4393      	bics	r3, r2
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4bad      	ldr	r3, [pc, #692]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eb6:	4ba9      	ldr	r3, [pc, #676]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	220c      	movs	r2, #12
 8004ebc:	4393      	bics	r3, r2
 8004ebe:	0019      	movs	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	4ba5      	ldr	r3, [pc, #660]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ed4:	4ba1      	ldr	r3, [pc, #644]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	2230      	movs	r2, #48	; 0x30
 8004eda:	4393      	bics	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	4b9e      	ldr	r3, [pc, #632]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2210      	movs	r2, #16
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ef2:	4b9a      	ldr	r3, [pc, #616]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	4a9b      	ldr	r2, [pc, #620]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	4b96      	ldr	r3, [pc, #600]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	015b      	lsls	r3, r3, #5
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d009      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004f12:	4b92      	ldr	r3, [pc, #584]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	4a94      	ldr	r2, [pc, #592]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	4b8e      	ldr	r3, [pc, #568]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f22:	430a      	orrs	r2, r1
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	2380      	movs	r3, #128	; 0x80
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f32:	4b8a      	ldr	r3, [pc, #552]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	4a8d      	ldr	r2, [pc, #564]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f40:	4b86      	ldr	r3, [pc, #536]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f42:	430a      	orrs	r2, r1
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f52:	4b82      	ldr	r3, [pc, #520]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	4a86      	ldr	r2, [pc, #536]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f60:	4b7e      	ldr	r3, [pc, #504]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f62:	430a      	orrs	r2, r1
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f70:	4b7a      	ldr	r3, [pc, #488]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	4a7f      	ldr	r2, [pc, #508]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	4b77      	ldr	r3, [pc, #476]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f80:	430a      	orrs	r2, r1
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2240      	movs	r2, #64	; 0x40
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f8e:	4b73      	ldr	r3, [pc, #460]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	4a79      	ldr	r2, [pc, #484]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	0019      	movs	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	4b6f      	ldr	r3, [pc, #444]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	01db      	lsls	r3, r3, #7
 8004faa:	4013      	ands	r3, r2
 8004fac:	d015      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fae:	4b6b      	ldr	r3, [pc, #428]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	0899      	lsrs	r1, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fba:	4b68      	ldr	r3, [pc, #416]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	05db      	lsls	r3, r3, #23
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d106      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004fcc:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	4b62      	ldr	r3, [pc, #392]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	0249      	lsls	r1, r1, #9
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fe6:	4b5d      	ldr	r3, [pc, #372]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	2240      	movs	r2, #64	; 0x40
 8004fec:	4393      	bics	r3, r2
 8004fee:	0019      	movs	r1, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	039b      	lsls	r3, r3, #14
 8005002:	4013      	ands	r3, r2
 8005004:	d016      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005006:	4b55      	ldr	r3, [pc, #340]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	4a5c      	ldr	r2, [pc, #368]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800500c:	4013      	ands	r3, r2
 800500e:	0019      	movs	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005014:	4b51      	ldr	r3, [pc, #324]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005016:	430a      	orrs	r2, r1
 8005018:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	03db      	lsls	r3, r3, #15
 8005022:	429a      	cmp	r2, r3
 8005024:	d106      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005026:	4b4d      	ldr	r3, [pc, #308]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	4b4c      	ldr	r3, [pc, #304]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	0449      	lsls	r1, r1, #17
 8005030:	430a      	orrs	r2, r1
 8005032:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	03db      	lsls	r3, r3, #15
 800503c:	4013      	ands	r3, r2
 800503e:	d016      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005040:	4b46      	ldr	r3, [pc, #280]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005044:	4a4e      	ldr	r2, [pc, #312]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005046:	4013      	ands	r3, r2
 8005048:	0019      	movs	r1, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800504e:	4b43      	ldr	r3, [pc, #268]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005050:	430a      	orrs	r2, r1
 8005052:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	045b      	lsls	r3, r3, #17
 800505c:	429a      	cmp	r2, r3
 800505e:	d106      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005060:	4b3e      	ldr	r3, [pc, #248]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	4b3d      	ldr	r3, [pc, #244]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	0449      	lsls	r1, r1, #17
 800506a:	430a      	orrs	r2, r1
 800506c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4013      	ands	r3, r2
 8005078:	d014      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800507a:	4b38      	ldr	r3, [pc, #224]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	2203      	movs	r2, #3
 8005080:	4393      	bics	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1a      	ldr	r2, [r3, #32]
 8005088:	4b34      	ldr	r3, [pc, #208]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800508a:	430a      	orrs	r2, r1
 800508c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d106      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005096:	4b31      	ldr	r3, [pc, #196]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	0249      	lsls	r1, r1, #9
 80050a0:	430a      	orrs	r2, r1
 80050a2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	019b      	lsls	r3, r3, #6
 80050ac:	4013      	ands	r3, r2
 80050ae:	d014      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	220c      	movs	r2, #12
 80050b6:	4393      	bics	r3, r2
 80050b8:	0019      	movs	r1, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050c0:	430a      	orrs	r2, r1
 80050c2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80050cc:	4b23      	ldr	r3, [pc, #140]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	4b22      	ldr	r3, [pc, #136]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d2:	2180      	movs	r1, #128	; 0x80
 80050d4:	0249      	lsls	r1, r1, #9
 80050d6:	430a      	orrs	r2, r1
 80050d8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	045b      	lsls	r3, r3, #17
 80050e2:	4013      	ands	r3, r2
 80050e4:	d016      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e6:	4b1d      	ldr	r3, [pc, #116]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ea:	4a22      	ldr	r2, [pc, #136]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	0019      	movs	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050f6:	430a      	orrs	r2, r1
 80050f8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	429a      	cmp	r2, r3
 8005104:	d106      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	4b14      	ldr	r3, [pc, #80]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	0449      	lsls	r1, r1, #17
 8005110:	430a      	orrs	r2, r1
 8005112:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	049b      	lsls	r3, r3, #18
 800511c:	4013      	ands	r3, r2
 800511e:	d016      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005120:	4b0e      	ldr	r3, [pc, #56]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005124:	4a10      	ldr	r2, [pc, #64]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005126:	4013      	ands	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005130:	430a      	orrs	r2, r1
 8005132:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	429a      	cmp	r2, r3
 800513e:	d106      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	0449      	lsls	r1, r1, #17
 800514a:	430a      	orrs	r2, r1
 800514c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800514e:	2312      	movs	r3, #18
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	781b      	ldrb	r3, [r3, #0]
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b006      	add	sp, #24
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	efffffff 	.word	0xefffffff
 8005164:	fffff3ff 	.word	0xfffff3ff
 8005168:	fffffcff 	.word	0xfffffcff
 800516c:	fff3ffff 	.word	0xfff3ffff
 8005170:	ffcfffff 	.word	0xffcfffff
 8005174:	ffffcfff 	.word	0xffffcfff
 8005178:	ffff3fff 	.word	0xffff3fff
 800517c:	ffbfffff 	.word	0xffbfffff
 8005180:	feffffff 	.word	0xfeffffff

08005184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0a8      	b.n	80052e8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	2382      	movs	r3, #130	; 0x82
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d009      	beq.n	80051be <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	61da      	str	r2, [r3, #28]
 80051b0:	e005      	b.n	80051be <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	225d      	movs	r2, #93	; 0x5d
 80051c8:	5c9b      	ldrb	r3, [r3, r2]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	225c      	movs	r2, #92	; 0x5c
 80051d4:	2100      	movs	r1, #0
 80051d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0018      	movs	r0, r3
 80051dc:	f7fb fe2e 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	225d      	movs	r2, #93	; 0x5d
 80051e4:	2102      	movs	r1, #2
 80051e6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2140      	movs	r1, #64	; 0x40
 80051f4:	438a      	bics	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	23e0      	movs	r3, #224	; 0xe0
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	429a      	cmp	r2, r3
 8005202:	d902      	bls.n	800520a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e002      	b.n	8005210 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	015b      	lsls	r3, r3, #5
 800520e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	23f0      	movs	r3, #240	; 0xf0
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	429a      	cmp	r2, r3
 800521a:	d008      	beq.n	800522e <HAL_SPI_Init+0xaa>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	23e0      	movs	r3, #224	; 0xe0
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	429a      	cmp	r2, r3
 8005226:	d002      	beq.n	800522e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	2382      	movs	r3, #130	; 0x82
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	401a      	ands	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6899      	ldr	r1, [r3, #8]
 800523c:	2384      	movs	r3, #132	; 0x84
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	400b      	ands	r3, r1
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2102      	movs	r1, #2
 800524a:	400b      	ands	r3, r1
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	2101      	movs	r1, #1
 8005254:	400b      	ands	r3, r1
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6999      	ldr	r1, [r3, #24]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	400b      	ands	r3, r1
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	2138      	movs	r1, #56	; 0x38
 800526a:	400b      	ands	r3, r1
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	400b      	ands	r3, r1
 8005276:	431a      	orrs	r2, r3
 8005278:	0011      	movs	r1, r2
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	019b      	lsls	r3, r3, #6
 8005282:	401a      	ands	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	2204      	movs	r2, #4
 8005294:	401a      	ands	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2110      	movs	r1, #16
 800529c:	400b      	ands	r3, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	2108      	movs	r1, #8
 80052a6:	400b      	ands	r3, r1
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68d9      	ldr	r1, [r3, #12]
 80052ae:	23f0      	movs	r3, #240	; 0xf0
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	400b      	ands	r3, r1
 80052b4:	431a      	orrs	r2, r3
 80052b6:	0011      	movs	r1, r2
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	015b      	lsls	r3, r3, #5
 80052be:	401a      	ands	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4907      	ldr	r1, [pc, #28]	; (80052f0 <HAL_SPI_Init+0x16c>)
 80052d4:	400a      	ands	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	225d      	movs	r2, #93	; 0x5d
 80052e2:	2101      	movs	r1, #1
 80052e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b004      	add	sp, #16
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	fffff7ff 	.word	0xfffff7ff

080052f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e04a      	b.n	800539c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	223d      	movs	r2, #61	; 0x3d
 800530a:	5c9b      	ldrb	r3, [r3, r2]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	223c      	movs	r2, #60	; 0x3c
 8005316:	2100      	movs	r1, #0
 8005318:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0018      	movs	r0, r3
 800531e:	f000 f841 	bl	80053a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	223d      	movs	r2, #61	; 0x3d
 8005326:	2102      	movs	r1, #2
 8005328:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	0019      	movs	r1, r3
 8005334:	0010      	movs	r0, r2
 8005336:	f000 f9f1 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2248      	movs	r2, #72	; 0x48
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	223e      	movs	r2, #62	; 0x3e
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	223f      	movs	r2, #63	; 0x3f
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2240      	movs	r2, #64	; 0x40
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2241      	movs	r2, #65	; 0x41
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2242      	movs	r2, #66	; 0x42
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2243      	movs	r2, #67	; 0x43
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2244      	movs	r2, #68	; 0x44
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2245      	movs	r2, #69	; 0x45
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2246      	movs	r2, #70	; 0x46
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2247      	movs	r2, #71	; 0x47
 800538e:	2101      	movs	r1, #1
 8005390:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	223d      	movs	r2, #61	; 0x3d
 8005396:	2101      	movs	r1, #1
 8005398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	0018      	movs	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	223d      	movs	r2, #61	; 0x3d
 80053c0:	5c9b      	ldrb	r3, [r3, r2]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e047      	b.n	800545c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	223d      	movs	r2, #61	; 0x3d
 80053d0:	2102      	movs	r1, #2
 80053d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2101      	movs	r1, #1
 80053e0:	430a      	orrs	r2, r1
 80053e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <HAL_TIM_Base_Start_IT+0xb0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d014      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x64>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	05db      	lsls	r3, r3, #23
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d00e      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x64>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <HAL_TIM_Base_Start_IT+0xb4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x64>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_TIM_Base_Start_IT+0xb8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x64>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a17      	ldr	r2, [pc, #92]	; (8005470 <HAL_TIM_Base_Start_IT+0xbc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d116      	bne.n	8005446 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	4a15      	ldr	r2, [pc, #84]	; (8005474 <HAL_TIM_Base_Start_IT+0xc0>)
 8005420:	4013      	ands	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d016      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0xa4>
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	025b      	lsls	r3, r3, #9
 8005430:	429a      	cmp	r2, r3
 8005432:	d011      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	e008      	b.n	8005458 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	430a      	orrs	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e000      	b.n	800545a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b004      	add	sp, #16
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40014000 	.word	0x40014000
 8005474:	00010007 	.word	0x00010007

08005478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2202      	movs	r2, #2
 8005488:	4013      	ands	r3, r2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d124      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2202      	movs	r2, #2
 8005496:	4013      	ands	r3, r2
 8005498:	2b02      	cmp	r3, #2
 800549a:	d11d      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2203      	movs	r2, #3
 80054a2:	4252      	negs	r2, r2
 80054a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2203      	movs	r2, #3
 80054b4:	4013      	ands	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 f916 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 80054c0:	e007      	b.n	80054d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 f909 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 f915 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2204      	movs	r2, #4
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d125      	bne.n	8005532 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2204      	movs	r2, #4
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d11e      	bne.n	8005532 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2205      	movs	r2, #5
 80054fa:	4252      	negs	r2, r2
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	23c0      	movs	r3, #192	; 0xc0
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4013      	ands	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	0018      	movs	r0, r3
 8005516:	f000 f8e9 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 800551a:	e007      	b.n	800552c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 f8dc 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	0018      	movs	r0, r3
 8005528:	f000 f8e8 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2208      	movs	r2, #8
 800553a:	4013      	ands	r3, r2
 800553c:	2b08      	cmp	r3, #8
 800553e:	d124      	bne.n	800558a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2208      	movs	r2, #8
 8005548:	4013      	ands	r3, r2
 800554a:	2b08      	cmp	r3, #8
 800554c:	d11d      	bne.n	800558a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2209      	movs	r2, #9
 8005554:	4252      	negs	r2, r2
 8005556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2204      	movs	r2, #4
 800555c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	2203      	movs	r2, #3
 8005566:	4013      	ands	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	0018      	movs	r0, r3
 800556e:	f000 f8bd 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 8005572:	e007      	b.n	8005584 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	0018      	movs	r0, r3
 8005578:	f000 f8b0 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	0018      	movs	r0, r3
 8005580:	f000 f8bc 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2210      	movs	r2, #16
 8005592:	4013      	ands	r3, r2
 8005594:	2b10      	cmp	r3, #16
 8005596:	d125      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2210      	movs	r2, #16
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d11e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2211      	movs	r2, #17
 80055ac:	4252      	negs	r2, r2
 80055ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2208      	movs	r2, #8
 80055b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	23c0      	movs	r3, #192	; 0xc0
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4013      	ands	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	0018      	movs	r0, r3
 80055c8:	f000 f890 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 80055cc:	e007      	b.n	80055de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 f883 	bl	80056dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f000 f88f 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2201      	movs	r2, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10f      	bne.n	8005612 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d108      	bne.n	8005612 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2202      	movs	r2, #2
 8005606:	4252      	negs	r2, r2
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0018      	movs	r0, r3
 800560e:	f7fb fae1 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	4013      	ands	r3, r2
 800561c:	2b80      	cmp	r3, #128	; 0x80
 800561e:	d10f      	bne.n	8005640 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	4013      	ands	r3, r2
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d108      	bne.n	8005640 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2281      	movs	r2, #129	; 0x81
 8005634:	4252      	negs	r2, r2
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	0018      	movs	r0, r3
 800563c:	f000 f900 	bl	8005840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	401a      	ands	r2, r3
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	429a      	cmp	r2, r3
 8005652:	d10e      	bne.n	8005672 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	4013      	ands	r3, r2
 800565e:	2b80      	cmp	r3, #128	; 0x80
 8005660:	d107      	bne.n	8005672 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_TIM_IRQHandler+0x260>)
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 f8ef 	bl	8005850 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2240      	movs	r2, #64	; 0x40
 800567a:	4013      	ands	r3, r2
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d10f      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	4013      	ands	r3, r2
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d108      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2241      	movs	r2, #65	; 0x41
 8005694:	4252      	negs	r2, r2
 8005696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	0018      	movs	r0, r3
 800569c:	f000 f836 	bl	800570c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2220      	movs	r2, #32
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d10f      	bne.n	80056ce <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d108      	bne.n	80056ce <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2221      	movs	r2, #33	; 0x21
 80056c2:	4252      	negs	r2, r2
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f000 f8b1 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b002      	add	sp, #8
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	fffffeff 	.word	0xfffffeff

080056dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b002      	add	sp, #8
 800571a:	bd80      	pop	{r7, pc}

0800571c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a38      	ldr	r2, [pc, #224]	; (8005810 <TIM_Base_SetConfig+0xf4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00c      	beq.n	800574e <TIM_Base_SetConfig+0x32>
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	05db      	lsls	r3, r3, #23
 800573a:	429a      	cmp	r2, r3
 800573c:	d007      	beq.n	800574e <TIM_Base_SetConfig+0x32>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a34      	ldr	r2, [pc, #208]	; (8005814 <TIM_Base_SetConfig+0xf8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_Base_SetConfig+0x32>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a33      	ldr	r2, [pc, #204]	; (8005818 <TIM_Base_SetConfig+0xfc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d108      	bne.n	8005760 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2270      	movs	r2, #112	; 0x70
 8005752:	4393      	bics	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <TIM_Base_SetConfig+0xf4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d01c      	beq.n	80057a2 <TIM_Base_SetConfig+0x86>
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	2380      	movs	r3, #128	; 0x80
 800576c:	05db      	lsls	r3, r3, #23
 800576e:	429a      	cmp	r2, r3
 8005770:	d017      	beq.n	80057a2 <TIM_Base_SetConfig+0x86>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <TIM_Base_SetConfig+0xf8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <TIM_Base_SetConfig+0x86>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a26      	ldr	r2, [pc, #152]	; (8005818 <TIM_Base_SetConfig+0xfc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00f      	beq.n	80057a2 <TIM_Base_SetConfig+0x86>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a25      	ldr	r2, [pc, #148]	; (800581c <TIM_Base_SetConfig+0x100>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00b      	beq.n	80057a2 <TIM_Base_SetConfig+0x86>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a24      	ldr	r2, [pc, #144]	; (8005820 <TIM_Base_SetConfig+0x104>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <TIM_Base_SetConfig+0x86>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a23      	ldr	r2, [pc, #140]	; (8005824 <TIM_Base_SetConfig+0x108>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_Base_SetConfig+0x86>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a22      	ldr	r2, [pc, #136]	; (8005828 <TIM_Base_SetConfig+0x10c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a21      	ldr	r2, [pc, #132]	; (800582c <TIM_Base_SetConfig+0x110>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2280      	movs	r2, #128	; 0x80
 80057b8:	4393      	bics	r3, r2
 80057ba:	001a      	movs	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <TIM_Base_SetConfig+0xf4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00b      	beq.n	80057fa <TIM_Base_SetConfig+0xde>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <TIM_Base_SetConfig+0x104>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <TIM_Base_SetConfig+0xde>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <TIM_Base_SetConfig+0x108>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_Base_SetConfig+0xde>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a0c      	ldr	r2, [pc, #48]	; (8005828 <TIM_Base_SetConfig+0x10c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d103      	bne.n	8005802 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	615a      	str	r2, [r3, #20]
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b004      	add	sp, #16
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40002000 	.word	0x40002000
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800
 800582c:	fffffcff 	.word	0xfffffcff

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	46bd      	mov	sp, r7
 800583c:	b002      	add	sp, #8
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e046      	b.n	8005900 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2284      	movs	r2, #132	; 0x84
 8005876:	589b      	ldr	r3, [r3, r2]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d107      	bne.n	800588c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	0018      	movs	r0, r3
 8005888:	f7fb fb22 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2284      	movs	r2, #132	; 0x84
 8005890:	2124      	movs	r1, #36	; 0x24
 8005892:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2101      	movs	r1, #1
 80058a0:	438a      	bics	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 fa84 	bl	8005db4 <UART_SetConfig>
 80058ac:	0003      	movs	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e024      	b.n	8005900 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0018      	movs	r0, r3
 80058c2:	f000 fdfd 	bl	80064c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	490d      	ldr	r1, [pc, #52]	; (8005908 <HAL_UART_Init+0xa8>)
 80058d2:	400a      	ands	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	212a      	movs	r1, #42	; 0x2a
 80058e2:	438a      	bics	r2, r1
 80058e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2101      	movs	r1, #1
 80058f2:	430a      	orrs	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 fe95 	bl	8006628 <UART_CheckIdleState>
 80058fe:	0003      	movs	r3, r0
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b002      	add	sp, #8
 8005906:	bd80      	pop	{r7, pc}
 8005908:	ffffb7ff 	.word	0xffffb7ff

0800590c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4abb      	ldr	r2, [pc, #748]	; (8005c1c <HAL_UART_IRQHandler+0x310>)
 8005930:	4013      	ands	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d117      	bne.n	800596a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2220      	movs	r2, #32
 800593e:	4013      	ands	r3, r2
 8005940:	d013      	beq.n	800596a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2220      	movs	r2, #32
 8005946:	4013      	ands	r3, r2
 8005948:	d104      	bne.n	8005954 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	055b      	lsls	r3, r3, #21
 8005950:	4013      	ands	r3, r2
 8005952:	d00a      	beq.n	800596a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	2b00      	cmp	r3, #0
 800595a:	d100      	bne.n	800595e <HAL_UART_IRQHandler+0x52>
 800595c:	e1fd      	b.n	8005d5a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	0010      	movs	r0, r2
 8005966:	4798      	blx	r3
      }
      return;
 8005968:	e1f7      	b.n	8005d5a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d100      	bne.n	8005972 <HAL_UART_IRQHandler+0x66>
 8005970:	e0de      	b.n	8005b30 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4aaa      	ldr	r2, [pc, #680]	; (8005c20 <HAL_UART_IRQHandler+0x314>)
 8005976:	4013      	ands	r3, r2
 8005978:	d104      	bne.n	8005984 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	4aa9      	ldr	r2, [pc, #676]	; (8005c24 <HAL_UART_IRQHandler+0x318>)
 800597e:	4013      	ands	r3, r2
 8005980:	d100      	bne.n	8005984 <HAL_UART_IRQHandler+0x78>
 8005982:	e0d5      	b.n	8005b30 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2201      	movs	r2, #1
 8005988:	4013      	ands	r3, r2
 800598a:	d010      	beq.n	80059ae <HAL_UART_IRQHandler+0xa2>
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	4013      	ands	r3, r2
 8005994:	d00b      	beq.n	80059ae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2201      	movs	r2, #1
 800599c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	228c      	movs	r2, #140	; 0x8c
 80059a2:	589b      	ldr	r3, [r3, r2]
 80059a4:	2201      	movs	r2, #1
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	218c      	movs	r1, #140	; 0x8c
 80059ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2202      	movs	r2, #2
 80059b2:	4013      	ands	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <HAL_UART_IRQHandler+0xca>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2201      	movs	r2, #1
 80059ba:	4013      	ands	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2202      	movs	r2, #2
 80059c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	228c      	movs	r2, #140	; 0x8c
 80059ca:	589b      	ldr	r3, [r3, r2]
 80059cc:	2204      	movs	r2, #4
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	218c      	movs	r1, #140	; 0x8c
 80059d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	2204      	movs	r2, #4
 80059da:	4013      	ands	r3, r2
 80059dc:	d00f      	beq.n	80059fe <HAL_UART_IRQHandler+0xf2>
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2201      	movs	r2, #1
 80059e2:	4013      	ands	r3, r2
 80059e4:	d00b      	beq.n	80059fe <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2204      	movs	r2, #4
 80059ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	228c      	movs	r2, #140	; 0x8c
 80059f2:	589b      	ldr	r3, [r3, r2]
 80059f4:	2202      	movs	r2, #2
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	218c      	movs	r1, #140	; 0x8c
 80059fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2208      	movs	r2, #8
 8005a02:	4013      	ands	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d103      	bne.n	8005a16 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4a83      	ldr	r2, [pc, #524]	; (8005c20 <HAL_UART_IRQHandler+0x314>)
 8005a12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a14:	d00b      	beq.n	8005a2e <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	228c      	movs	r2, #140	; 0x8c
 8005a22:	589b      	ldr	r3, [r3, r2]
 8005a24:	2208      	movs	r2, #8
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	218c      	movs	r1, #140	; 0x8c
 8005a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	4013      	ands	r3, r2
 8005a36:	d011      	beq.n	8005a5c <HAL_UART_IRQHandler+0x150>
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	2380      	movs	r3, #128	; 0x80
 8005a3c:	04db      	lsls	r3, r3, #19
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d00c      	beq.n	8005a5c <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	0112      	lsls	r2, r2, #4
 8005a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	228c      	movs	r2, #140	; 0x8c
 8005a50:	589b      	ldr	r3, [r3, r2]
 8005a52:	2220      	movs	r2, #32
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	218c      	movs	r1, #140	; 0x8c
 8005a5a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	228c      	movs	r2, #140	; 0x8c
 8005a60:	589b      	ldr	r3, [r3, r2]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d100      	bne.n	8005a68 <HAL_UART_IRQHandler+0x15c>
 8005a66:	e17a      	b.n	8005d5e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d011      	beq.n	8005a94 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2220      	movs	r2, #32
 8005a74:	4013      	ands	r3, r2
 8005a76:	d104      	bne.n	8005a82 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	055b      	lsls	r3, r3, #21
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d008      	beq.n	8005a94 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	0010      	movs	r0, r2
 8005a92:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	228c      	movs	r2, #140	; 0x8c
 8005a98:	589b      	ldr	r3, [r3, r2]
 8005a9a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2240      	movs	r2, #64	; 0x40
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d003      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2228      	movs	r2, #40	; 0x28
 8005aae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ab0:	d033      	beq.n	8005b1a <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 fe83 	bl	80067c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2240      	movs	r2, #64	; 0x40
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d123      	bne.n	8005b10 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2140      	movs	r1, #64	; 0x40
 8005ad4:	438a      	bics	r2, r1
 8005ad6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d012      	beq.n	8005b06 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae4:	4a50      	ldr	r2, [pc, #320]	; (8005c28 <HAL_UART_IRQHandler+0x31c>)
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7fb fc77 	bl	80013e0 <HAL_DMA_Abort_IT>
 8005af2:	1e03      	subs	r3, r0, #0
 8005af4:	d01a      	beq.n	8005b2c <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b00:	0018      	movs	r0, r3
 8005b02:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	e012      	b.n	8005b2c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f93f 	bl	8005d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0e:	e00d      	b.n	8005b2c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f000 f93a 	bl	8005d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	e008      	b.n	8005b2c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f000 f935 	bl	8005d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	228c      	movs	r2, #140	; 0x8c
 8005b26:	2100      	movs	r1, #0
 8005b28:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b2a:	e118      	b.n	8005d5e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	46c0      	nop			; (mov r8, r8)
    return;
 8005b2e:	e116      	b.n	8005d5e <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d000      	beq.n	8005b3a <HAL_UART_IRQHandler+0x22e>
 8005b38:	e0bb      	b.n	8005cb2 <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d100      	bne.n	8005b44 <HAL_UART_IRQHandler+0x238>
 8005b42:	e0b6      	b.n	8005cb2 <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2210      	movs	r2, #16
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <HAL_UART_IRQHandler+0x242>
 8005b4c:	e0b1      	b.n	8005cb2 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2210      	movs	r2, #16
 8005b54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2240      	movs	r2, #64	; 0x40
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d165      	bne.n	8005c30 <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	2108      	movs	r1, #8
 8005b6e:	187b      	adds	r3, r7, r1
 8005b70:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d100      	bne.n	8005b7c <HAL_UART_IRQHandler+0x270>
 8005b7a:	e0f2      	b.n	8005d62 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	225c      	movs	r2, #92	; 0x5c
 8005b80:	5a9b      	ldrh	r3, [r3, r2]
 8005b82:	187a      	adds	r2, r7, r1
 8005b84:	8812      	ldrh	r2, [r2, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d300      	bcc.n	8005b8c <HAL_UART_IRQHandler+0x280>
 8005b8a:	e0ea      	b.n	8005d62 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	187a      	adds	r2, r7, r1
 8005b90:	215e      	movs	r1, #94	; 0x5e
 8005b92:	8812      	ldrh	r2, [r2, #0]
 8005b94:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d12b      	bne.n	8005bfc <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	491f      	ldr	r1, [pc, #124]	; (8005c2c <HAL_UART_IRQHandler+0x320>)
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	438a      	bics	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2140      	movs	r1, #64	; 0x40
 8005bd0:	438a      	bics	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2288      	movs	r2, #136	; 0x88
 8005bd8:	2120      	movs	r1, #32
 8005bda:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2110      	movs	r1, #16
 8005bee:	438a      	bics	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7fb fb92 	bl	8001320 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	225c      	movs	r2, #92	; 0x5c
 8005c00:	5a9a      	ldrh	r2, [r3, r2]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	215e      	movs	r1, #94	; 0x5e
 8005c06:	5a5b      	ldrh	r3, [r3, r1]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0011      	movs	r1, r2
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 f8c2 	bl	8005d9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c18:	e0a3      	b.n	8005d62 <HAL_UART_IRQHandler+0x456>
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	0000080f 	.word	0x0000080f
 8005c20:	10000001 	.word	0x10000001
 8005c24:	04000120 	.word	0x04000120
 8005c28:	08006825 	.word	0x08006825
 8005c2c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	225c      	movs	r2, #92	; 0x5c
 8005c34:	5a99      	ldrh	r1, [r3, r2]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	225e      	movs	r2, #94	; 0x5e
 8005c3a:	5a9b      	ldrh	r3, [r3, r2]
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	200a      	movs	r0, #10
 8005c40:	183b      	adds	r3, r7, r0
 8005c42:	1a8a      	subs	r2, r1, r2
 8005c44:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	225e      	movs	r2, #94	; 0x5e
 8005c4a:	5a9b      	ldrh	r3, [r3, r2]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d100      	bne.n	8005c54 <HAL_UART_IRQHandler+0x348>
 8005c52:	e088      	b.n	8005d66 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005c54:	183b      	adds	r3, r7, r0
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d100      	bne.n	8005c5e <HAL_UART_IRQHandler+0x352>
 8005c5c:	e083      	b.n	8005d66 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4942      	ldr	r1, [pc, #264]	; (8005d74 <HAL_UART_IRQHandler+0x468>)
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	493f      	ldr	r1, [pc, #252]	; (8005d78 <HAL_UART_IRQHandler+0x46c>)
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2288      	movs	r2, #136	; 0x88
 8005c82:	2120      	movs	r1, #32
 8005c84:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2110      	movs	r1, #16
 8005c9e:	438a      	bics	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca2:	183b      	adds	r3, r7, r0
 8005ca4:	881a      	ldrh	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0011      	movs	r1, r2
 8005caa:	0018      	movs	r0, r3
 8005cac:	f000 f876 	bl	8005d9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cb0:	e059      	b.n	8005d66 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	035b      	lsls	r3, r3, #13
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_UART_IRQHandler+0x3ce>
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	03db      	lsls	r3, r3, #15
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	0352      	lsls	r2, r2, #13
 8005cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 fdd8 	bl	8006888 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cd8:	e048      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2280      	movs	r2, #128	; 0x80
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d012      	beq.n	8005d08 <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d104      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d036      	beq.n	8005d6a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	0010      	movs	r0, r2
 8005d04:	4798      	blx	r3
    }
    return;
 8005d06:	e030      	b.n	8005d6a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2240      	movs	r2, #64	; 0x40
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d008      	beq.n	8005d22 <HAL_UART_IRQHandler+0x416>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2240      	movs	r2, #64	; 0x40
 8005d14:	4013      	ands	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f000 fd99 	bl	8006852 <UART_EndTransmit_IT>
    return;
 8005d20:	e024      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_UART_IRQHandler+0x434>
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	05db      	lsls	r3, r3, #23
 8005d32:	4013      	ands	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f000 fdb5 	bl	80068a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d3e:	e015      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	2380      	movs	r3, #128	; 0x80
 8005d44:	045b      	lsls	r3, r3, #17
 8005d46:	4013      	ands	r3, r2
 8005d48:	d010      	beq.n	8005d6c <HAL_UART_IRQHandler+0x460>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0d      	bge.n	8005d6c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 fda0 	bl	8006898 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d58:	e008      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
      return;
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	e006      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
    return;
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	e004      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
      return;
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	e002      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
      return;
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	e000      	b.n	8005d6c <HAL_UART_IRQHandler+0x460>
    return;
 8005d6a:	46c0      	nop			; (mov r8, r8)
  }
}
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b008      	add	sp, #32
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	fffffedf 	.word	0xfffffedf
 8005d78:	effffffe 	.word	0xeffffffe

08005d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	000a      	movs	r2, r1
 8005da6:	1cbb      	adds	r3, r7, #2
 8005da8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b002      	add	sp, #8
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db4:	b5b0      	push	{r4, r5, r7, lr}
 8005db6:	b090      	sub	sp, #64	; 0x40
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dbc:	231a      	movs	r3, #26
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	4694      	mov	ip, r2
 8005dc2:	44bc      	add	ip, r7
 8005dc4:	4463      	add	r3, ip
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005de8:	4313      	orrs	r3, r2
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4ac2      	ldr	r2, [pc, #776]	; (80060fc <UART_SetConfig+0x348>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	0019      	movs	r1, r3
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4abd      	ldr	r2, [pc, #756]	; (8006100 <UART_SetConfig+0x34c>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	68d9      	ldr	r1, [r3, #12]
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	0003      	movs	r3, r0
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4ab7      	ldr	r2, [pc, #732]	; (8006104 <UART_SetConfig+0x350>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <UART_SetConfig+0x8c>
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4ab5      	ldr	r2, [pc, #724]	; (8006108 <UART_SetConfig+0x354>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4ab1      	ldr	r2, [pc, #708]	; (800610c <UART_SetConfig+0x358>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	0019      	movs	r1, r3
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	430b      	orrs	r3, r1
 8005e54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	220f      	movs	r2, #15
 8005e5e:	4393      	bics	r3, r2
 8005e60:	0018      	movs	r0, r3
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4aa6      	ldr	r2, [pc, #664]	; (8006110 <UART_SetConfig+0x35c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d136      	bne.n	8005ee8 <UART_SetConfig+0x134>
 8005e7a:	4ba6      	ldr	r3, [pc, #664]	; (8006114 <UART_SetConfig+0x360>)
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	2203      	movs	r2, #3
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d020      	beq.n	8005ec8 <UART_SetConfig+0x114>
 8005e86:	d827      	bhi.n	8005ed8 <UART_SetConfig+0x124>
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d00d      	beq.n	8005ea8 <UART_SetConfig+0xf4>
 8005e8c:	d824      	bhi.n	8005ed8 <UART_SetConfig+0x124>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <UART_SetConfig+0xe4>
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d010      	beq.n	8005eb8 <UART_SetConfig+0x104>
 8005e96:	e01f      	b.n	8005ed8 <UART_SetConfig+0x124>
 8005e98:	231b      	movs	r3, #27
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	4694      	mov	ip, r2
 8005e9e:	44bc      	add	ip, r7
 8005ea0:	4463      	add	r3, ip
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e170      	b.n	800618a <UART_SetConfig+0x3d6>
 8005ea8:	231b      	movs	r3, #27
 8005eaa:	2220      	movs	r2, #32
 8005eac:	4694      	mov	ip, r2
 8005eae:	44bc      	add	ip, r7
 8005eb0:	4463      	add	r3, ip
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e168      	b.n	800618a <UART_SetConfig+0x3d6>
 8005eb8:	231b      	movs	r3, #27
 8005eba:	2220      	movs	r2, #32
 8005ebc:	4694      	mov	ip, r2
 8005ebe:	44bc      	add	ip, r7
 8005ec0:	4463      	add	r3, ip
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e160      	b.n	800618a <UART_SetConfig+0x3d6>
 8005ec8:	231b      	movs	r3, #27
 8005eca:	2220      	movs	r2, #32
 8005ecc:	4694      	mov	ip, r2
 8005ece:	44bc      	add	ip, r7
 8005ed0:	4463      	add	r3, ip
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e158      	b.n	800618a <UART_SetConfig+0x3d6>
 8005ed8:	231b      	movs	r3, #27
 8005eda:	2220      	movs	r2, #32
 8005edc:	4694      	mov	ip, r2
 8005ede:	44bc      	add	ip, r7
 8005ee0:	4463      	add	r3, ip
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e150      	b.n	800618a <UART_SetConfig+0x3d6>
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a8a      	ldr	r2, [pc, #552]	; (8006118 <UART_SetConfig+0x364>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d136      	bne.n	8005f60 <UART_SetConfig+0x1ac>
 8005ef2:	4b88      	ldr	r3, [pc, #544]	; (8006114 <UART_SetConfig+0x360>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	220c      	movs	r2, #12
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d020      	beq.n	8005f40 <UART_SetConfig+0x18c>
 8005efe:	d827      	bhi.n	8005f50 <UART_SetConfig+0x19c>
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d00d      	beq.n	8005f20 <UART_SetConfig+0x16c>
 8005f04:	d824      	bhi.n	8005f50 <UART_SetConfig+0x19c>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <UART_SetConfig+0x15c>
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d010      	beq.n	8005f30 <UART_SetConfig+0x17c>
 8005f0e:	e01f      	b.n	8005f50 <UART_SetConfig+0x19c>
 8005f10:	231b      	movs	r3, #27
 8005f12:	2220      	movs	r2, #32
 8005f14:	4694      	mov	ip, r2
 8005f16:	44bc      	add	ip, r7
 8005f18:	4463      	add	r3, ip
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e134      	b.n	800618a <UART_SetConfig+0x3d6>
 8005f20:	231b      	movs	r3, #27
 8005f22:	2220      	movs	r2, #32
 8005f24:	4694      	mov	ip, r2
 8005f26:	44bc      	add	ip, r7
 8005f28:	4463      	add	r3, ip
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e12c      	b.n	800618a <UART_SetConfig+0x3d6>
 8005f30:	231b      	movs	r3, #27
 8005f32:	2220      	movs	r2, #32
 8005f34:	4694      	mov	ip, r2
 8005f36:	44bc      	add	ip, r7
 8005f38:	4463      	add	r3, ip
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e124      	b.n	800618a <UART_SetConfig+0x3d6>
 8005f40:	231b      	movs	r3, #27
 8005f42:	2220      	movs	r2, #32
 8005f44:	4694      	mov	ip, r2
 8005f46:	44bc      	add	ip, r7
 8005f48:	4463      	add	r3, ip
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e11c      	b.n	800618a <UART_SetConfig+0x3d6>
 8005f50:	231b      	movs	r3, #27
 8005f52:	2220      	movs	r2, #32
 8005f54:	4694      	mov	ip, r2
 8005f56:	44bc      	add	ip, r7
 8005f58:	4463      	add	r3, ip
 8005f5a:	2210      	movs	r2, #16
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e114      	b.n	800618a <UART_SetConfig+0x3d6>
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6d      	ldr	r2, [pc, #436]	; (800611c <UART_SetConfig+0x368>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d136      	bne.n	8005fd8 <UART_SetConfig+0x224>
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	; (8006114 <UART_SetConfig+0x360>)
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	2230      	movs	r2, #48	; 0x30
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b30      	cmp	r3, #48	; 0x30
 8005f74:	d020      	beq.n	8005fb8 <UART_SetConfig+0x204>
 8005f76:	d827      	bhi.n	8005fc8 <UART_SetConfig+0x214>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d00d      	beq.n	8005f98 <UART_SetConfig+0x1e4>
 8005f7c:	d824      	bhi.n	8005fc8 <UART_SetConfig+0x214>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <UART_SetConfig+0x1d4>
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d010      	beq.n	8005fa8 <UART_SetConfig+0x1f4>
 8005f86:	e01f      	b.n	8005fc8 <UART_SetConfig+0x214>
 8005f88:	231b      	movs	r3, #27
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	4694      	mov	ip, r2
 8005f8e:	44bc      	add	ip, r7
 8005f90:	4463      	add	r3, ip
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	e0f8      	b.n	800618a <UART_SetConfig+0x3d6>
 8005f98:	231b      	movs	r3, #27
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	4694      	mov	ip, r2
 8005f9e:	44bc      	add	ip, r7
 8005fa0:	4463      	add	r3, ip
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e0f0      	b.n	800618a <UART_SetConfig+0x3d6>
 8005fa8:	231b      	movs	r3, #27
 8005faa:	2220      	movs	r2, #32
 8005fac:	4694      	mov	ip, r2
 8005fae:	44bc      	add	ip, r7
 8005fb0:	4463      	add	r3, ip
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e0e8      	b.n	800618a <UART_SetConfig+0x3d6>
 8005fb8:	231b      	movs	r3, #27
 8005fba:	2220      	movs	r2, #32
 8005fbc:	4694      	mov	ip, r2
 8005fbe:	44bc      	add	ip, r7
 8005fc0:	4463      	add	r3, ip
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e0e0      	b.n	800618a <UART_SetConfig+0x3d6>
 8005fc8:	231b      	movs	r3, #27
 8005fca:	2220      	movs	r2, #32
 8005fcc:	4694      	mov	ip, r2
 8005fce:	44bc      	add	ip, r7
 8005fd0:	4463      	add	r3, ip
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	e0d8      	b.n	800618a <UART_SetConfig+0x3d6>
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a50      	ldr	r2, [pc, #320]	; (8006120 <UART_SetConfig+0x36c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d107      	bne.n	8005ff2 <UART_SetConfig+0x23e>
 8005fe2:	231b      	movs	r3, #27
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	4694      	mov	ip, r2
 8005fe8:	44bc      	add	ip, r7
 8005fea:	4463      	add	r3, ip
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	e0cb      	b.n	800618a <UART_SetConfig+0x3d6>
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a4b      	ldr	r2, [pc, #300]	; (8006124 <UART_SetConfig+0x370>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d107      	bne.n	800600c <UART_SetConfig+0x258>
 8005ffc:	231b      	movs	r3, #27
 8005ffe:	2220      	movs	r2, #32
 8006000:	4694      	mov	ip, r2
 8006002:	44bc      	add	ip, r7
 8006004:	4463      	add	r3, ip
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e0be      	b.n	800618a <UART_SetConfig+0x3d6>
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a45      	ldr	r2, [pc, #276]	; (8006128 <UART_SetConfig+0x374>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d107      	bne.n	8006026 <UART_SetConfig+0x272>
 8006016:	231b      	movs	r3, #27
 8006018:	2220      	movs	r2, #32
 800601a:	4694      	mov	ip, r2
 800601c:	44bc      	add	ip, r7
 800601e:	4463      	add	r3, ip
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e0b1      	b.n	800618a <UART_SetConfig+0x3d6>
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a36      	ldr	r2, [pc, #216]	; (8006104 <UART_SetConfig+0x350>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d143      	bne.n	80060b8 <UART_SetConfig+0x304>
 8006030:	4b38      	ldr	r3, [pc, #224]	; (8006114 <UART_SetConfig+0x360>)
 8006032:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006034:	23c0      	movs	r3, #192	; 0xc0
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4013      	ands	r3, r2
 800603a:	22c0      	movs	r2, #192	; 0xc0
 800603c:	0112      	lsls	r2, r2, #4
 800603e:	4293      	cmp	r3, r2
 8006040:	d02a      	beq.n	8006098 <UART_SetConfig+0x2e4>
 8006042:	22c0      	movs	r2, #192	; 0xc0
 8006044:	0112      	lsls	r2, r2, #4
 8006046:	4293      	cmp	r3, r2
 8006048:	d82e      	bhi.n	80060a8 <UART_SetConfig+0x2f4>
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	0112      	lsls	r2, r2, #4
 800604e:	4293      	cmp	r3, r2
 8006050:	d012      	beq.n	8006078 <UART_SetConfig+0x2c4>
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	0112      	lsls	r2, r2, #4
 8006056:	4293      	cmp	r3, r2
 8006058:	d826      	bhi.n	80060a8 <UART_SetConfig+0x2f4>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <UART_SetConfig+0x2b4>
 800605e:	2280      	movs	r2, #128	; 0x80
 8006060:	00d2      	lsls	r2, r2, #3
 8006062:	4293      	cmp	r3, r2
 8006064:	d010      	beq.n	8006088 <UART_SetConfig+0x2d4>
 8006066:	e01f      	b.n	80060a8 <UART_SetConfig+0x2f4>
 8006068:	231b      	movs	r3, #27
 800606a:	2220      	movs	r2, #32
 800606c:	4694      	mov	ip, r2
 800606e:	44bc      	add	ip, r7
 8006070:	4463      	add	r3, ip
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	e088      	b.n	800618a <UART_SetConfig+0x3d6>
 8006078:	231b      	movs	r3, #27
 800607a:	2220      	movs	r2, #32
 800607c:	4694      	mov	ip, r2
 800607e:	44bc      	add	ip, r7
 8006080:	4463      	add	r3, ip
 8006082:	2202      	movs	r2, #2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e080      	b.n	800618a <UART_SetConfig+0x3d6>
 8006088:	231b      	movs	r3, #27
 800608a:	2220      	movs	r2, #32
 800608c:	4694      	mov	ip, r2
 800608e:	44bc      	add	ip, r7
 8006090:	4463      	add	r3, ip
 8006092:	2204      	movs	r2, #4
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e078      	b.n	800618a <UART_SetConfig+0x3d6>
 8006098:	231b      	movs	r3, #27
 800609a:	2220      	movs	r2, #32
 800609c:	4694      	mov	ip, r2
 800609e:	44bc      	add	ip, r7
 80060a0:	4463      	add	r3, ip
 80060a2:	2208      	movs	r2, #8
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e070      	b.n	800618a <UART_SetConfig+0x3d6>
 80060a8:	231b      	movs	r3, #27
 80060aa:	2220      	movs	r2, #32
 80060ac:	4694      	mov	ip, r2
 80060ae:	44bc      	add	ip, r7
 80060b0:	4463      	add	r3, ip
 80060b2:	2210      	movs	r2, #16
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e068      	b.n	800618a <UART_SetConfig+0x3d6>
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a12      	ldr	r2, [pc, #72]	; (8006108 <UART_SetConfig+0x354>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d15c      	bne.n	800617c <UART_SetConfig+0x3c8>
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <UART_SetConfig+0x360>)
 80060c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c6:	23c0      	movs	r3, #192	; 0xc0
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4013      	ands	r3, r2
 80060cc:	22c0      	movs	r2, #192	; 0xc0
 80060ce:	0092      	lsls	r2, r2, #2
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d043      	beq.n	800615c <UART_SetConfig+0x3a8>
 80060d4:	22c0      	movs	r2, #192	; 0xc0
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	4293      	cmp	r3, r2
 80060da:	d847      	bhi.n	800616c <UART_SetConfig+0x3b8>
 80060dc:	2280      	movs	r2, #128	; 0x80
 80060de:	0092      	lsls	r2, r2, #2
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02b      	beq.n	800613c <UART_SetConfig+0x388>
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	0092      	lsls	r2, r2, #2
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d83f      	bhi.n	800616c <UART_SetConfig+0x3b8>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01d      	beq.n	800612c <UART_SetConfig+0x378>
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	0052      	lsls	r2, r2, #1
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d029      	beq.n	800614c <UART_SetConfig+0x398>
 80060f8:	e038      	b.n	800616c <UART_SetConfig+0x3b8>
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	cfff69f3 	.word	0xcfff69f3
 8006100:	ffffcfff 	.word	0xffffcfff
 8006104:	40008000 	.word	0x40008000
 8006108:	40008400 	.word	0x40008400
 800610c:	11fff4ff 	.word	0x11fff4ff
 8006110:	40013800 	.word	0x40013800
 8006114:	40021000 	.word	0x40021000
 8006118:	40004400 	.word	0x40004400
 800611c:	40004800 	.word	0x40004800
 8006120:	40004c00 	.word	0x40004c00
 8006124:	40005000 	.word	0x40005000
 8006128:	40013c00 	.word	0x40013c00
 800612c:	231b      	movs	r3, #27
 800612e:	2220      	movs	r2, #32
 8006130:	4694      	mov	ip, r2
 8006132:	44bc      	add	ip, r7
 8006134:	4463      	add	r3, ip
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e026      	b.n	800618a <UART_SetConfig+0x3d6>
 800613c:	231b      	movs	r3, #27
 800613e:	2220      	movs	r2, #32
 8006140:	4694      	mov	ip, r2
 8006142:	44bc      	add	ip, r7
 8006144:	4463      	add	r3, ip
 8006146:	2202      	movs	r2, #2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e01e      	b.n	800618a <UART_SetConfig+0x3d6>
 800614c:	231b      	movs	r3, #27
 800614e:	2220      	movs	r2, #32
 8006150:	4694      	mov	ip, r2
 8006152:	44bc      	add	ip, r7
 8006154:	4463      	add	r3, ip
 8006156:	2204      	movs	r2, #4
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e016      	b.n	800618a <UART_SetConfig+0x3d6>
 800615c:	231b      	movs	r3, #27
 800615e:	2220      	movs	r2, #32
 8006160:	4694      	mov	ip, r2
 8006162:	44bc      	add	ip, r7
 8006164:	4463      	add	r3, ip
 8006166:	2208      	movs	r2, #8
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e00e      	b.n	800618a <UART_SetConfig+0x3d6>
 800616c:	231b      	movs	r3, #27
 800616e:	2220      	movs	r2, #32
 8006170:	4694      	mov	ip, r2
 8006172:	44bc      	add	ip, r7
 8006174:	4463      	add	r3, ip
 8006176:	2210      	movs	r2, #16
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	e006      	b.n	800618a <UART_SetConfig+0x3d6>
 800617c:	231b      	movs	r3, #27
 800617e:	2220      	movs	r2, #32
 8006180:	4694      	mov	ip, r2
 8006182:	44bc      	add	ip, r7
 8006184:	4463      	add	r3, ip
 8006186:	2210      	movs	r2, #16
 8006188:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4ab8      	ldr	r2, [pc, #736]	; (8006470 <UART_SetConfig+0x6bc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d005      	beq.n	80061a0 <UART_SetConfig+0x3ec>
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4ab6      	ldr	r2, [pc, #728]	; (8006474 <UART_SetConfig+0x6c0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d000      	beq.n	80061a0 <UART_SetConfig+0x3ec>
 800619e:	e097      	b.n	80062d0 <UART_SetConfig+0x51c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061a0:	231b      	movs	r3, #27
 80061a2:	2220      	movs	r2, #32
 80061a4:	4694      	mov	ip, r2
 80061a6:	44bc      	add	ip, r7
 80061a8:	4463      	add	r3, ip
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d015      	beq.n	80061dc <UART_SetConfig+0x428>
 80061b0:	dc18      	bgt.n	80061e4 <UART_SetConfig+0x430>
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d00d      	beq.n	80061d2 <UART_SetConfig+0x41e>
 80061b6:	dc15      	bgt.n	80061e4 <UART_SetConfig+0x430>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <UART_SetConfig+0x40e>
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d005      	beq.n	80061cc <UART_SetConfig+0x418>
 80061c0:	e010      	b.n	80061e4 <UART_SetConfig+0x430>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c2:	f7fe fd63 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 80061c6:	0003      	movs	r3, r0
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ca:	e015      	b.n	80061f8 <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061cc:	4baa      	ldr	r3, [pc, #680]	; (8006478 <UART_SetConfig+0x6c4>)
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061d0:	e012      	b.n	80061f8 <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061d2:	f7fe fccf 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 80061d6:	0003      	movs	r3, r0
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061da:	e00d      	b.n	80061f8 <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061e2:	e009      	b.n	80061f8 <UART_SetConfig+0x444>
      default:
        pclk = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80061e8:	231a      	movs	r3, #26
 80061ea:	2220      	movs	r2, #32
 80061ec:	4694      	mov	ip, r2
 80061ee:	44bc      	add	ip, r7
 80061f0:	4463      	add	r3, ip
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
        break;
 80061f6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d100      	bne.n	8006200 <UART_SetConfig+0x44c>
 80061fe:	e146      	b.n	800648e <UART_SetConfig+0x6da>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006204:	4b9d      	ldr	r3, [pc, #628]	; (800647c <UART_SetConfig+0x6c8>)
 8006206:	0052      	lsls	r2, r2, #1
 8006208:	5ad3      	ldrh	r3, [r2, r3]
 800620a:	0019      	movs	r1, r3
 800620c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800620e:	f7f9 ff7b 	bl	8000108 <__udivsi3>
 8006212:	0003      	movs	r3, r0
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	0013      	movs	r3, r2
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	189b      	adds	r3, r3, r2
 8006220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006222:	429a      	cmp	r2, r3
 8006224:	d305      	bcc.n	8006232 <UART_SetConfig+0x47e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800622c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622e:	429a      	cmp	r2, r3
 8006230:	d907      	bls.n	8006242 <UART_SetConfig+0x48e>
      {
        ret = HAL_ERROR;
 8006232:	231a      	movs	r3, #26
 8006234:	2220      	movs	r2, #32
 8006236:	4694      	mov	ip, r2
 8006238:	44bc      	add	ip, r7
 800623a:	4463      	add	r3, ip
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e045      	b.n	80062ce <UART_SetConfig+0x51a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800624e:	4b8b      	ldr	r3, [pc, #556]	; (800647c <UART_SetConfig+0x6c8>)
 8006250:	0052      	lsls	r2, r2, #1
 8006252:	5ad3      	ldrh	r3, [r2, r3]
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	69b8      	ldr	r0, [r7, #24]
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	f7fa f8e5 	bl	8000430 <__aeabi_uldivmod>
 8006266:	0002      	movs	r2, r0
 8006268:	000b      	movs	r3, r1
 800626a:	0e11      	lsrs	r1, r2, #24
 800626c:	021d      	lsls	r5, r3, #8
 800626e:	430d      	orrs	r5, r1
 8006270:	0214      	lsls	r4, r2, #8
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	68b8      	ldr	r0, [r7, #8]
 8006280:	68f9      	ldr	r1, [r7, #12]
 8006282:	1900      	adds	r0, r0, r4
 8006284:	4169      	adcs	r1, r5
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	2300      	movs	r3, #0
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f7fa f8cc 	bl	8000430 <__aeabi_uldivmod>
 8006298:	0002      	movs	r2, r0
 800629a:	000b      	movs	r3, r1
 800629c:	0013      	movs	r3, r2
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a2:	23c0      	movs	r3, #192	; 0xc0
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d309      	bcc.n	80062be <UART_SetConfig+0x50a>
 80062aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	035b      	lsls	r3, r3, #13
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d204      	bcs.n	80062be <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	e007      	b.n	80062ce <UART_SetConfig+0x51a>
        }
        else
        {
          ret = HAL_ERROR;
 80062be:	231a      	movs	r3, #26
 80062c0:	2220      	movs	r2, #32
 80062c2:	4694      	mov	ip, r2
 80062c4:	44bc      	add	ip, r7
 80062c6:	4463      	add	r3, ip
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80062cc:	e0df      	b.n	800648e <UART_SetConfig+0x6da>
 80062ce:	e0de      	b.n	800648e <UART_SetConfig+0x6da>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	429a      	cmp	r2, r3
 80062da:	d000      	beq.n	80062de <UART_SetConfig+0x52a>
 80062dc:	e074      	b.n	80063c8 <UART_SetConfig+0x614>
  {
    switch (clocksource)
 80062de:	231b      	movs	r3, #27
 80062e0:	2220      	movs	r2, #32
 80062e2:	4694      	mov	ip, r2
 80062e4:	44bc      	add	ip, r7
 80062e6:	4463      	add	r3, ip
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d015      	beq.n	800631a <UART_SetConfig+0x566>
 80062ee:	dc18      	bgt.n	8006322 <UART_SetConfig+0x56e>
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d00d      	beq.n	8006310 <UART_SetConfig+0x55c>
 80062f4:	dc15      	bgt.n	8006322 <UART_SetConfig+0x56e>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <UART_SetConfig+0x54c>
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d005      	beq.n	800630a <UART_SetConfig+0x556>
 80062fe:	e010      	b.n	8006322 <UART_SetConfig+0x56e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006300:	f7fe fcc4 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8006304:	0003      	movs	r3, r0
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006308:	e015      	b.n	8006336 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630a:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <UART_SetConfig+0x6c4>)
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800630e:	e012      	b.n	8006336 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006310:	f7fe fc30 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8006314:	0003      	movs	r3, r0
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006318:	e00d      	b.n	8006336 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006320:	e009      	b.n	8006336 <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006326:	231a      	movs	r3, #26
 8006328:	2220      	movs	r2, #32
 800632a:	4694      	mov	ip, r2
 800632c:	44bc      	add	ip, r7
 800632e:	4463      	add	r3, ip
 8006330:	2201      	movs	r2, #1
 8006332:	701a      	strb	r2, [r3, #0]
        break;
 8006334:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006338:	2b00      	cmp	r3, #0
 800633a:	d100      	bne.n	800633e <UART_SetConfig+0x58a>
 800633c:	e0a7      	b.n	800648e <UART_SetConfig+0x6da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006342:	4b4e      	ldr	r3, [pc, #312]	; (800647c <UART_SetConfig+0x6c8>)
 8006344:	0052      	lsls	r2, r2, #1
 8006346:	5ad3      	ldrh	r3, [r2, r3]
 8006348:	0019      	movs	r1, r3
 800634a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800634c:	f7f9 fedc 	bl	8000108 <__udivsi3>
 8006350:	0003      	movs	r3, r0
 8006352:	005a      	lsls	r2, r3, #1
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	18d2      	adds	r2, r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	0019      	movs	r1, r3
 8006362:	0010      	movs	r0, r2
 8006364:	f7f9 fed0 	bl	8000108 <__udivsi3>
 8006368:	0003      	movs	r3, r0
 800636a:	b29b      	uxth	r3, r3
 800636c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	2b0f      	cmp	r3, #15
 8006372:	d921      	bls.n	80063b8 <UART_SetConfig+0x604>
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	2380      	movs	r3, #128	; 0x80
 8006378:	025b      	lsls	r3, r3, #9
 800637a:	429a      	cmp	r2, r3
 800637c:	d21c      	bcs.n	80063b8 <UART_SetConfig+0x604>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	b29a      	uxth	r2, r3
 8006382:	200e      	movs	r0, #14
 8006384:	2420      	movs	r4, #32
 8006386:	193b      	adds	r3, r7, r4
 8006388:	181b      	adds	r3, r3, r0
 800638a:	210f      	movs	r1, #15
 800638c:	438a      	bics	r2, r1
 800638e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	2207      	movs	r2, #7
 8006398:	4013      	ands	r3, r2
 800639a:	b299      	uxth	r1, r3
 800639c:	193b      	adds	r3, r7, r4
 800639e:	181b      	adds	r3, r3, r0
 80063a0:	193a      	adds	r2, r7, r4
 80063a2:	1812      	adds	r2, r2, r0
 80063a4:	8812      	ldrh	r2, [r2, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	193a      	adds	r2, r7, r4
 80063b0:	1812      	adds	r2, r2, r0
 80063b2:	8812      	ldrh	r2, [r2, #0]
 80063b4:	60da      	str	r2, [r3, #12]
 80063b6:	e06a      	b.n	800648e <UART_SetConfig+0x6da>
      }
      else
      {
        ret = HAL_ERROR;
 80063b8:	231a      	movs	r3, #26
 80063ba:	2220      	movs	r2, #32
 80063bc:	4694      	mov	ip, r2
 80063be:	44bc      	add	ip, r7
 80063c0:	4463      	add	r3, ip
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	e062      	b.n	800648e <UART_SetConfig+0x6da>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063c8:	231b      	movs	r3, #27
 80063ca:	2220      	movs	r2, #32
 80063cc:	4694      	mov	ip, r2
 80063ce:	44bc      	add	ip, r7
 80063d0:	4463      	add	r3, ip
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d015      	beq.n	8006404 <UART_SetConfig+0x650>
 80063d8:	dc18      	bgt.n	800640c <UART_SetConfig+0x658>
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d00d      	beq.n	80063fa <UART_SetConfig+0x646>
 80063de:	dc15      	bgt.n	800640c <UART_SetConfig+0x658>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <UART_SetConfig+0x636>
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d005      	beq.n	80063f4 <UART_SetConfig+0x640>
 80063e8:	e010      	b.n	800640c <UART_SetConfig+0x658>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ea:	f7fe fc4f 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 80063ee:	0003      	movs	r3, r0
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063f2:	e015      	b.n	8006420 <UART_SetConfig+0x66c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f4:	4b20      	ldr	r3, [pc, #128]	; (8006478 <UART_SetConfig+0x6c4>)
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063f8:	e012      	b.n	8006420 <UART_SetConfig+0x66c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063fa:	f7fe fbbb 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 80063fe:	0003      	movs	r3, r0
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006402:	e00d      	b.n	8006420 <UART_SetConfig+0x66c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800640a:	e009      	b.n	8006420 <UART_SetConfig+0x66c>
      default:
        pclk = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006410:	231a      	movs	r3, #26
 8006412:	2220      	movs	r2, #32
 8006414:	4694      	mov	ip, r2
 8006416:	44bc      	add	ip, r7
 8006418:	4463      	add	r3, ip
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
        break;
 800641e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	2b00      	cmp	r3, #0
 8006424:	d033      	beq.n	800648e <UART_SetConfig+0x6da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800642a:	4b14      	ldr	r3, [pc, #80]	; (800647c <UART_SetConfig+0x6c8>)
 800642c:	0052      	lsls	r2, r2, #1
 800642e:	5ad3      	ldrh	r3, [r2, r3]
 8006430:	0019      	movs	r1, r3
 8006432:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006434:	f7f9 fe68 	bl	8000108 <__udivsi3>
 8006438:	0003      	movs	r3, r0
 800643a:	001a      	movs	r2, r3
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	18d2      	adds	r2, r2, r3
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	0019      	movs	r1, r3
 800644a:	0010      	movs	r0, r2
 800644c:	f7f9 fe5c 	bl	8000108 <__udivsi3>
 8006450:	0003      	movs	r3, r0
 8006452:	b29b      	uxth	r3, r3
 8006454:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	2b0f      	cmp	r3, #15
 800645a:	d911      	bls.n	8006480 <UART_SetConfig+0x6cc>
 800645c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	025b      	lsls	r3, r3, #9
 8006462:	429a      	cmp	r2, r3
 8006464:	d20c      	bcs.n	8006480 <UART_SetConfig+0x6cc>
      {
        huart->Instance->BRR = usartdiv;
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e00e      	b.n	800648e <UART_SetConfig+0x6da>
 8006470:	40008000 	.word	0x40008000
 8006474:	40008400 	.word	0x40008400
 8006478:	00f42400 	.word	0x00f42400
 800647c:	0800dab8 	.word	0x0800dab8
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	231a      	movs	r3, #26
 8006482:	2220      	movs	r2, #32
 8006484:	4694      	mov	ip, r2
 8006486:	44bc      	add	ip, r7
 8006488:	4463      	add	r3, ip
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	226a      	movs	r2, #106	; 0x6a
 8006492:	2101      	movs	r1, #1
 8006494:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2268      	movs	r2, #104	; 0x68
 800649a:	2101      	movs	r1, #1
 800649c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	2200      	movs	r2, #0
 80064a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	2200      	movs	r2, #0
 80064a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064aa:	231a      	movs	r3, #26
 80064ac:	2220      	movs	r2, #32
 80064ae:	4694      	mov	ip, r2
 80064b0:	44bc      	add	ip, r7
 80064b2:	4463      	add	r3, ip
 80064b4:	781b      	ldrb	r3, [r3, #0]
}
 80064b6:	0018      	movs	r0, r3
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b010      	add	sp, #64	; 0x40
 80064bc:	bdb0      	pop	{r4, r5, r7, pc}
 80064be:	46c0      	nop			; (mov r8, r8)

080064c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	2201      	movs	r2, #1
 80064ce:	4013      	ands	r3, r2
 80064d0:	d00b      	beq.n	80064ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	4a4a      	ldr	r2, [pc, #296]	; (8006604 <UART_AdvFeatureConfig+0x144>)
 80064da:	4013      	ands	r3, r2
 80064dc:	0019      	movs	r1, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	2202      	movs	r2, #2
 80064f0:	4013      	ands	r3, r2
 80064f2:	d00b      	beq.n	800650c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4a43      	ldr	r2, [pc, #268]	; (8006608 <UART_AdvFeatureConfig+0x148>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	0019      	movs	r1, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	2204      	movs	r2, #4
 8006512:	4013      	ands	r3, r2
 8006514:	d00b      	beq.n	800652e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a3b      	ldr	r2, [pc, #236]	; (800660c <UART_AdvFeatureConfig+0x14c>)
 800651e:	4013      	ands	r3, r2
 8006520:	0019      	movs	r1, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	2208      	movs	r2, #8
 8006534:	4013      	ands	r3, r2
 8006536:	d00b      	beq.n	8006550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4a34      	ldr	r2, [pc, #208]	; (8006610 <UART_AdvFeatureConfig+0x150>)
 8006540:	4013      	ands	r3, r2
 8006542:	0019      	movs	r1, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	2210      	movs	r2, #16
 8006556:	4013      	ands	r3, r2
 8006558:	d00b      	beq.n	8006572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4a2c      	ldr	r2, [pc, #176]	; (8006614 <UART_AdvFeatureConfig+0x154>)
 8006562:	4013      	ands	r3, r2
 8006564:	0019      	movs	r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	2220      	movs	r2, #32
 8006578:	4013      	ands	r3, r2
 800657a:	d00b      	beq.n	8006594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	4a25      	ldr	r2, [pc, #148]	; (8006618 <UART_AdvFeatureConfig+0x158>)
 8006584:	4013      	ands	r3, r2
 8006586:	0019      	movs	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	2240      	movs	r2, #64	; 0x40
 800659a:	4013      	ands	r3, r2
 800659c:	d01d      	beq.n	80065da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	4a1d      	ldr	r2, [pc, #116]	; (800661c <UART_AdvFeatureConfig+0x15c>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	0019      	movs	r1, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ba:	2380      	movs	r3, #128	; 0x80
 80065bc:	035b      	lsls	r3, r3, #13
 80065be:	429a      	cmp	r2, r3
 80065c0:	d10b      	bne.n	80065da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a15      	ldr	r2, [pc, #84]	; (8006620 <UART_AdvFeatureConfig+0x160>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	0019      	movs	r1, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	2280      	movs	r2, #128	; 0x80
 80065e0:	4013      	ands	r3, r2
 80065e2:	d00b      	beq.n	80065fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <UART_AdvFeatureConfig+0x164>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	0019      	movs	r1, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }
}
 80065fc:	46c0      	nop			; (mov r8, r8)
 80065fe:	46bd      	mov	sp, r7
 8006600:	b002      	add	sp, #8
 8006602:	bd80      	pop	{r7, pc}
 8006604:	fffdffff 	.word	0xfffdffff
 8006608:	fffeffff 	.word	0xfffeffff
 800660c:	fffbffff 	.word	0xfffbffff
 8006610:	ffff7fff 	.word	0xffff7fff
 8006614:	ffffefff 	.word	0xffffefff
 8006618:	ffffdfff 	.word	0xffffdfff
 800661c:	ffefffff 	.word	0xffefffff
 8006620:	ff9fffff 	.word	0xff9fffff
 8006624:	fff7ffff 	.word	0xfff7ffff

08006628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af02      	add	r7, sp, #8
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	228c      	movs	r2, #140	; 0x8c
 8006634:	2100      	movs	r1, #0
 8006636:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006638:	f7fa fda4 	bl	8001184 <HAL_GetTick>
 800663c:	0003      	movs	r3, r0
 800663e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2208      	movs	r2, #8
 8006648:	4013      	ands	r3, r2
 800664a:	2b08      	cmp	r3, #8
 800664c:	d10c      	bne.n	8006668 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	0391      	lsls	r1, r2, #14
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <UART_CheckIdleState+0x90>)
 8006658:	9200      	str	r2, [sp, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	f000 f82e 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 8006660:	1e03      	subs	r3, r0, #0
 8006662:	d001      	beq.n	8006668 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e023      	b.n	80066b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2204      	movs	r2, #4
 8006670:	4013      	ands	r3, r2
 8006672:	2b04      	cmp	r3, #4
 8006674:	d10c      	bne.n	8006690 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2280      	movs	r2, #128	; 0x80
 800667a:	03d1      	lsls	r1, r2, #15
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4a0e      	ldr	r2, [pc, #56]	; (80066b8 <UART_CheckIdleState+0x90>)
 8006680:	9200      	str	r2, [sp, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	f000 f81a 	bl	80066bc <UART_WaitOnFlagUntilTimeout>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d001      	beq.n	8006690 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e00f      	b.n	80066b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2284      	movs	r2, #132	; 0x84
 8006694:	2120      	movs	r1, #32
 8006696:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2288      	movs	r2, #136	; 0x88
 800669c:	2120      	movs	r1, #32
 800669e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2280      	movs	r2, #128	; 0x80
 80066aa:	2100      	movs	r1, #0
 80066ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b004      	add	sp, #16
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	01ffffff 	.word	0x01ffffff

080066bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	1dfb      	adds	r3, r7, #7
 80066ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066cc:	e062      	b.n	8006794 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3301      	adds	r3, #1
 80066d2:	d05f      	beq.n	8006794 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fa fd56 	bl	8001184 <HAL_GetTick>
 80066d8:	0002      	movs	r2, r0
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11d      	bne.n	8006726 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4931      	ldr	r1, [pc, #196]	; (80067bc <UART_WaitOnFlagUntilTimeout+0x100>)
 80066f6:	400a      	ands	r2, r1
 80066f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2101      	movs	r1, #1
 8006706:	438a      	bics	r2, r1
 8006708:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2284      	movs	r2, #132	; 0x84
 800670e:	2120      	movs	r1, #32
 8006710:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2288      	movs	r2, #136	; 0x88
 8006716:	2120      	movs	r1, #32
 8006718:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2280      	movs	r2, #128	; 0x80
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e046      	b.n	80067b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2204      	movs	r2, #4
 800672e:	4013      	ands	r3, r2
 8006730:	d030      	beq.n	8006794 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	401a      	ands	r2, r3
 800673e:	2380      	movs	r3, #128	; 0x80
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	429a      	cmp	r2, r3
 8006744:	d126      	bne.n	8006794 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2280      	movs	r2, #128	; 0x80
 800674c:	0112      	lsls	r2, r2, #4
 800674e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4918      	ldr	r1, [pc, #96]	; (80067bc <UART_WaitOnFlagUntilTimeout+0x100>)
 800675c:	400a      	ands	r2, r1
 800675e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2101      	movs	r1, #1
 800676c:	438a      	bics	r2, r1
 800676e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2284      	movs	r2, #132	; 0x84
 8006774:	2120      	movs	r1, #32
 8006776:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2288      	movs	r2, #136	; 0x88
 800677c:	2120      	movs	r1, #32
 800677e:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	228c      	movs	r2, #140	; 0x8c
 8006784:	2120      	movs	r1, #32
 8006786:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2280      	movs	r2, #128	; 0x80
 800678c:	2100      	movs	r1, #0
 800678e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e00f      	b.n	80067b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4013      	ands	r3, r2
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	425a      	negs	r2, r3
 80067a4:	4153      	adcs	r3, r2
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	001a      	movs	r2, r3
 80067aa:	1dfb      	adds	r3, r7, #7
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d08d      	beq.n	80066ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b004      	add	sp, #16
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	fffffe5f 	.word	0xfffffe5f

080067c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4912      	ldr	r1, [pc, #72]	; (800681c <UART_EndRxTransfer+0x5c>)
 80067d4:	400a      	ands	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	490f      	ldr	r1, [pc, #60]	; (8006820 <UART_EndRxTransfer+0x60>)
 80067e4:	400a      	ands	r2, r1
 80067e6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d107      	bne.n	8006800 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2110      	movs	r1, #16
 80067fc:	438a      	bics	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2288      	movs	r2, #136	; 0x88
 8006804:	2120      	movs	r1, #32
 8006806:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}
 800681c:	fffffedf 	.word	0xfffffedf
 8006820:	effffffe 	.word	0xeffffffe

08006824 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	225e      	movs	r2, #94	; 0x5e
 8006836:	2100      	movs	r1, #0
 8006838:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2256      	movs	r2, #86	; 0x56
 800683e:	2100      	movs	r1, #0
 8006840:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	0018      	movs	r0, r3
 8006846:	f7ff faa1 	bl	8005d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b004      	add	sp, #16
 8006850:	bd80      	pop	{r7, pc}

08006852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2140      	movs	r1, #64	; 0x40
 8006866:	438a      	bics	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2284      	movs	r2, #132	; 0x84
 800686e:	2120      	movs	r1, #32
 8006870:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0018      	movs	r0, r3
 800687c:	f7ff fa7e 	bl	8005d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006880:	46c0      	nop			; (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b002      	add	sp, #8
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006890:	46c0      	nop			; (mov r8, r8)
 8006892:	46bd      	mov	sp, r7
 8006894:	b002      	add	sp, #8
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068a0:	46c0      	nop			; (mov r8, r8)
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b002      	add	sp, #8
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068b0:	46c0      	nop			; (mov r8, r8)
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b002      	add	sp, #8
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	5c9b      	ldrb	r3, [r3, r2]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_UARTEx_DisableFifoMode+0x16>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e027      	b.n	800691e <HAL_UARTEx_DisableFifoMode+0x66>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2280      	movs	r2, #128	; 0x80
 80068d2:	2101      	movs	r1, #1
 80068d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2284      	movs	r2, #132	; 0x84
 80068da:	2124      	movs	r1, #36	; 0x24
 80068dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2101      	movs	r1, #1
 80068f2:	438a      	bics	r2, r1
 80068f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a0b      	ldr	r2, [pc, #44]	; (8006928 <HAL_UARTEx_DisableFifoMode+0x70>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2284      	movs	r2, #132	; 0x84
 8006910:	2120      	movs	r1, #32
 8006912:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2280      	movs	r2, #128	; 0x80
 8006918:	2100      	movs	r1, #0
 800691a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b004      	add	sp, #16
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	dfffffff 	.word	0xdfffffff

0800692c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2280      	movs	r2, #128	; 0x80
 800693a:	5c9b      	ldrb	r3, [r3, r2]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006940:	2302      	movs	r3, #2
 8006942:	e02e      	b.n	80069a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2280      	movs	r2, #128	; 0x80
 8006948:	2101      	movs	r1, #1
 800694a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2284      	movs	r2, #132	; 0x84
 8006950:	2124      	movs	r1, #36	; 0x24
 8006952:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2101      	movs	r1, #1
 8006968:	438a      	bics	r2, r1
 800696a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	08d9      	lsrs	r1, r3, #3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0018      	movs	r0, r3
 8006984:	f000 f854 	bl	8006a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2284      	movs	r2, #132	; 0x84
 8006994:	2120      	movs	r1, #32
 8006996:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2280      	movs	r2, #128	; 0x80
 800699c:	2100      	movs	r1, #0
 800699e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b004      	add	sp, #16
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2280      	movs	r2, #128	; 0x80
 80069ba:	5c9b      	ldrb	r3, [r3, r2]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e02f      	b.n	8006a24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	2101      	movs	r1, #1
 80069ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2284      	movs	r2, #132	; 0x84
 80069d0:	2124      	movs	r1, #36	; 0x24
 80069d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2101      	movs	r1, #1
 80069e8:	438a      	bics	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	4a0e      	ldr	r2, [pc, #56]	; (8006a2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	0019      	movs	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	0018      	movs	r0, r3
 8006a06:	f000 f813 	bl	8006a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2284      	movs	r2, #132	; 0x84
 8006a16:	2120      	movs	r1, #32
 8006a18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2280      	movs	r2, #128	; 0x80
 8006a1e:	2100      	movs	r1, #0
 8006a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	0018      	movs	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b004      	add	sp, #16
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	f1ffffff 	.word	0xf1ffffff

08006a30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a38:	2314      	movs	r3, #20
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <UARTEx_SetNbDataToProcess+0xcc>)
 8006a3e:	ca03      	ldmia	r2!, {r0, r1}
 8006a40:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a42:	230c      	movs	r3, #12
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	4a2e      	ldr	r2, [pc, #184]	; (8006b00 <UARTEx_SetNbDataToProcess+0xd0>)
 8006a48:	ca03      	ldmia	r2!, {r0, r1}
 8006a4a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d108      	bne.n	8006a66 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	226a      	movs	r2, #106	; 0x6a
 8006a58:	2101      	movs	r1, #1
 8006a5a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2268      	movs	r2, #104	; 0x68
 8006a60:	2101      	movs	r1, #1
 8006a62:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a64:	e046      	b.n	8006af4 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a66:	261f      	movs	r6, #31
 8006a68:	19bb      	adds	r3, r7, r6
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a6e:	201e      	movs	r0, #30
 8006a70:	183b      	adds	r3, r7, r0
 8006a72:	2208      	movs	r2, #8
 8006a74:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	0e5b      	lsrs	r3, r3, #25
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	241d      	movs	r4, #29
 8006a82:	193b      	adds	r3, r7, r4
 8006a84:	2107      	movs	r1, #7
 8006a86:	400a      	ands	r2, r1
 8006a88:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	0f5b      	lsrs	r3, r3, #29
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	251c      	movs	r5, #28
 8006a96:	197b      	adds	r3, r7, r5
 8006a98:	2107      	movs	r1, #7
 8006a9a:	400a      	ands	r2, r1
 8006a9c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a9e:	183b      	adds	r3, r7, r0
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	197a      	adds	r2, r7, r5
 8006aa4:	7812      	ldrb	r2, [r2, #0]
 8006aa6:	2114      	movs	r1, #20
 8006aa8:	1879      	adds	r1, r7, r1
 8006aaa:	5c8a      	ldrb	r2, [r1, r2]
 8006aac:	435a      	muls	r2, r3
 8006aae:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ab0:	197b      	adds	r3, r7, r5
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	250c      	movs	r5, #12
 8006ab6:	197a      	adds	r2, r7, r5
 8006ab8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aba:	0019      	movs	r1, r3
 8006abc:	f7f9 fbae 	bl	800021c <__divsi3>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	b299      	uxth	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	226a      	movs	r2, #106	; 0x6a
 8006ac8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aca:	19bb      	adds	r3, r7, r6
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	193a      	adds	r2, r7, r4
 8006ad0:	7812      	ldrb	r2, [r2, #0]
 8006ad2:	2114      	movs	r1, #20
 8006ad4:	1879      	adds	r1, r7, r1
 8006ad6:	5c8a      	ldrb	r2, [r1, r2]
 8006ad8:	435a      	muls	r2, r3
 8006ada:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006adc:	193b      	adds	r3, r7, r4
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	197a      	adds	r2, r7, r5
 8006ae2:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	f7f9 fb99 	bl	800021c <__divsi3>
 8006aea:	0003      	movs	r3, r0
 8006aec:	b299      	uxth	r1, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2268      	movs	r2, #104	; 0x68
 8006af2:	5299      	strh	r1, [r3, r2]
}
 8006af4:	46c0      	nop			; (mov r8, r8)
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b009      	add	sp, #36	; 0x24
 8006afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afc:	0800d9c4 	.word	0x0800d9c4
 8006b00:	0800d9cc 	.word	0x0800d9cc

08006b04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <USB_EnableGlobalInt+0x24>)
 8006b14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b004      	add	sp, #16
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	0000bf80 	.word	0x0000bf80

08006b2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b34:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <USB_DisableGlobalInt+0x24>)
 8006b36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	43d2      	mvns	r2, r2
 8006b40:	401a      	ands	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	0018      	movs	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b004      	add	sp, #16
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	0000bf80 	.word	0x0000bf80

08006b54 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	000a      	movs	r2, r1
 8006b5e:	1cfb      	adds	r3, r7, #3
 8006b60:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8006b62:	1cfb      	adds	r3, r7, #3
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	085a      	lsrs	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	641a      	str	r2, [r3, #64]	; 0x40
 8006b76:	e006      	b.n	8006b86 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	0612      	lsls	r2, r2, #24
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b002      	add	sp, #8
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8006b90:	b084      	sub	sp, #16
 8006b92:	b590      	push	{r4, r7, lr}
 8006b94:	46c6      	mov	lr, r8
 8006b96:	b500      	push	{lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	2004      	movs	r0, #4
 8006ba0:	2410      	movs	r4, #16
 8006ba2:	46a4      	mov	ip, r4
 8006ba4:	2408      	movs	r4, #8
 8006ba6:	46a0      	mov	r8, r4
 8006ba8:	44b8      	add	r8, r7
 8006baa:	44c4      	add	ip, r8
 8006bac:	4460      	add	r0, ip
 8006bae:	6001      	str	r1, [r0, #0]
 8006bb0:	6042      	str	r2, [r0, #4]
 8006bb2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4393      	bics	r3, r2
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2100      	movs	r1, #0
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f7ff ffc1 	bl	8006b54 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	0018      	movs	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	b002      	add	sp, #8
 8006be0:	bc80      	pop	{r7}
 8006be2:	46b8      	mov	r8, r7
 8006be4:	bc90      	pop	{r4, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	b004      	add	sp, #16
 8006bea:	4718      	bx	r3

08006bec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b09c      	sub	sp, #112	; 0x70
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bf6:	236f      	movs	r3, #111	; 0x6f
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	18d3      	adds	r3, r2, r3
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4aca      	ldr	r2, [pc, #808]	; (8006f34 <USB_ActivateEndpoint+0x348>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* initialize Endpoint */
  switch (ep->type)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	78db      	ldrb	r3, [r3, #3]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d00e      	beq.n	8006c36 <USB_ActivateEndpoint+0x4a>
 8006c18:	dc19      	bgt.n	8006c4e <USB_ActivateEndpoint+0x62>
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d01c      	beq.n	8006c58 <USB_ActivateEndpoint+0x6c>
 8006c1e:	dc16      	bgt.n	8006c4e <USB_ActivateEndpoint+0x62>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <USB_ActivateEndpoint+0x3e>
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d00c      	beq.n	8006c42 <USB_ActivateEndpoint+0x56>
 8006c28:	e011      	b.n	8006c4e <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c2c:	2280      	movs	r2, #128	; 0x80
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	4313      	orrs	r3, r2
 8006c32:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006c34:	e011      	b.n	8006c5a <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c38:	22c0      	movs	r2, #192	; 0xc0
 8006c3a:	00d2      	lsls	r2, r2, #3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006c40:	e00b      	b.n	8006c5a <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c44:	2280      	movs	r2, #128	; 0x80
 8006c46:	00d2      	lsls	r2, r2, #3
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006c4c:	e005      	b.n	8006c5a <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8006c4e:	236f      	movs	r3, #111	; 0x6f
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
      break;
 8006c56:	e000      	b.n	8006c5a <USB_ActivateEndpoint+0x6e>
      break;
 8006c58:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	18d3      	adds	r3, r2, r3
 8006c64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c66:	49b4      	ldr	r1, [pc, #720]	; (8006f38 <USB_ActivateEndpoint+0x34c>)
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	18d3      	adds	r3, r2, r3
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4ab0      	ldr	r2, [pc, #704]	; (8006f3c <USB_ActivateEndpoint+0x350>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	663b      	str	r3, [r7, #96]	; 0x60
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	18d3      	adds	r3, r2, r3
 8006c8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c90:	49a9      	ldr	r1, [pc, #676]	; (8006f38 <USB_ActivateEndpoint+0x34c>)
 8006c92:	430a      	orrs	r2, r1
 8006c94:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	7a9b      	ldrb	r3, [r3, #10]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d000      	beq.n	8006ca0 <USB_ActivateEndpoint+0xb4>
 8006c9e:	e15b      	b.n	8006f58 <USB_ActivateEndpoint+0x36c>
  {
    if (ep->is_in != 0U)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d06e      	beq.n	8006d86 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	4aa4      	ldr	r2, [pc, #656]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006cb0:	4694      	mov	ip, r2
 8006cb2:	4463      	add	r3, ip
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	49a0      	ldr	r1, [pc, #640]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006cbe:	468c      	mov	ip, r1
 8006cc0:	4463      	add	r3, ip
 8006cc2:	0c12      	lsrs	r2, r2, #16
 8006cc4:	0412      	lsls	r2, r2, #16
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4a9c      	ldr	r2, [pc, #624]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006cd0:	4694      	mov	ip, r2
 8006cd2:	4463      	add	r3, ip
 8006cd4:	6819      	ldr	r1, [r3, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	889b      	ldrh	r3, [r3, #4]
 8006cda:	089b      	lsrs	r3, r3, #2
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	009a      	lsls	r2, r3, #2
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4896      	ldr	r0, [pc, #600]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006ce8:	4684      	mov	ip, r0
 8006cea:	4463      	add	r3, ip
 8006cec:	430a      	orrs	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2240      	movs	r2, #64	; 0x40
 8006d02:	4013      	ands	r3, r2
 8006d04:	d011      	beq.n	8006d2a <USB_ActivateEndpoint+0x13e>
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	18d3      	adds	r3, r2, r3
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a8a      	ldr	r2, [pc, #552]	; (8006f3c <USB_ActivateEndpoint+0x350>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	18d3      	adds	r3, r2, r3
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4987      	ldr	r1, [pc, #540]	; (8006f44 <USB_ActivateEndpoint+0x358>)
 8006d26:	430a      	orrs	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	78db      	ldrb	r3, [r3, #3]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d016      	beq.n	8006d60 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	18d3      	adds	r3, r2, r3
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a82      	ldr	r2, [pc, #520]	; (8006f48 <USB_ActivateEndpoint+0x35c>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	4053      	eors	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	18d3      	adds	r3, r2, r3
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4977      	ldr	r1, [pc, #476]	; (8006f38 <USB_ActivateEndpoint+0x34c>)
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e23d      	b.n	80071dc <USB_ActivateEndpoint+0x5f0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18d3      	adds	r3, r2, r3
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a76      	ldr	r2, [pc, #472]	; (8006f48 <USB_ActivateEndpoint+0x35c>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	18d3      	adds	r3, r2, r3
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	496e      	ldr	r1, [pc, #440]	; (8006f38 <USB_ActivateEndpoint+0x34c>)
 8006d80:	430a      	orrs	r2, r1
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	e22a      	b.n	80071dc <USB_ActivateEndpoint+0x5f0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4a6c      	ldr	r2, [pc, #432]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006d8e:	4694      	mov	ip, r2
 8006d90:	4463      	add	r3, ip
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4969      	ldr	r1, [pc, #420]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006d9c:	468c      	mov	ip, r1
 8006d9e:	4463      	add	r3, ip
 8006da0:	0c12      	lsrs	r2, r2, #16
 8006da2:	0412      	lsls	r2, r2, #16
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4a64      	ldr	r2, [pc, #400]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006dae:	4694      	mov	ip, r2
 8006db0:	4463      	add	r3, ip
 8006db2:	6859      	ldr	r1, [r3, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	889b      	ldrh	r3, [r3, #4]
 8006db8:	089b      	lsrs	r3, r3, #2
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	009a      	lsls	r2, r3, #2
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	485e      	ldr	r0, [pc, #376]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006dc6:	4684      	mov	ip, r0
 8006dc8:	4463      	add	r3, ip
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4a5a      	ldr	r2, [pc, #360]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006dd6:	4694      	mov	ip, r2
 8006dd8:	4463      	add	r3, ip
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	4957      	ldr	r1, [pc, #348]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006de4:	468c      	mov	ip, r1
 8006de6:	4463      	add	r3, ip
 8006de8:	0412      	lsls	r2, r2, #16
 8006dea:	0c12      	lsrs	r2, r2, #16
 8006dec:	605a      	str	r2, [r3, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d121      	bne.n	8006e3a <USB_ActivateEndpoint+0x24e>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4a50      	ldr	r2, [pc, #320]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006dfe:	4694      	mov	ip, r2
 8006e00:	4463      	add	r3, ip
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	494d      	ldr	r1, [pc, #308]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006e0c:	468c      	mov	ip, r1
 8006e0e:	4463      	add	r3, ip
 8006e10:	494e      	ldr	r1, [pc, #312]	; (8006f4c <USB_ActivateEndpoint+0x360>)
 8006e12:	400a      	ands	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4a48      	ldr	r2, [pc, #288]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006e1e:	4694      	mov	ip, r2
 8006e20:	4463      	add	r3, ip
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4945      	ldr	r1, [pc, #276]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006e2c:	468c      	mov	ip, r1
 8006e2e:	4463      	add	r3, ip
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	0609      	lsls	r1, r1, #24
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
 8006e38:	e041      	b.n	8006ebe <USB_ActivateEndpoint+0x2d2>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e40:	d81d      	bhi.n	8006e7e <USB_ActivateEndpoint+0x292>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	667b      	str	r3, [r7, #100]	; 0x64
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	4013      	ands	r3, r2
 8006e52:	d002      	beq.n	8006e5a <USB_ActivateEndpoint+0x26e>
 8006e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e56:	3301      	adds	r3, #1
 8006e58:	667b      	str	r3, [r7, #100]	; 0x64
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4a37      	ldr	r2, [pc, #220]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006e62:	4694      	mov	ip, r2
 8006e64:	4463      	add	r3, ip
 8006e66:	6859      	ldr	r1, [r3, #4]
 8006e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e6a:	069a      	lsls	r2, r3, #26
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	4833      	ldr	r0, [pc, #204]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006e74:	4684      	mov	ip, r0
 8006e76:	4463      	add	r3, ip
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
 8006e7c:	e01f      	b.n	8006ebe <USB_ActivateEndpoint+0x2d2>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	667b      	str	r3, [r7, #100]	; 0x64
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	221f      	movs	r2, #31
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d102      	bne.n	8006e96 <USB_ActivateEndpoint+0x2aa>
 8006e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e92:	3b01      	subs	r3, #1
 8006e94:	667b      	str	r3, [r7, #100]	; 0x64
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	4a28      	ldr	r2, [pc, #160]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006e9e:	4694      	mov	ip, r2
 8006ea0:	4463      	add	r3, ip
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ea6:	069b      	lsls	r3, r3, #26
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4923      	ldr	r1, [pc, #140]	; (8006f40 <USB_ActivateEndpoint+0x354>)
 8006eb2:	468c      	mov	ip, r1
 8006eb4:	4463      	add	r3, ip
 8006eb6:	2180      	movs	r1, #128	; 0x80
 8006eb8:	0609      	lsls	r1, r1, #24
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	18d3      	adds	r3, r2, r3
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ece:	2380      	movs	r3, #128	; 0x80
 8006ed0:	01db      	lsls	r3, r3, #7
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d011      	beq.n	8006efa <USB_ActivateEndpoint+0x30e>
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	18d3      	adds	r3, r2, r3
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <USB_ActivateEndpoint+0x350>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	18d3      	adds	r3, r2, r3
 8006ef2:	6a3a      	ldr	r2, [r7, #32]
 8006ef4:	4916      	ldr	r1, [pc, #88]	; (8006f50 <USB_ActivateEndpoint+0x364>)
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	18d3      	adds	r3, r2, r3
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <USB_ActivateEndpoint+0x368>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	2280      	movs	r2, #128	; 0x80
 8006f10:	0152      	lsls	r2, r2, #5
 8006f12:	4053      	eors	r3, r2
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	2280      	movs	r2, #128	; 0x80
 8006f1a:	0192      	lsls	r2, r2, #6
 8006f1c:	4053      	eors	r3, r2
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	18d3      	adds	r3, r2, r3
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	4902      	ldr	r1, [pc, #8]	; (8006f38 <USB_ActivateEndpoint+0x34c>)
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e153      	b.n	80071dc <USB_ActivateEndpoint+0x5f0>
 8006f34:	077f898f 	.word	0x077f898f
 8006f38:	00008080 	.word	0x00008080
 8006f3c:	077f8f8f 	.word	0x077f8f8f
 8006f40:	40009800 	.word	0x40009800
 8006f44:	000080c0 	.word	0x000080c0
 8006f48:	077f8fbf 	.word	0x077f8fbf
 8006f4c:	83ffffff 	.word	0x83ffffff
 8006f50:	0000c080 	.word	0x0000c080
 8006f54:	077fbf8f 	.word	0x077fbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	18d3      	adds	r3, r2, r3
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4aa1      	ldr	r2, [pc, #644]	; (80071ec <USB_ActivateEndpoint+0x600>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	18d3      	adds	r3, r2, r3
 8006f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f76:	499e      	ldr	r1, [pc, #632]	; (80071f0 <USB_ActivateEndpoint+0x604>)
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	4a9c      	ldr	r2, [pc, #624]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8006f84:	4694      	mov	ip, r2
 8006f86:	4463      	add	r3, ip
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4998      	ldr	r1, [pc, #608]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8006f92:	468c      	mov	ip, r1
 8006f94:	4463      	add	r3, ip
 8006f96:	0c12      	lsrs	r2, r2, #16
 8006f98:	0412      	lsls	r2, r2, #16
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4a94      	ldr	r2, [pc, #592]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8006fa4:	4694      	mov	ip, r2
 8006fa6:	4463      	add	r3, ip
 8006fa8:	6819      	ldr	r1, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	089b      	lsrs	r3, r3, #2
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	009a      	lsls	r2, r3, #2
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	488e      	ldr	r0, [pc, #568]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8006fbc:	4684      	mov	ip, r0
 8006fbe:	4463      	add	r3, ip
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	4a8a      	ldr	r2, [pc, #552]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8006fcc:	4694      	mov	ip, r2
 8006fce:	4463      	add	r3, ip
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4986      	ldr	r1, [pc, #536]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8006fda:	468c      	mov	ip, r1
 8006fdc:	4463      	add	r3, ip
 8006fde:	0c12      	lsrs	r2, r2, #16
 8006fe0:	0412      	lsls	r2, r2, #16
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	4a82      	ldr	r2, [pc, #520]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8006fec:	4694      	mov	ip, r2
 8006fee:	4463      	add	r3, ip
 8006ff0:	6859      	ldr	r1, [r3, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	891b      	ldrh	r3, [r3, #8]
 8006ff6:	089b      	lsrs	r3, r3, #2
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	009a      	lsls	r2, r3, #2
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	487c      	ldr	r0, [pc, #496]	; (80071f4 <USB_ActivateEndpoint+0x608>)
 8007004:	4684      	mov	ip, r0
 8007006:	4463      	add	r3, ip
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d169      	bne.n	80070e8 <USB_ActivateEndpoint+0x4fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	18d3      	adds	r3, r2, r3
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	01db      	lsls	r3, r3, #7
 8007028:	4013      	ands	r3, r2
 800702a:	d011      	beq.n	8007050 <USB_ActivateEndpoint+0x464>
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	18d3      	adds	r3, r2, r3
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6c      	ldr	r2, [pc, #432]	; (80071ec <USB_ActivateEndpoint+0x600>)
 800703a:	4013      	ands	r3, r2
 800703c:	63bb      	str	r3, [r7, #56]	; 0x38
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	18d3      	adds	r3, r2, r3
 8007048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800704a:	496b      	ldr	r1, [pc, #428]	; (80071f8 <USB_ActivateEndpoint+0x60c>)
 800704c:	430a      	orrs	r2, r1
 800704e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	18d3      	adds	r3, r2, r3
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	2240      	movs	r2, #64	; 0x40
 8007062:	4013      	ands	r3, r2
 8007064:	d011      	beq.n	800708a <USB_ActivateEndpoint+0x49e>
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	18d3      	adds	r3, r2, r3
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a5e      	ldr	r2, [pc, #376]	; (80071ec <USB_ActivateEndpoint+0x600>)
 8007074:	4013      	ands	r3, r2
 8007076:	633b      	str	r3, [r7, #48]	; 0x30
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	18d3      	adds	r3, r2, r3
 8007082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007084:	495d      	ldr	r1, [pc, #372]	; (80071fc <USB_ActivateEndpoint+0x610>)
 8007086:	430a      	orrs	r2, r1
 8007088:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	18d3      	adds	r3, r2, r3
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a5a      	ldr	r2, [pc, #360]	; (8007200 <USB_ActivateEndpoint+0x614>)
 8007098:	4013      	ands	r3, r2
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	2280      	movs	r2, #128	; 0x80
 80070a0:	0152      	lsls	r2, r2, #5
 80070a2:	4053      	eors	r3, r2
 80070a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	2280      	movs	r2, #128	; 0x80
 80070aa:	0192      	lsls	r2, r2, #6
 80070ac:	4053      	eors	r3, r2
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	18d3      	adds	r3, r2, r3
 80070ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070bc:	4951      	ldr	r1, [pc, #324]	; (8007204 <USB_ActivateEndpoint+0x618>)
 80070be:	430a      	orrs	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	18d3      	adds	r3, r2, r3
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a4e      	ldr	r2, [pc, #312]	; (8007208 <USB_ActivateEndpoint+0x61c>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	18d3      	adds	r3, r2, r3
 80070de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e0:	4948      	ldr	r1, [pc, #288]	; (8007204 <USB_ActivateEndpoint+0x618>)
 80070e2:	430a      	orrs	r2, r1
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	e079      	b.n	80071dc <USB_ActivateEndpoint+0x5f0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	18d3      	adds	r3, r2, r3
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	01db      	lsls	r3, r3, #7
 80070fc:	4013      	ands	r3, r2
 80070fe:	d011      	beq.n	8007124 <USB_ActivateEndpoint+0x538>
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	18d3      	adds	r3, r2, r3
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a37      	ldr	r2, [pc, #220]	; (80071ec <USB_ActivateEndpoint+0x600>)
 800710e:	4013      	ands	r3, r2
 8007110:	657b      	str	r3, [r7, #84]	; 0x54
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	18d3      	adds	r3, r2, r3
 800711c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800711e:	4936      	ldr	r1, [pc, #216]	; (80071f8 <USB_ActivateEndpoint+0x60c>)
 8007120:	430a      	orrs	r2, r1
 8007122:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	18d3      	adds	r3, r2, r3
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	653b      	str	r3, [r7, #80]	; 0x50
 8007132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007134:	2240      	movs	r2, #64	; 0x40
 8007136:	4013      	ands	r3, r2
 8007138:	d011      	beq.n	800715e <USB_ActivateEndpoint+0x572>
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	18d3      	adds	r3, r2, r3
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a29      	ldr	r2, [pc, #164]	; (80071ec <USB_ActivateEndpoint+0x600>)
 8007148:	4013      	ands	r3, r2
 800714a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	18d3      	adds	r3, r2, r3
 8007156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007158:	4928      	ldr	r1, [pc, #160]	; (80071fc <USB_ActivateEndpoint+0x610>)
 800715a:	430a      	orrs	r2, r1
 800715c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	78db      	ldrb	r3, [r3, #3]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d016      	beq.n	8007194 <USB_ActivateEndpoint+0x5a8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	18d3      	adds	r3, r2, r3
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a25      	ldr	r2, [pc, #148]	; (8007208 <USB_ActivateEndpoint+0x61c>)
 8007174:	4013      	ands	r3, r2
 8007176:	647b      	str	r3, [r7, #68]	; 0x44
 8007178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717a:	2220      	movs	r2, #32
 800717c:	4053      	eors	r3, r2
 800717e:	647b      	str	r3, [r7, #68]	; 0x44
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	18d3      	adds	r3, r2, r3
 800718a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800718c:	491d      	ldr	r1, [pc, #116]	; (8007204 <USB_ActivateEndpoint+0x618>)
 800718e:	430a      	orrs	r2, r1
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e011      	b.n	80071b8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	18d3      	adds	r3, r2, r3
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a19      	ldr	r2, [pc, #100]	; (8007208 <USB_ActivateEndpoint+0x61c>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b2:	4914      	ldr	r1, [pc, #80]	; (8007204 <USB_ActivateEndpoint+0x618>)
 80071b4:	430a      	orrs	r2, r1
 80071b6:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	18d3      	adds	r3, r2, r3
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <USB_ActivateEndpoint+0x614>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	643b      	str	r3, [r7, #64]	; 0x40
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	18d3      	adds	r3, r2, r3
 80071d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071d6:	490b      	ldr	r1, [pc, #44]	; (8007204 <USB_ActivateEndpoint+0x618>)
 80071d8:	430a      	orrs	r2, r1
 80071da:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80071dc:	236f      	movs	r3, #111	; 0x6f
 80071de:	18fb      	adds	r3, r7, r3
 80071e0:	781b      	ldrb	r3, [r3, #0]
}
 80071e2:	0018      	movs	r0, r3
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b01c      	add	sp, #112	; 0x70
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	077f8f8f 	.word	0x077f8f8f
 80071f0:	00008180 	.word	0x00008180
 80071f4:	40009800 	.word	0x40009800
 80071f8:	0000c080 	.word	0x0000c080
 80071fc:	000080c0 	.word	0x000080c0
 8007200:	077fbf8f 	.word	0x077fbf8f
 8007204:	00008080 	.word	0x00008080
 8007208:	077f8fbf 	.word	0x077f8fbf

0800720c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b096      	sub	sp, #88	; 0x58
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	7a9b      	ldrb	r3, [r3, #10]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d164      	bne.n	80072e8 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02f      	beq.n	8007286 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	18d3      	adds	r3, r2, r3
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2240      	movs	r2, #64	; 0x40
 8007238:	4013      	ands	r3, r2
 800723a:	d011      	beq.n	8007260 <USB_DeactivateEndpoint+0x54>
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	18d3      	adds	r3, r2, r3
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a9d      	ldr	r2, [pc, #628]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 800724a:	4013      	ands	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	18d3      	adds	r3, r2, r3
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	499a      	ldr	r1, [pc, #616]	; (80074c4 <USB_DeactivateEndpoint+0x2b8>)
 800725c:	430a      	orrs	r2, r1
 800725e:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	18d3      	adds	r3, r2, r3
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a96      	ldr	r2, [pc, #600]	; (80074c8 <USB_DeactivateEndpoint+0x2bc>)
 800726e:	4013      	ands	r3, r2
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	18d3      	adds	r3, r2, r3
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	4993      	ldr	r1, [pc, #588]	; (80074cc <USB_DeactivateEndpoint+0x2c0>)
 8007280:	430a      	orrs	r2, r1
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e117      	b.n	80074b6 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	18d3      	adds	r3, r2, r3
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	2380      	movs	r3, #128	; 0x80
 8007298:	01db      	lsls	r3, r3, #7
 800729a:	4013      	ands	r3, r2
 800729c:	d011      	beq.n	80072c2 <USB_DeactivateEndpoint+0xb6>
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	18d3      	adds	r3, r2, r3
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a85      	ldr	r2, [pc, #532]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	18d3      	adds	r3, r2, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	4984      	ldr	r1, [pc, #528]	; (80074d0 <USB_DeactivateEndpoint+0x2c4>)
 80072be:	430a      	orrs	r2, r1
 80072c0:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	18d3      	adds	r3, r2, r3
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a81      	ldr	r2, [pc, #516]	; (80074d4 <USB_DeactivateEndpoint+0x2c8>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	18d3      	adds	r3, r2, r3
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	497a      	ldr	r1, [pc, #488]	; (80074cc <USB_DeactivateEndpoint+0x2c0>)
 80072e2:	430a      	orrs	r2, r1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e0e6      	b.n	80074b6 <USB_DeactivateEndpoint+0x2aa>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d171      	bne.n	80073d4 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	18d3      	adds	r3, r2, r3
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80072fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4013      	ands	r3, r2
 8007306:	d011      	beq.n	800732c <USB_DeactivateEndpoint+0x120>
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	18d3      	adds	r3, r2, r3
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a6a      	ldr	r2, [pc, #424]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 8007316:	4013      	ands	r3, r2
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	18d3      	adds	r3, r2, r3
 8007324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007326:	496a      	ldr	r1, [pc, #424]	; (80074d0 <USB_DeactivateEndpoint+0x2c4>)
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	18d3      	adds	r3, r2, r3
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	633b      	str	r3, [r7, #48]	; 0x30
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	2240      	movs	r2, #64	; 0x40
 800733e:	4013      	ands	r3, r2
 8007340:	d011      	beq.n	8007366 <USB_DeactivateEndpoint+0x15a>
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	18d3      	adds	r3, r2, r3
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a5c      	ldr	r2, [pc, #368]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 8007350:	4013      	ands	r3, r2
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	18d3      	adds	r3, r2, r3
 800735e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007360:	4958      	ldr	r1, [pc, #352]	; (80074c4 <USB_DeactivateEndpoint+0x2b8>)
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	18d3      	adds	r3, r2, r3
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a53      	ldr	r2, [pc, #332]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 8007374:	4013      	ands	r3, r2
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	18d3      	adds	r3, r2, r3
 8007382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007384:	494f      	ldr	r1, [pc, #316]	; (80074c4 <USB_DeactivateEndpoint+0x2b8>)
 8007386:	430a      	orrs	r2, r1
 8007388:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	18d3      	adds	r3, r2, r3
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a4f      	ldr	r2, [pc, #316]	; (80074d4 <USB_DeactivateEndpoint+0x2c8>)
 8007398:	4013      	ands	r3, r2
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	18d3      	adds	r3, r2, r3
 80073a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a8:	4948      	ldr	r1, [pc, #288]	; (80074cc <USB_DeactivateEndpoint+0x2c0>)
 80073aa:	430a      	orrs	r2, r1
 80073ac:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	18d3      	adds	r3, r2, r3
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a43      	ldr	r2, [pc, #268]	; (80074c8 <USB_DeactivateEndpoint+0x2bc>)
 80073bc:	4013      	ands	r3, r2
 80073be:	623b      	str	r3, [r7, #32]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	18d3      	adds	r3, r2, r3
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	493f      	ldr	r1, [pc, #252]	; (80074cc <USB_DeactivateEndpoint+0x2c0>)
 80073ce:	430a      	orrs	r2, r1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e070      	b.n	80074b6 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	18d3      	adds	r3, r2, r3
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	657b      	str	r3, [r7, #84]	; 0x54
 80073e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	01db      	lsls	r3, r3, #7
 80073e8:	4013      	ands	r3, r2
 80073ea:	d011      	beq.n	8007410 <USB_DeactivateEndpoint+0x204>
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	18d3      	adds	r3, r2, r3
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a31      	ldr	r2, [pc, #196]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	653b      	str	r3, [r7, #80]	; 0x50
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	18d3      	adds	r3, r2, r3
 8007408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800740a:	4931      	ldr	r1, [pc, #196]	; (80074d0 <USB_DeactivateEndpoint+0x2c4>)
 800740c:	430a      	orrs	r2, r1
 800740e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	18d3      	adds	r3, r2, r3
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007420:	2240      	movs	r2, #64	; 0x40
 8007422:	4013      	ands	r3, r2
 8007424:	d011      	beq.n	800744a <USB_DeactivateEndpoint+0x23e>
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	18d3      	adds	r3, r2, r3
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a23      	ldr	r2, [pc, #140]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 8007434:	4013      	ands	r3, r2
 8007436:	64bb      	str	r3, [r7, #72]	; 0x48
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	18d3      	adds	r3, r2, r3
 8007442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007444:	491f      	ldr	r1, [pc, #124]	; (80074c4 <USB_DeactivateEndpoint+0x2b8>)
 8007446:	430a      	orrs	r2, r1
 8007448:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	18d3      	adds	r3, r2, r3
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1a      	ldr	r2, [pc, #104]	; (80074c0 <USB_DeactivateEndpoint+0x2b4>)
 8007458:	4013      	ands	r3, r2
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	18d3      	adds	r3, r2, r3
 8007466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007468:	4919      	ldr	r1, [pc, #100]	; (80074d0 <USB_DeactivateEndpoint+0x2c4>)
 800746a:	430a      	orrs	r2, r1
 800746c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	18d3      	adds	r3, r2, r3
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <USB_DeactivateEndpoint+0x2bc>)
 800747c:	4013      	ands	r3, r2
 800747e:	643b      	str	r3, [r7, #64]	; 0x40
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	18d3      	adds	r3, r2, r3
 800748a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800748c:	490f      	ldr	r1, [pc, #60]	; (80074cc <USB_DeactivateEndpoint+0x2c0>)
 800748e:	430a      	orrs	r2, r1
 8007490:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	18d3      	adds	r3, r2, r3
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a0d      	ldr	r2, [pc, #52]	; (80074d4 <USB_DeactivateEndpoint+0x2c8>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	18d3      	adds	r3, r2, r3
 80074ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074b0:	4906      	ldr	r1, [pc, #24]	; (80074cc <USB_DeactivateEndpoint+0x2c0>)
 80074b2:	430a      	orrs	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	0018      	movs	r0, r3
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b016      	add	sp, #88	; 0x58
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	077f8f8f 	.word	0x077f8f8f
 80074c4:	000080c0 	.word	0x000080c0
 80074c8:	077f8fbf 	.word	0x077f8fbf
 80074cc:	00008080 	.word	0x00008080
 80074d0:	0000c080 	.word	0x0000c080
 80074d4:	077fbf8f 	.word	0x077fbf8f

080074d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b099      	sub	sp, #100	; 0x64
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d001      	beq.n	80074ee <USB_EPStartXfer+0x16>
 80074ea:	f000 fd42 	bl	8007f72 <USB_EPStartXfer+0xa9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d903      	bls.n	8007502 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007500:	e002      	b.n	8007508 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	7a9b      	ldrb	r3, [r3, #10]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d12b      	bne.n	8007568 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6959      	ldr	r1, [r3, #20]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	889a      	ldrh	r2, [r3, #4]
 8007518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751a:	b29b      	uxth	r3, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f9d7 	bl	80088d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	4ade      	ldr	r2, [pc, #888]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800752a:	4694      	mov	ip, r2
 800752c:	4463      	add	r3, ip
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	49db      	ldr	r1, [pc, #876]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007538:	468c      	mov	ip, r1
 800753a:	4463      	add	r3, ip
 800753c:	0412      	lsls	r2, r2, #16
 800753e:	0c12      	lsrs	r2, r2, #16
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	4ad6      	ldr	r2, [pc, #856]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800754a:	4694      	mov	ip, r2
 800754c:	4463      	add	r3, ip
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007552:	041a      	lsls	r2, r3, #16
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	48d2      	ldr	r0, [pc, #840]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800755c:	4684      	mov	ip, r0
 800755e:	4463      	add	r3, ip
 8007560:	430a      	orrs	r2, r1
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	f000 fce9 	bl	8007f3a <USB_EPStartXfer+0xa62>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d000      	beq.n	8007572 <USB_EPStartXfer+0x9a>
 8007570:	e35e      	b.n	8007c30 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6a1a      	ldr	r2, [r3, #32]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	429a      	cmp	r2, r3
 800757c:	d800      	bhi.n	8007580 <USB_EPStartXfer+0xa8>
 800757e:	e309      	b.n	8007b94 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	18d3      	adds	r3, r2, r3
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4ac6      	ldr	r2, [pc, #792]	; (80078a8 <USB_EPStartXfer+0x3d0>)
 800758e:	4013      	ands	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	18d3      	adds	r3, r2, r3
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	49c3      	ldr	r1, [pc, #780]	; (80078ac <USB_EPStartXfer+0x3d4>)
 80075a0:	430a      	orrs	r2, r1
 80075a2:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	6a1a      	ldr	r2, [r3, #32]
 80075a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	18d3      	adds	r3, r2, r3
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2240      	movs	r2, #64	; 0x40
 80075be:	4013      	ands	r3, r2
 80075c0:	d100      	bne.n	80075c4 <USB_EPStartXfer+0xec>
 80075c2:	e177      	b.n	80078b4 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d172      	bne.n	80076b2 <USB_EPStartXfer+0x1da>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	4ab4      	ldr	r2, [pc, #720]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80075d4:	4694      	mov	ip, r2
 80075d6:	4463      	add	r3, ip
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	49b0      	ldr	r1, [pc, #704]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80075e2:	468c      	mov	ip, r1
 80075e4:	4463      	add	r3, ip
 80075e6:	0412      	lsls	r2, r2, #16
 80075e8:	0c12      	lsrs	r2, r2, #16
 80075ea:	605a      	str	r2, [r3, #4]
 80075ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d121      	bne.n	8007636 <USB_EPStartXfer+0x15e>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	4aaa      	ldr	r2, [pc, #680]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80075fa:	4694      	mov	ip, r2
 80075fc:	4463      	add	r3, ip
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	49a7      	ldr	r1, [pc, #668]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007608:	468c      	mov	ip, r1
 800760a:	4463      	add	r3, ip
 800760c:	49a8      	ldr	r1, [pc, #672]	; (80078b0 <USB_EPStartXfer+0x3d8>)
 800760e:	400a      	ands	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4aa2      	ldr	r2, [pc, #648]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800761a:	4694      	mov	ip, r2
 800761c:	4463      	add	r3, ip
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	499f      	ldr	r1, [pc, #636]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007628:	468c      	mov	ip, r1
 800762a:	4463      	add	r3, ip
 800762c:	2180      	movs	r1, #128	; 0x80
 800762e:	0609      	lsls	r1, r1, #24
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
 8007634:	e062      	b.n	80076fc <USB_EPStartXfer+0x224>
 8007636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007638:	2b3e      	cmp	r3, #62	; 0x3e
 800763a:	d81b      	bhi.n	8007674 <USB_EPStartXfer+0x19c>
 800763c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	657b      	str	r3, [r7, #84]	; 0x54
 8007642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007644:	2201      	movs	r2, #1
 8007646:	4013      	ands	r3, r2
 8007648:	d002      	beq.n	8007650 <USB_EPStartXfer+0x178>
 800764a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800764c:	3301      	adds	r3, #1
 800764e:	657b      	str	r3, [r7, #84]	; 0x54
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4a93      	ldr	r2, [pc, #588]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007658:	4694      	mov	ip, r2
 800765a:	4463      	add	r3, ip
 800765c:	6859      	ldr	r1, [r3, #4]
 800765e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007660:	069a      	lsls	r2, r3, #26
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	488e      	ldr	r0, [pc, #568]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800766a:	4684      	mov	ip, r0
 800766c:	4463      	add	r3, ip
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	e043      	b.n	80076fc <USB_EPStartXfer+0x224>
 8007674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	657b      	str	r3, [r7, #84]	; 0x54
 800767a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767c:	221f      	movs	r2, #31
 800767e:	4013      	ands	r3, r2
 8007680:	d102      	bne.n	8007688 <USB_EPStartXfer+0x1b0>
 8007682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007684:	3b01      	subs	r3, #1
 8007686:	657b      	str	r3, [r7, #84]	; 0x54
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	4a85      	ldr	r2, [pc, #532]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007690:	4694      	mov	ip, r2
 8007692:	4463      	add	r3, ip
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007698:	069b      	lsls	r3, r3, #26
 800769a:	431a      	orrs	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	4980      	ldr	r1, [pc, #512]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80076a4:	468c      	mov	ip, r1
 80076a6:	4463      	add	r3, ip
 80076a8:	2180      	movs	r1, #128	; 0x80
 80076aa:	0609      	lsls	r1, r1, #24
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
 80076b0:	e024      	b.n	80076fc <USB_EPStartXfer+0x224>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d120      	bne.n	80076fc <USB_EPStartXfer+0x224>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	4a78      	ldr	r2, [pc, #480]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80076c2:	4694      	mov	ip, r2
 80076c4:	4463      	add	r3, ip
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	4975      	ldr	r1, [pc, #468]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80076d0:	468c      	mov	ip, r1
 80076d2:	4463      	add	r3, ip
 80076d4:	0412      	lsls	r2, r2, #16
 80076d6:	0c12      	lsrs	r2, r2, #16
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	4a70      	ldr	r2, [pc, #448]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80076e2:	4694      	mov	ip, r2
 80076e4:	4463      	add	r3, ip
 80076e6:	6859      	ldr	r1, [r3, #4]
 80076e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ea:	041a      	lsls	r2, r3, #16
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	486c      	ldr	r0, [pc, #432]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80076f4:	4684      	mov	ip, r0
 80076f6:	4463      	add	r3, ip
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80076fc:	205a      	movs	r0, #90	; 0x5a
 80076fe:	183b      	adds	r3, r7, r0
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	8912      	ldrh	r2, [r2, #8]
 8007704:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800770c:	b29c      	uxth	r4, r3
 800770e:	183b      	adds	r3, r7, r0
 8007710:	881a      	ldrh	r2, [r3, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	0023      	movs	r3, r4
 8007716:	f001 f8db 	bl	80088d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	695a      	ldr	r2, [r3, #20]
 800771e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007720:	18d2      	adds	r2, r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	d906      	bls.n	8007740 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007738:	1ad2      	subs	r2, r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	621a      	str	r2, [r3, #32]
 800773e:	e005      	b.n	800774c <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	65fb      	str	r3, [r7, #92]	; 0x5c
              ep->xfer_len_db = 0U;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2200      	movs	r2, #0
 800774a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d172      	bne.n	800783a <USB_EPStartXfer+0x362>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	4a52      	ldr	r2, [pc, #328]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800775c:	4694      	mov	ip, r2
 800775e:	4463      	add	r3, ip
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	494e      	ldr	r1, [pc, #312]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800776a:	468c      	mov	ip, r1
 800776c:	4463      	add	r3, ip
 800776e:	0412      	lsls	r2, r2, #16
 8007770:	0c12      	lsrs	r2, r2, #16
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d121      	bne.n	80077be <USB_EPStartXfer+0x2e6>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4a48      	ldr	r2, [pc, #288]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007782:	4694      	mov	ip, r2
 8007784:	4463      	add	r3, ip
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4945      	ldr	r1, [pc, #276]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007790:	468c      	mov	ip, r1
 8007792:	4463      	add	r3, ip
 8007794:	4946      	ldr	r1, [pc, #280]	; (80078b0 <USB_EPStartXfer+0x3d8>)
 8007796:	400a      	ands	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4a40      	ldr	r2, [pc, #256]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80077a2:	4694      	mov	ip, r2
 80077a4:	4463      	add	r3, ip
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	493d      	ldr	r1, [pc, #244]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80077b0:	468c      	mov	ip, r1
 80077b2:	4463      	add	r3, ip
 80077b4:	2180      	movs	r1, #128	; 0x80
 80077b6:	0609      	lsls	r1, r1, #24
 80077b8:	430a      	orrs	r2, r1
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	e062      	b.n	8007884 <USB_EPStartXfer+0x3ac>
 80077be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c0:	2b3e      	cmp	r3, #62	; 0x3e
 80077c2:	d81b      	bhi.n	80077fc <USB_EPStartXfer+0x324>
 80077c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	653b      	str	r3, [r7, #80]	; 0x50
 80077ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077cc:	2201      	movs	r2, #1
 80077ce:	4013      	ands	r3, r2
 80077d0:	d002      	beq.n	80077d8 <USB_EPStartXfer+0x300>
 80077d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d4:	3301      	adds	r3, #1
 80077d6:	653b      	str	r3, [r7, #80]	; 0x50
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	4a31      	ldr	r2, [pc, #196]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80077e0:	4694      	mov	ip, r2
 80077e2:	4463      	add	r3, ip
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e8:	069a      	lsls	r2, r3, #26
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	482c      	ldr	r0, [pc, #176]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 80077f2:	4684      	mov	ip, r0
 80077f4:	4463      	add	r3, ip
 80077f6:	430a      	orrs	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	e043      	b.n	8007884 <USB_EPStartXfer+0x3ac>
 80077fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	653b      	str	r3, [r7, #80]	; 0x50
 8007802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007804:	221f      	movs	r2, #31
 8007806:	4013      	ands	r3, r2
 8007808:	d102      	bne.n	8007810 <USB_EPStartXfer+0x338>
 800780a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800780c:	3b01      	subs	r3, #1
 800780e:	653b      	str	r3, [r7, #80]	; 0x50
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	4a23      	ldr	r2, [pc, #140]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007818:	4694      	mov	ip, r2
 800781a:	4463      	add	r3, ip
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007820:	069b      	lsls	r3, r3, #26
 8007822:	431a      	orrs	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	491e      	ldr	r1, [pc, #120]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800782c:	468c      	mov	ip, r1
 800782e:	4463      	add	r3, ip
 8007830:	2180      	movs	r1, #128	; 0x80
 8007832:	0609      	lsls	r1, r1, #24
 8007834:	430a      	orrs	r2, r1
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	e024      	b.n	8007884 <USB_EPStartXfer+0x3ac>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d120      	bne.n	8007884 <USB_EPStartXfer+0x3ac>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	4a16      	ldr	r2, [pc, #88]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800784a:	4694      	mov	ip, r2
 800784c:	4463      	add	r3, ip
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	4913      	ldr	r1, [pc, #76]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 8007858:	468c      	mov	ip, r1
 800785a:	4463      	add	r3, ip
 800785c:	0412      	lsls	r2, r2, #16
 800785e:	0c12      	lsrs	r2, r2, #16
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800786a:	4694      	mov	ip, r2
 800786c:	4463      	add	r3, ip
 800786e:	6819      	ldr	r1, [r3, #0]
 8007870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007872:	041a      	lsls	r2, r3, #16
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	480a      	ldr	r0, [pc, #40]	; (80078a4 <USB_EPStartXfer+0x3cc>)
 800787c:	4684      	mov	ip, r0
 800787e:	4463      	add	r3, ip
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007884:	205a      	movs	r0, #90	; 0x5a
 8007886:	183b      	adds	r3, r7, r0
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	88d2      	ldrh	r2, [r2, #6]
 800788c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	6959      	ldr	r1, [r3, #20]
 8007892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007894:	b29c      	uxth	r4, r3
 8007896:	183b      	adds	r3, r7, r0
 8007898:	881a      	ldrh	r2, [r3, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	0023      	movs	r3, r4
 800789e:	f001 f817 	bl	80088d0 <USB_WritePMA>
 80078a2:	e34a      	b.n	8007f3a <USB_EPStartXfer+0xa62>
 80078a4:	40009800 	.word	0x40009800
 80078a8:	077f8f8f 	.word	0x077f8f8f
 80078ac:	00008180 	.word	0x00008180
 80078b0:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d172      	bne.n	80079a2 <USB_EPStartXfer+0x4ca>
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	4ad7      	ldr	r2, [pc, #860]	; (8007c20 <USB_EPStartXfer+0x748>)
 80078c4:	4694      	mov	ip, r2
 80078c6:	4463      	add	r3, ip
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	49d3      	ldr	r1, [pc, #844]	; (8007c20 <USB_EPStartXfer+0x748>)
 80078d2:	468c      	mov	ip, r1
 80078d4:	4463      	add	r3, ip
 80078d6:	0412      	lsls	r2, r2, #16
 80078d8:	0c12      	lsrs	r2, r2, #16
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d121      	bne.n	8007926 <USB_EPStartXfer+0x44e>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4acd      	ldr	r2, [pc, #820]	; (8007c20 <USB_EPStartXfer+0x748>)
 80078ea:	4694      	mov	ip, r2
 80078ec:	4463      	add	r3, ip
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	49ca      	ldr	r1, [pc, #808]	; (8007c20 <USB_EPStartXfer+0x748>)
 80078f8:	468c      	mov	ip, r1
 80078fa:	4463      	add	r3, ip
 80078fc:	49c9      	ldr	r1, [pc, #804]	; (8007c24 <USB_EPStartXfer+0x74c>)
 80078fe:	400a      	ands	r2, r1
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4ac5      	ldr	r2, [pc, #788]	; (8007c20 <USB_EPStartXfer+0x748>)
 800790a:	4694      	mov	ip, r2
 800790c:	4463      	add	r3, ip
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	49c2      	ldr	r1, [pc, #776]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007918:	468c      	mov	ip, r1
 800791a:	4463      	add	r3, ip
 800791c:	2180      	movs	r1, #128	; 0x80
 800791e:	0609      	lsls	r1, r1, #24
 8007920:	430a      	orrs	r2, r1
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e062      	b.n	80079ec <USB_EPStartXfer+0x514>
 8007926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007928:	2b3e      	cmp	r3, #62	; 0x3e
 800792a:	d81b      	bhi.n	8007964 <USB_EPStartXfer+0x48c>
 800792c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007934:	2201      	movs	r2, #1
 8007936:	4013      	ands	r3, r2
 8007938:	d002      	beq.n	8007940 <USB_EPStartXfer+0x468>
 800793a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793c:	3301      	adds	r3, #1
 800793e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	4ab6      	ldr	r2, [pc, #728]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007948:	4694      	mov	ip, r2
 800794a:	4463      	add	r3, ip
 800794c:	6819      	ldr	r1, [r3, #0]
 800794e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007950:	069a      	lsls	r2, r3, #26
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	48b1      	ldr	r0, [pc, #708]	; (8007c20 <USB_EPStartXfer+0x748>)
 800795a:	4684      	mov	ip, r0
 800795c:	4463      	add	r3, ip
 800795e:	430a      	orrs	r2, r1
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e043      	b.n	80079ec <USB_EPStartXfer+0x514>
 8007964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800796a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796c:	221f      	movs	r2, #31
 800796e:	4013      	ands	r3, r2
 8007970:	d102      	bne.n	8007978 <USB_EPStartXfer+0x4a0>
 8007972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007974:	3b01      	subs	r3, #1
 8007976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	4aa8      	ldr	r2, [pc, #672]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007980:	4694      	mov	ip, r2
 8007982:	4463      	add	r3, ip
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007988:	069b      	lsls	r3, r3, #26
 800798a:	431a      	orrs	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	49a3      	ldr	r1, [pc, #652]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007994:	468c      	mov	ip, r1
 8007996:	4463      	add	r3, ip
 8007998:	2180      	movs	r1, #128	; 0x80
 800799a:	0609      	lsls	r1, r1, #24
 800799c:	430a      	orrs	r2, r1
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	e024      	b.n	80079ec <USB_EPStartXfer+0x514>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d120      	bne.n	80079ec <USB_EPStartXfer+0x514>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	4a9b      	ldr	r2, [pc, #620]	; (8007c20 <USB_EPStartXfer+0x748>)
 80079b2:	4694      	mov	ip, r2
 80079b4:	4463      	add	r3, ip
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	4998      	ldr	r1, [pc, #608]	; (8007c20 <USB_EPStartXfer+0x748>)
 80079c0:	468c      	mov	ip, r1
 80079c2:	4463      	add	r3, ip
 80079c4:	0412      	lsls	r2, r2, #16
 80079c6:	0c12      	lsrs	r2, r2, #16
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4a93      	ldr	r2, [pc, #588]	; (8007c20 <USB_EPStartXfer+0x748>)
 80079d2:	4694      	mov	ip, r2
 80079d4:	4463      	add	r3, ip
 80079d6:	6819      	ldr	r1, [r3, #0]
 80079d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079da:	041a      	lsls	r2, r3, #16
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	488f      	ldr	r0, [pc, #572]	; (8007c20 <USB_EPStartXfer+0x748>)
 80079e4:	4684      	mov	ip, r0
 80079e6:	4463      	add	r3, ip
 80079e8:	430a      	orrs	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80079ec:	205a      	movs	r0, #90	; 0x5a
 80079ee:	183b      	adds	r3, r7, r0
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	88d2      	ldrh	r2, [r2, #6]
 80079f4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6959      	ldr	r1, [r3, #20]
 80079fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079fc:	b29c      	uxth	r4, r3
 80079fe:	183b      	adds	r3, r7, r0
 8007a00:	881a      	ldrh	r2, [r3, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	0023      	movs	r3, r4
 8007a06:	f000 ff63 	bl	80088d0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a10:	18d2      	adds	r2, r2, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d906      	bls.n	8007a30 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a28:	1ad2      	subs	r2, r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	621a      	str	r2, [r3, #32]
 8007a2e:	e005      	b.n	8007a3c <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	65fb      	str	r3, [r7, #92]	; 0x5c
              ep->xfer_len_db = 0U;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d172      	bne.n	8007b2a <USB_EPStartXfer+0x652>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	4a75      	ldr	r2, [pc, #468]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007a4c:	4694      	mov	ip, r2
 8007a4e:	4463      	add	r3, ip
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	4971      	ldr	r1, [pc, #452]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007a5a:	468c      	mov	ip, r1
 8007a5c:	4463      	add	r3, ip
 8007a5e:	0412      	lsls	r2, r2, #16
 8007a60:	0c12      	lsrs	r2, r2, #16
 8007a62:	605a      	str	r2, [r3, #4]
 8007a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d121      	bne.n	8007aae <USB_EPStartXfer+0x5d6>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	4a6b      	ldr	r2, [pc, #428]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007a72:	4694      	mov	ip, r2
 8007a74:	4463      	add	r3, ip
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	4968      	ldr	r1, [pc, #416]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007a80:	468c      	mov	ip, r1
 8007a82:	4463      	add	r3, ip
 8007a84:	4967      	ldr	r1, [pc, #412]	; (8007c24 <USB_EPStartXfer+0x74c>)
 8007a86:	400a      	ands	r2, r1
 8007a88:	605a      	str	r2, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4a63      	ldr	r2, [pc, #396]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007a92:	4694      	mov	ip, r2
 8007a94:	4463      	add	r3, ip
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	4960      	ldr	r1, [pc, #384]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007aa0:	468c      	mov	ip, r1
 8007aa2:	4463      	add	r3, ip
 8007aa4:	2180      	movs	r1, #128	; 0x80
 8007aa6:	0609      	lsls	r1, r1, #24
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	605a      	str	r2, [r3, #4]
 8007aac:	e062      	b.n	8007b74 <USB_EPStartXfer+0x69c>
 8007aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ab2:	d81b      	bhi.n	8007aec <USB_EPStartXfer+0x614>
 8007ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007abc:	2201      	movs	r2, #1
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d002      	beq.n	8007ac8 <USB_EPStartXfer+0x5f0>
 8007ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	4a54      	ldr	r2, [pc, #336]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007ad0:	4694      	mov	ip, r2
 8007ad2:	4463      	add	r3, ip
 8007ad4:	6859      	ldr	r1, [r3, #4]
 8007ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad8:	069a      	lsls	r2, r3, #26
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	484f      	ldr	r0, [pc, #316]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007ae2:	4684      	mov	ip, r0
 8007ae4:	4463      	add	r3, ip
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
 8007aea:	e043      	b.n	8007b74 <USB_EPStartXfer+0x69c>
 8007aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007af4:	221f      	movs	r2, #31
 8007af6:	4013      	ands	r3, r2
 8007af8:	d102      	bne.n	8007b00 <USB_EPStartXfer+0x628>
 8007afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007afc:	3b01      	subs	r3, #1
 8007afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	4a46      	ldr	r2, [pc, #280]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007b08:	4694      	mov	ip, r2
 8007b0a:	4463      	add	r3, ip
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b10:	069b      	lsls	r3, r3, #26
 8007b12:	431a      	orrs	r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	4941      	ldr	r1, [pc, #260]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007b1c:	468c      	mov	ip, r1
 8007b1e:	4463      	add	r3, ip
 8007b20:	2180      	movs	r1, #128	; 0x80
 8007b22:	0609      	lsls	r1, r1, #24
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
 8007b28:	e024      	b.n	8007b74 <USB_EPStartXfer+0x69c>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d120      	bne.n	8007b74 <USB_EPStartXfer+0x69c>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	4a39      	ldr	r2, [pc, #228]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007b3a:	4694      	mov	ip, r2
 8007b3c:	4463      	add	r3, ip
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	4936      	ldr	r1, [pc, #216]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007b48:	468c      	mov	ip, r1
 8007b4a:	4463      	add	r3, ip
 8007b4c:	0412      	lsls	r2, r2, #16
 8007b4e:	0c12      	lsrs	r2, r2, #16
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4a31      	ldr	r2, [pc, #196]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007b5a:	4694      	mov	ip, r2
 8007b5c:	4463      	add	r3, ip
 8007b5e:	6859      	ldr	r1, [r3, #4]
 8007b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b62:	041a      	lsls	r2, r3, #16
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	482d      	ldr	r0, [pc, #180]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007b6c:	4684      	mov	ip, r0
 8007b6e:	4463      	add	r3, ip
 8007b70:	430a      	orrs	r2, r1
 8007b72:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8007b74:	205a      	movs	r0, #90	; 0x5a
 8007b76:	183b      	adds	r3, r7, r0
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	8912      	ldrh	r2, [r2, #8]
 8007b7c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	6959      	ldr	r1, [r3, #20]
 8007b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b84:	b29c      	uxth	r4, r3
 8007b86:	183b      	adds	r3, r7, r0
 8007b88:	881a      	ldrh	r2, [r3, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	0023      	movs	r3, r4
 8007b8e:	f000 fe9f 	bl	80088d0 <USB_WritePMA>
 8007b92:	e1d2      	b.n	8007f3a <USB_EPStartXfer+0xa62>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	65fb      	str	r3, [r7, #92]	; 0x5c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	18d3      	adds	r3, r2, r3
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a20      	ldr	r2, [pc, #128]	; (8007c28 <USB_EPStartXfer+0x750>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	18d3      	adds	r3, r2, r3
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	491c      	ldr	r1, [pc, #112]	; (8007c2c <USB_EPStartXfer+0x754>)
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4a16      	ldr	r2, [pc, #88]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007bc6:	4694      	mov	ip, r2
 8007bc8:	4463      	add	r3, ip
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	4913      	ldr	r1, [pc, #76]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007bd4:	468c      	mov	ip, r1
 8007bd6:	4463      	add	r3, ip
 8007bd8:	0412      	lsls	r2, r2, #16
 8007bda:	0c12      	lsrs	r2, r2, #16
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	4a0e      	ldr	r2, [pc, #56]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007be6:	4694      	mov	ip, r2
 8007be8:	4463      	add	r3, ip
 8007bea:	6819      	ldr	r1, [r3, #0]
 8007bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bee:	041a      	lsls	r2, r3, #16
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	480a      	ldr	r0, [pc, #40]	; (8007c20 <USB_EPStartXfer+0x748>)
 8007bf8:	4684      	mov	ip, r0
 8007bfa:	4463      	add	r3, ip
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c00:	205a      	movs	r0, #90	; 0x5a
 8007c02:	183b      	adds	r3, r7, r0
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	88d2      	ldrh	r2, [r2, #6]
 8007c08:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6959      	ldr	r1, [r3, #20]
 8007c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c10:	b29c      	uxth	r4, r3
 8007c12:	183b      	adds	r3, r7, r0
 8007c14:	881a      	ldrh	r2, [r3, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	0023      	movs	r3, r4
 8007c1a:	f000 fe59 	bl	80088d0 <USB_WritePMA>
 8007c1e:	e18c      	b.n	8007f3a <USB_EPStartXfer+0xa62>
 8007c20:	40009800 	.word	0x40009800
 8007c24:	83ffffff 	.word	0x83ffffff
 8007c28:	077f8e8f 	.word	0x077f8e8f
 8007c2c:	00008080 	.word	0x00008080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	18d3      	adds	r3, r2, r3
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d100      	bne.n	8007c44 <USB_EPStartXfer+0x76c>
 8007c42:	e0a1      	b.n	8007d88 <USB_EPStartXfer+0x8b0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d172      	bne.n	8007d32 <USB_EPStartXfer+0x85a>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	4ad2      	ldr	r2, [pc, #840]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007c54:	4694      	mov	ip, r2
 8007c56:	4463      	add	r3, ip
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	49ce      	ldr	r1, [pc, #824]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007c62:	468c      	mov	ip, r1
 8007c64:	4463      	add	r3, ip
 8007c66:	0412      	lsls	r2, r2, #16
 8007c68:	0c12      	lsrs	r2, r2, #16
 8007c6a:	605a      	str	r2, [r3, #4]
 8007c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d121      	bne.n	8007cb6 <USB_EPStartXfer+0x7de>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	4ac8      	ldr	r2, [pc, #800]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007c7a:	4694      	mov	ip, r2
 8007c7c:	4463      	add	r3, ip
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	49c5      	ldr	r1, [pc, #788]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007c88:	468c      	mov	ip, r1
 8007c8a:	4463      	add	r3, ip
 8007c8c:	49c4      	ldr	r1, [pc, #784]	; (8007fa0 <USB_EPStartXfer+0xac8>)
 8007c8e:	400a      	ands	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	4ac0      	ldr	r2, [pc, #768]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007c9a:	4694      	mov	ip, r2
 8007c9c:	4463      	add	r3, ip
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	49bd      	ldr	r1, [pc, #756]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007ca8:	468c      	mov	ip, r1
 8007caa:	4463      	add	r3, ip
 8007cac:	2180      	movs	r1, #128	; 0x80
 8007cae:	0609      	lsls	r1, r1, #24
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
 8007cb4:	e062      	b.n	8007d7c <USB_EPStartXfer+0x8a4>
 8007cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8007cba:	d81b      	bhi.n	8007cf4 <USB_EPStartXfer+0x81c>
 8007cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cbe:	085b      	lsrs	r3, r3, #1
 8007cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d002      	beq.n	8007cd0 <USB_EPStartXfer+0x7f8>
 8007cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ccc:	3301      	adds	r3, #1
 8007cce:	647b      	str	r3, [r7, #68]	; 0x44
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	4ab1      	ldr	r2, [pc, #708]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007cd8:	4694      	mov	ip, r2
 8007cda:	4463      	add	r3, ip
 8007cdc:	6859      	ldr	r1, [r3, #4]
 8007cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce0:	069a      	lsls	r2, r3, #26
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	48ac      	ldr	r0, [pc, #688]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007cea:	4684      	mov	ip, r0
 8007cec:	4463      	add	r3, ip
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	e043      	b.n	8007d7c <USB_EPStartXfer+0x8a4>
 8007cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf6:	095b      	lsrs	r3, r3, #5
 8007cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8007cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cfc:	221f      	movs	r2, #31
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d102      	bne.n	8007d08 <USB_EPStartXfer+0x830>
 8007d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d04:	3b01      	subs	r3, #1
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	4aa3      	ldr	r2, [pc, #652]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007d10:	4694      	mov	ip, r2
 8007d12:	4463      	add	r3, ip
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d18:	069b      	lsls	r3, r3, #26
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	499e      	ldr	r1, [pc, #632]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007d24:	468c      	mov	ip, r1
 8007d26:	4463      	add	r3, ip
 8007d28:	2180      	movs	r1, #128	; 0x80
 8007d2a:	0609      	lsls	r1, r1, #24
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	605a      	str	r2, [r3, #4]
 8007d30:	e024      	b.n	8007d7c <USB_EPStartXfer+0x8a4>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	785b      	ldrb	r3, [r3, #1]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d120      	bne.n	8007d7c <USB_EPStartXfer+0x8a4>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	4a96      	ldr	r2, [pc, #600]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007d42:	4694      	mov	ip, r2
 8007d44:	4463      	add	r3, ip
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	4993      	ldr	r1, [pc, #588]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007d50:	468c      	mov	ip, r1
 8007d52:	4463      	add	r3, ip
 8007d54:	0412      	lsls	r2, r2, #16
 8007d56:	0c12      	lsrs	r2, r2, #16
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	4a8e      	ldr	r2, [pc, #568]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007d62:	4694      	mov	ip, r2
 8007d64:	4463      	add	r3, ip
 8007d66:	6859      	ldr	r1, [r3, #4]
 8007d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d6a:	041a      	lsls	r2, r3, #16
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	488a      	ldr	r0, [pc, #552]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007d74:	4684      	mov	ip, r0
 8007d76:	4463      	add	r3, ip
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8007d7c:	235a      	movs	r3, #90	; 0x5a
 8007d7e:	18fb      	adds	r3, r7, r3
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	8912      	ldrh	r2, [r2, #8]
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	e0a0      	b.n	8007eca <USB_EPStartXfer+0x9f2>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d172      	bne.n	8007e76 <USB_EPStartXfer+0x99e>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4a81      	ldr	r2, [pc, #516]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007d98:	4694      	mov	ip, r2
 8007d9a:	4463      	add	r3, ip
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	497d      	ldr	r1, [pc, #500]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007da6:	468c      	mov	ip, r1
 8007da8:	4463      	add	r3, ip
 8007daa:	0412      	lsls	r2, r2, #16
 8007dac:	0c12      	lsrs	r2, r2, #16
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d121      	bne.n	8007dfa <USB_EPStartXfer+0x922>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	4a77      	ldr	r2, [pc, #476]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007dbe:	4694      	mov	ip, r2
 8007dc0:	4463      	add	r3, ip
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	4974      	ldr	r1, [pc, #464]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007dcc:	468c      	mov	ip, r1
 8007dce:	4463      	add	r3, ip
 8007dd0:	4973      	ldr	r1, [pc, #460]	; (8007fa0 <USB_EPStartXfer+0xac8>)
 8007dd2:	400a      	ands	r2, r1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4a6f      	ldr	r2, [pc, #444]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007dde:	4694      	mov	ip, r2
 8007de0:	4463      	add	r3, ip
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	496c      	ldr	r1, [pc, #432]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007dec:	468c      	mov	ip, r1
 8007dee:	4463      	add	r3, ip
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	0609      	lsls	r1, r1, #24
 8007df4:	430a      	orrs	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e062      	b.n	8007ec0 <USB_EPStartXfer+0x9e8>
 8007dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dfe:	d81b      	bhi.n	8007e38 <USB_EPStartXfer+0x960>
 8007e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	643b      	str	r3, [r7, #64]	; 0x40
 8007e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e08:	2201      	movs	r2, #1
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d002      	beq.n	8007e14 <USB_EPStartXfer+0x93c>
 8007e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e10:	3301      	adds	r3, #1
 8007e12:	643b      	str	r3, [r7, #64]	; 0x40
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	4a60      	ldr	r2, [pc, #384]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007e1c:	4694      	mov	ip, r2
 8007e1e:	4463      	add	r3, ip
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e24:	069a      	lsls	r2, r3, #26
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	485b      	ldr	r0, [pc, #364]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007e2e:	4684      	mov	ip, r0
 8007e30:	4463      	add	r3, ip
 8007e32:	430a      	orrs	r2, r1
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e043      	b.n	8007ec0 <USB_EPStartXfer+0x9e8>
 8007e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e40:	221f      	movs	r2, #31
 8007e42:	4013      	ands	r3, r2
 8007e44:	d102      	bne.n	8007e4c <USB_EPStartXfer+0x974>
 8007e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4a52      	ldr	r2, [pc, #328]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007e54:	4694      	mov	ip, r2
 8007e56:	4463      	add	r3, ip
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5c:	069b      	lsls	r3, r3, #26
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	494d      	ldr	r1, [pc, #308]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007e68:	468c      	mov	ip, r1
 8007e6a:	4463      	add	r3, ip
 8007e6c:	2180      	movs	r1, #128	; 0x80
 8007e6e:	0609      	lsls	r1, r1, #24
 8007e70:	430a      	orrs	r2, r1
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	e024      	b.n	8007ec0 <USB_EPStartXfer+0x9e8>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d120      	bne.n	8007ec0 <USB_EPStartXfer+0x9e8>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4a45      	ldr	r2, [pc, #276]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007e86:	4694      	mov	ip, r2
 8007e88:	4463      	add	r3, ip
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	4942      	ldr	r1, [pc, #264]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007e94:	468c      	mov	ip, r1
 8007e96:	4463      	add	r3, ip
 8007e98:	0412      	lsls	r2, r2, #16
 8007e9a:	0c12      	lsrs	r2, r2, #16
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	4a3d      	ldr	r2, [pc, #244]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007ea6:	4694      	mov	ip, r2
 8007ea8:	4463      	add	r3, ip
 8007eaa:	6819      	ldr	r1, [r3, #0]
 8007eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eae:	041a      	lsls	r2, r3, #16
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	4839      	ldr	r0, [pc, #228]	; (8007f9c <USB_EPStartXfer+0xac4>)
 8007eb8:	4684      	mov	ip, r0
 8007eba:	4463      	add	r3, ip
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ec0:	235a      	movs	r3, #90	; 0x5a
 8007ec2:	18fb      	adds	r3, r7, r3
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	88d2      	ldrh	r2, [r2, #6]
 8007ec8:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6959      	ldr	r1, [r3, #20]
 8007ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed0:	b29c      	uxth	r4, r3
 8007ed2:	235a      	movs	r3, #90	; 0x5a
 8007ed4:	18fb      	adds	r3, r7, r3
 8007ed6:	881a      	ldrh	r2, [r3, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	0023      	movs	r3, r4
 8007edc:	f000 fcf8 	bl	80088d0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d112      	bne.n	8007f0e <USB_EPStartXfer+0xa36>
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	18d3      	adds	r3, r2, r3
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	; (8007fa4 <USB_EPStartXfer+0xacc>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	18d3      	adds	r3, r2, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	4928      	ldr	r1, [pc, #160]	; (8007fa8 <USB_EPStartXfer+0xad0>)
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	e015      	b.n	8007f3a <USB_EPStartXfer+0xa62>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d111      	bne.n	8007f3a <USB_EPStartXfer+0xa62>
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	18d3      	adds	r3, r2, r3
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <USB_EPStartXfer+0xacc>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	18d3      	adds	r3, r2, r3
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	491d      	ldr	r1, [pc, #116]	; (8007fac <USB_EPStartXfer+0xad4>)
 8007f36:	430a      	orrs	r2, r1
 8007f38:	601a      	str	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	18d3      	adds	r3, r2, r3
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1a      	ldr	r2, [pc, #104]	; (8007fb0 <USB_EPStartXfer+0xad8>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2210      	movs	r2, #16
 8007f50:	4053      	eors	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	4053      	eors	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	18d3      	adds	r3, r2, r3
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4912      	ldr	r1, [pc, #72]	; (8007fb4 <USB_EPStartXfer+0xadc>)
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	f000 fba1 	bl	80086b4 <USB_EPStartXfer+0x11dc>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	7a9b      	ldrb	r3, [r3, #10]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d000      	beq.n	8007f7c <USB_EPStartXfer+0xaa4>
 8007f7a:	e096      	b.n	80080aa <USB_EPStartXfer+0xbd2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d917      	bls.n	8007fb8 <USB_EPStartXfer+0xae0>
      {
        len = ep->maxpacket;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        ep->xfer_len -= len;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f94:	1ad2      	subs	r2, r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	619a      	str	r2, [r3, #24]
 8007f9a:	e013      	b.n	8007fc4 <USB_EPStartXfer+0xaec>
 8007f9c:	40009800 	.word	0x40009800
 8007fa0:	83ffffff 	.word	0x83ffffff
 8007fa4:	077f8f8f 	.word	0x077f8f8f
 8007fa8:	000080c0 	.word	0x000080c0
 8007fac:	0000c080 	.word	0x0000c080
 8007fb0:	077f8fbf 	.word	0x077f8fbf
 8007fb4:	00008080 	.word	0x00008080
      }
      else
      {
        len = ep->xfer_len;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
        ep->xfer_len = 0U;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	4acb      	ldr	r2, [pc, #812]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8007fcc:	4694      	mov	ip, r2
 8007fce:	4463      	add	r3, ip
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	49c7      	ldr	r1, [pc, #796]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8007fda:	468c      	mov	ip, r1
 8007fdc:	4463      	add	r3, ip
 8007fde:	0412      	lsls	r2, r2, #16
 8007fe0:	0c12      	lsrs	r2, r2, #16
 8007fe2:	605a      	str	r2, [r3, #4]
 8007fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d121      	bne.n	800802e <USB_EPStartXfer+0xb56>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	4ac1      	ldr	r2, [pc, #772]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8007ff2:	4694      	mov	ip, r2
 8007ff4:	4463      	add	r3, ip
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	49be      	ldr	r1, [pc, #760]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008000:	468c      	mov	ip, r1
 8008002:	4463      	add	r3, ip
 8008004:	49bd      	ldr	r1, [pc, #756]	; (80082fc <USB_EPStartXfer+0xe24>)
 8008006:	400a      	ands	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	4ab9      	ldr	r2, [pc, #740]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008012:	4694      	mov	ip, r2
 8008014:	4463      	add	r3, ip
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	49b6      	ldr	r1, [pc, #728]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008020:	468c      	mov	ip, r1
 8008022:	4463      	add	r3, ip
 8008024:	2180      	movs	r1, #128	; 0x80
 8008026:	0609      	lsls	r1, r1, #24
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
 800802c:	e326      	b.n	800867c <USB_EPStartXfer+0x11a4>
 800802e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008030:	2b3e      	cmp	r3, #62	; 0x3e
 8008032:	d81b      	bhi.n	800806c <USB_EPStartXfer+0xb94>
 8008034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800803c:	2201      	movs	r2, #1
 800803e:	4013      	ands	r3, r2
 8008040:	d002      	beq.n	8008048 <USB_EPStartXfer+0xb70>
 8008042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008044:	3301      	adds	r3, #1
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	4aaa      	ldr	r2, [pc, #680]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008050:	4694      	mov	ip, r2
 8008052:	4463      	add	r3, ip
 8008054:	6859      	ldr	r1, [r3, #4]
 8008056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008058:	069a      	lsls	r2, r3, #26
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	48a5      	ldr	r0, [pc, #660]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008062:	4684      	mov	ip, r0
 8008064:	4463      	add	r3, ip
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
 800806a:	e307      	b.n	800867c <USB_EPStartXfer+0x11a4>
 800806c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008074:	221f      	movs	r2, #31
 8008076:	4013      	ands	r3, r2
 8008078:	d102      	bne.n	8008080 <USB_EPStartXfer+0xba8>
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	3b01      	subs	r3, #1
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	4a9c      	ldr	r2, [pc, #624]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008088:	4694      	mov	ip, r2
 800808a:	4463      	add	r3, ip
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008090:	069b      	lsls	r3, r3, #26
 8008092:	431a      	orrs	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	4997      	ldr	r1, [pc, #604]	; (80082f8 <USB_EPStartXfer+0xe20>)
 800809c:	468c      	mov	ip, r1
 800809e:	4463      	add	r3, ip
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	0609      	lsls	r1, r1, #24
 80080a4:	430a      	orrs	r2, r1
 80080a6:	605a      	str	r2, [r3, #4]
 80080a8:	e2e8      	b.n	800867c <USB_EPStartXfer+0x11a4>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	78db      	ldrb	r3, [r3, #3]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d000      	beq.n	80080b4 <USB_EPStartXfer+0xbdc>
 80080b2:	e185      	b.n	80083c0 <USB_EPStartXfer+0xee8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	785b      	ldrb	r3, [r3, #1]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d000      	beq.n	80080be <USB_EPStartXfer+0xbe6>
 80080bc:	e078      	b.n	80081b0 <USB_EPStartXfer+0xcd8>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	4a8c      	ldr	r2, [pc, #560]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80080c6:	4694      	mov	ip, r2
 80080c8:	4463      	add	r3, ip
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	4989      	ldr	r1, [pc, #548]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80080d4:	468c      	mov	ip, r1
 80080d6:	4463      	add	r3, ip
 80080d8:	0412      	lsls	r2, r2, #16
 80080da:	0c12      	lsrs	r2, r2, #16
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d121      	bne.n	800812a <USB_EPStartXfer+0xc52>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4a82      	ldr	r2, [pc, #520]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80080ee:	4694      	mov	ip, r2
 80080f0:	4463      	add	r3, ip
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	497f      	ldr	r1, [pc, #508]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80080fc:	468c      	mov	ip, r1
 80080fe:	4463      	add	r3, ip
 8008100:	497e      	ldr	r1, [pc, #504]	; (80082fc <USB_EPStartXfer+0xe24>)
 8008102:	400a      	ands	r2, r1
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	4a7a      	ldr	r2, [pc, #488]	; (80082f8 <USB_EPStartXfer+0xe20>)
 800810e:	4694      	mov	ip, r2
 8008110:	4463      	add	r3, ip
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	4977      	ldr	r1, [pc, #476]	; (80082f8 <USB_EPStartXfer+0xe20>)
 800811c:	468c      	mov	ip, r1
 800811e:	4463      	add	r3, ip
 8008120:	2180      	movs	r1, #128	; 0x80
 8008122:	0609      	lsls	r1, r1, #24
 8008124:	430a      	orrs	r2, r1
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	e068      	b.n	80081fc <USB_EPStartXfer+0xd24>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	2b3e      	cmp	r3, #62	; 0x3e
 8008130:	d81d      	bhi.n	800816e <USB_EPStartXfer+0xc96>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	085b      	lsrs	r3, r3, #1
 8008138:	63bb      	str	r3, [r7, #56]	; 0x38
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2201      	movs	r2, #1
 8008140:	4013      	ands	r3, r2
 8008142:	d002      	beq.n	800814a <USB_EPStartXfer+0xc72>
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	3301      	adds	r3, #1
 8008148:	63bb      	str	r3, [r7, #56]	; 0x38
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4a69      	ldr	r2, [pc, #420]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008152:	4694      	mov	ip, r2
 8008154:	4463      	add	r3, ip
 8008156:	6819      	ldr	r1, [r3, #0]
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	069a      	lsls	r2, r3, #26
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	4865      	ldr	r0, [pc, #404]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008164:	4684      	mov	ip, r0
 8008166:	4463      	add	r3, ip
 8008168:	430a      	orrs	r2, r1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e046      	b.n	80081fc <USB_EPStartXfer+0xd24>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	095b      	lsrs	r3, r3, #5
 8008174:	63bb      	str	r3, [r7, #56]	; 0x38
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	221f      	movs	r2, #31
 800817c:	4013      	ands	r3, r2
 800817e:	d102      	bne.n	8008186 <USB_EPStartXfer+0xcae>
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	3b01      	subs	r3, #1
 8008184:	63bb      	str	r3, [r7, #56]	; 0x38
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	4a5a      	ldr	r2, [pc, #360]	; (80082f8 <USB_EPStartXfer+0xe20>)
 800818e:	4694      	mov	ip, r2
 8008190:	4463      	add	r3, ip
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	069b      	lsls	r3, r3, #26
 8008198:	431a      	orrs	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4955      	ldr	r1, [pc, #340]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80081a2:	468c      	mov	ip, r1
 80081a4:	4463      	add	r3, ip
 80081a6:	2180      	movs	r1, #128	; 0x80
 80081a8:	0609      	lsls	r1, r1, #24
 80081aa:	430a      	orrs	r2, r1
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e025      	b.n	80081fc <USB_EPStartXfer+0xd24>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d121      	bne.n	80081fc <USB_EPStartXfer+0xd24>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	4a4e      	ldr	r2, [pc, #312]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80081c0:	4694      	mov	ip, r2
 80081c2:	4463      	add	r3, ip
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	494a      	ldr	r1, [pc, #296]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80081ce:	468c      	mov	ip, r1
 80081d0:	4463      	add	r3, ip
 80081d2:	0412      	lsls	r2, r2, #16
 80081d4:	0c12      	lsrs	r2, r2, #16
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4a46      	ldr	r2, [pc, #280]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80081e0:	4694      	mov	ip, r2
 80081e2:	4463      	add	r3, ip
 80081e4:	6819      	ldr	r1, [r3, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	041a      	lsls	r2, r3, #16
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	4841      	ldr	r0, [pc, #260]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80081f4:	4684      	mov	ip, r0
 80081f6:	4463      	add	r3, ip
 80081f8:	430a      	orrs	r2, r1
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d000      	beq.n	8008206 <USB_EPStartXfer+0xd2e>
 8008204:	e07c      	b.n	8008300 <USB_EPStartXfer+0xe28>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4a3a      	ldr	r2, [pc, #232]	; (80082f8 <USB_EPStartXfer+0xe20>)
 800820e:	4694      	mov	ip, r2
 8008210:	4463      	add	r3, ip
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4937      	ldr	r1, [pc, #220]	; (80082f8 <USB_EPStartXfer+0xe20>)
 800821c:	468c      	mov	ip, r1
 800821e:	4463      	add	r3, ip
 8008220:	0412      	lsls	r2, r2, #16
 8008222:	0c12      	lsrs	r2, r2, #16
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d121      	bne.n	8008272 <USB_EPStartXfer+0xd9a>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	4a30      	ldr	r2, [pc, #192]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008236:	4694      	mov	ip, r2
 8008238:	4463      	add	r3, ip
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	492d      	ldr	r1, [pc, #180]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008244:	468c      	mov	ip, r1
 8008246:	4463      	add	r3, ip
 8008248:	492c      	ldr	r1, [pc, #176]	; (80082fc <USB_EPStartXfer+0xe24>)
 800824a:	400a      	ands	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	4a28      	ldr	r2, [pc, #160]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008256:	4694      	mov	ip, r2
 8008258:	4463      	add	r3, ip
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	4925      	ldr	r1, [pc, #148]	; (80082f8 <USB_EPStartXfer+0xe20>)
 8008264:	468c      	mov	ip, r1
 8008266:	4463      	add	r3, ip
 8008268:	2180      	movs	r1, #128	; 0x80
 800826a:	0609      	lsls	r1, r1, #24
 800826c:	430a      	orrs	r2, r1
 800826e:	605a      	str	r2, [r3, #4]
 8008270:	e06c      	b.n	800834c <USB_EPStartXfer+0xe74>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b3e      	cmp	r3, #62	; 0x3e
 8008278:	d81d      	bhi.n	80082b6 <USB_EPStartXfer+0xdde>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2201      	movs	r2, #1
 8008288:	4013      	ands	r3, r2
 800828a:	d002      	beq.n	8008292 <USB_EPStartXfer+0xdba>
 800828c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828e:	3301      	adds	r3, #1
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <USB_EPStartXfer+0xe20>)
 800829a:	4694      	mov	ip, r2
 800829c:	4463      	add	r3, ip
 800829e:	6859      	ldr	r1, [r3, #4]
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a2:	069a      	lsls	r2, r3, #26
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	4813      	ldr	r0, [pc, #76]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80082ac:	4684      	mov	ip, r0
 80082ae:	4463      	add	r3, ip
 80082b0:	430a      	orrs	r2, r1
 80082b2:	605a      	str	r2, [r3, #4]
 80082b4:	e04a      	b.n	800834c <USB_EPStartXfer+0xe74>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	221f      	movs	r2, #31
 80082c4:	4013      	ands	r3, r2
 80082c6:	d102      	bne.n	80082ce <USB_EPStartXfer+0xdf6>
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	3b01      	subs	r3, #1
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	4a08      	ldr	r2, [pc, #32]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80082d6:	4694      	mov	ip, r2
 80082d8:	4463      	add	r3, ip
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	069b      	lsls	r3, r3, #26
 80082e0:	431a      	orrs	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	4903      	ldr	r1, [pc, #12]	; (80082f8 <USB_EPStartXfer+0xe20>)
 80082ea:	468c      	mov	ip, r1
 80082ec:	4463      	add	r3, ip
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	0609      	lsls	r1, r1, #24
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
 80082f6:	e029      	b.n	800834c <USB_EPStartXfer+0xe74>
 80082f8:	40009800 	.word	0x40009800
 80082fc:	83ffffff 	.word	0x83ffffff
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	785b      	ldrb	r3, [r3, #1]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d121      	bne.n	800834c <USB_EPStartXfer+0xe74>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	4ad7      	ldr	r2, [pc, #860]	; (800866c <USB_EPStartXfer+0x1194>)
 8008310:	4694      	mov	ip, r2
 8008312:	4463      	add	r3, ip
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	49d3      	ldr	r1, [pc, #844]	; (800866c <USB_EPStartXfer+0x1194>)
 800831e:	468c      	mov	ip, r1
 8008320:	4463      	add	r3, ip
 8008322:	0412      	lsls	r2, r2, #16
 8008324:	0c12      	lsrs	r2, r2, #16
 8008326:	605a      	str	r2, [r3, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	4acf      	ldr	r2, [pc, #828]	; (800866c <USB_EPStartXfer+0x1194>)
 8008330:	4694      	mov	ip, r2
 8008332:	4463      	add	r3, ip
 8008334:	6859      	ldr	r1, [r3, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	041a      	lsls	r2, r3, #16
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	48ca      	ldr	r0, [pc, #808]	; (800866c <USB_EPStartXfer+0x1194>)
 8008344:	4684      	mov	ip, r0
 8008346:	4463      	add	r3, ip
 8008348:	430a      	orrs	r2, r1
 800834a:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d100      	bne.n	8008356 <USB_EPStartXfer+0xe7e>
 8008354:	e192      	b.n	800867c <USB_EPStartXfer+0x11a4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	18d3      	adds	r3, r2, r3
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	212a      	movs	r1, #42	; 0x2a
 8008364:	187b      	adds	r3, r7, r1
 8008366:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008368:	187b      	adds	r3, r7, r1
 800836a:	881a      	ldrh	r2, [r3, #0]
 800836c:	2380      	movs	r3, #128	; 0x80
 800836e:	01db      	lsls	r3, r3, #7
 8008370:	4013      	ands	r3, r2
 8008372:	d004      	beq.n	800837e <USB_EPStartXfer+0xea6>
 8008374:	187b      	adds	r3, r7, r1
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	2240      	movs	r2, #64	; 0x40
 800837a:	4013      	ands	r3, r2
 800837c:	d10d      	bne.n	800839a <USB_EPStartXfer+0xec2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800837e:	212a      	movs	r1, #42	; 0x2a
 8008380:	187b      	adds	r3, r7, r1
 8008382:	881a      	ldrh	r2, [r3, #0]
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	01db      	lsls	r3, r3, #7
 8008388:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800838a:	d000      	beq.n	800838e <USB_EPStartXfer+0xeb6>
 800838c:	e176      	b.n	800867c <USB_EPStartXfer+0x11a4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800838e:	187b      	adds	r3, r7, r1
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	2240      	movs	r2, #64	; 0x40
 8008394:	4013      	ands	r3, r2
 8008396:	d000      	beq.n	800839a <USB_EPStartXfer+0xec2>
 8008398:	e170      	b.n	800867c <USB_EPStartXfer+0x11a4>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	18d3      	adds	r3, r2, r3
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4ab2      	ldr	r2, [pc, #712]	; (8008670 <USB_EPStartXfer+0x1198>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	18d3      	adds	r3, r2, r3
 80083b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b8:	49ae      	ldr	r1, [pc, #696]	; (8008674 <USB_EPStartXfer+0x119c>)
 80083ba:	430a      	orrs	r2, r1
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e15d      	b.n	800867c <USB_EPStartXfer+0x11a4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	78db      	ldrb	r3, [r3, #3]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d000      	beq.n	80083ca <USB_EPStartXfer+0xef2>
 80083c8:	e14e      	b.n	8008668 <USB_EPStartXfer+0x1190>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d909      	bls.n	80083ea <USB_EPStartXfer+0xf12>
        {
          len = ep->maxpacket;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	65fb      	str	r3, [r7, #92]	; 0x5c
          ep->xfer_len -= len;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e2:	1ad2      	subs	r2, r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	619a      	str	r2, [r3, #24]
 80083e8:	e005      	b.n	80083f6 <USB_EPStartXfer+0xf1e>
        }
        else
        {
          len = ep->xfer_len;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	65fb      	str	r3, [r7, #92]	; 0x5c
          ep->xfer_len = 0U;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2200      	movs	r2, #0
 80083f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	785b      	ldrb	r3, [r3, #1]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d172      	bne.n	80084e4 <USB_EPStartXfer+0x100c>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	4a99      	ldr	r2, [pc, #612]	; (800866c <USB_EPStartXfer+0x1194>)
 8008406:	4694      	mov	ip, r2
 8008408:	4463      	add	r3, ip
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	4996      	ldr	r1, [pc, #600]	; (800866c <USB_EPStartXfer+0x1194>)
 8008414:	468c      	mov	ip, r1
 8008416:	4463      	add	r3, ip
 8008418:	0412      	lsls	r2, r2, #16
 800841a:	0c12      	lsrs	r2, r2, #16
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d121      	bne.n	8008468 <USB_EPStartXfer+0xf90>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4a90      	ldr	r2, [pc, #576]	; (800866c <USB_EPStartXfer+0x1194>)
 800842c:	4694      	mov	ip, r2
 800842e:	4463      	add	r3, ip
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	498c      	ldr	r1, [pc, #560]	; (800866c <USB_EPStartXfer+0x1194>)
 800843a:	468c      	mov	ip, r1
 800843c:	4463      	add	r3, ip
 800843e:	498e      	ldr	r1, [pc, #568]	; (8008678 <USB_EPStartXfer+0x11a0>)
 8008440:	400a      	ands	r2, r1
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	4a88      	ldr	r2, [pc, #544]	; (800866c <USB_EPStartXfer+0x1194>)
 800844c:	4694      	mov	ip, r2
 800844e:	4463      	add	r3, ip
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	4984      	ldr	r1, [pc, #528]	; (800866c <USB_EPStartXfer+0x1194>)
 800845a:	468c      	mov	ip, r1
 800845c:	4463      	add	r3, ip
 800845e:	2180      	movs	r1, #128	; 0x80
 8008460:	0609      	lsls	r1, r1, #24
 8008462:	430a      	orrs	r2, r1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e062      	b.n	800852e <USB_EPStartXfer+0x1056>
 8008468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800846a:	2b3e      	cmp	r3, #62	; 0x3e
 800846c:	d81b      	bhi.n	80084a6 <USB_EPStartXfer+0xfce>
 800846e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008470:	085b      	lsrs	r3, r3, #1
 8008472:	633b      	str	r3, [r7, #48]	; 0x30
 8008474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008476:	2201      	movs	r2, #1
 8008478:	4013      	ands	r3, r2
 800847a:	d002      	beq.n	8008482 <USB_EPStartXfer+0xfaa>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	3301      	adds	r3, #1
 8008480:	633b      	str	r3, [r7, #48]	; 0x30
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	4a78      	ldr	r2, [pc, #480]	; (800866c <USB_EPStartXfer+0x1194>)
 800848a:	4694      	mov	ip, r2
 800848c:	4463      	add	r3, ip
 800848e:	6819      	ldr	r1, [r3, #0]
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	069a      	lsls	r2, r3, #26
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	4874      	ldr	r0, [pc, #464]	; (800866c <USB_EPStartXfer+0x1194>)
 800849c:	4684      	mov	ip, r0
 800849e:	4463      	add	r3, ip
 80084a0:	430a      	orrs	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e043      	b.n	800852e <USB_EPStartXfer+0x1056>
 80084a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	633b      	str	r3, [r7, #48]	; 0x30
 80084ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ae:	221f      	movs	r2, #31
 80084b0:	4013      	ands	r3, r2
 80084b2:	d102      	bne.n	80084ba <USB_EPStartXfer+0xfe2>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	3b01      	subs	r3, #1
 80084b8:	633b      	str	r3, [r7, #48]	; 0x30
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	4a6a      	ldr	r2, [pc, #424]	; (800866c <USB_EPStartXfer+0x1194>)
 80084c2:	4694      	mov	ip, r2
 80084c4:	4463      	add	r3, ip
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	069b      	lsls	r3, r3, #26
 80084cc:	431a      	orrs	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4965      	ldr	r1, [pc, #404]	; (800866c <USB_EPStartXfer+0x1194>)
 80084d6:	468c      	mov	ip, r1
 80084d8:	4463      	add	r3, ip
 80084da:	2180      	movs	r1, #128	; 0x80
 80084dc:	0609      	lsls	r1, r1, #24
 80084de:	430a      	orrs	r2, r1
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e024      	b.n	800852e <USB_EPStartXfer+0x1056>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d120      	bne.n	800852e <USB_EPStartXfer+0x1056>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	4a5e      	ldr	r2, [pc, #376]	; (800866c <USB_EPStartXfer+0x1194>)
 80084f4:	4694      	mov	ip, r2
 80084f6:	4463      	add	r3, ip
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	495a      	ldr	r1, [pc, #360]	; (800866c <USB_EPStartXfer+0x1194>)
 8008502:	468c      	mov	ip, r1
 8008504:	4463      	add	r3, ip
 8008506:	0412      	lsls	r2, r2, #16
 8008508:	0c12      	lsrs	r2, r2, #16
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4a56      	ldr	r2, [pc, #344]	; (800866c <USB_EPStartXfer+0x1194>)
 8008514:	4694      	mov	ip, r2
 8008516:	4463      	add	r3, ip
 8008518:	6819      	ldr	r1, [r3, #0]
 800851a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800851c:	041a      	lsls	r2, r3, #16
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4851      	ldr	r0, [pc, #324]	; (800866c <USB_EPStartXfer+0x1194>)
 8008526:	4684      	mov	ip, r0
 8008528:	4463      	add	r3, ip
 800852a:	430a      	orrs	r2, r1
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d172      	bne.n	800861c <USB_EPStartXfer+0x1144>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	4a4b      	ldr	r2, [pc, #300]	; (800866c <USB_EPStartXfer+0x1194>)
 800853e:	4694      	mov	ip, r2
 8008540:	4463      	add	r3, ip
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	4948      	ldr	r1, [pc, #288]	; (800866c <USB_EPStartXfer+0x1194>)
 800854c:	468c      	mov	ip, r1
 800854e:	4463      	add	r3, ip
 8008550:	0412      	lsls	r2, r2, #16
 8008552:	0c12      	lsrs	r2, r2, #16
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d121      	bne.n	80085a0 <USB_EPStartXfer+0x10c8>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	4a42      	ldr	r2, [pc, #264]	; (800866c <USB_EPStartXfer+0x1194>)
 8008564:	4694      	mov	ip, r2
 8008566:	4463      	add	r3, ip
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	493e      	ldr	r1, [pc, #248]	; (800866c <USB_EPStartXfer+0x1194>)
 8008572:	468c      	mov	ip, r1
 8008574:	4463      	add	r3, ip
 8008576:	4940      	ldr	r1, [pc, #256]	; (8008678 <USB_EPStartXfer+0x11a0>)
 8008578:	400a      	ands	r2, r1
 800857a:	605a      	str	r2, [r3, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4a3a      	ldr	r2, [pc, #232]	; (800866c <USB_EPStartXfer+0x1194>)
 8008584:	4694      	mov	ip, r2
 8008586:	4463      	add	r3, ip
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4936      	ldr	r1, [pc, #216]	; (800866c <USB_EPStartXfer+0x1194>)
 8008592:	468c      	mov	ip, r1
 8008594:	4463      	add	r3, ip
 8008596:	2180      	movs	r1, #128	; 0x80
 8008598:	0609      	lsls	r1, r1, #24
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	e06d      	b.n	800867c <USB_EPStartXfer+0x11a4>
 80085a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a2:	2b3e      	cmp	r3, #62	; 0x3e
 80085a4:	d81b      	bhi.n	80085de <USB_EPStartXfer+0x1106>
 80085a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ae:	2201      	movs	r2, #1
 80085b0:	4013      	ands	r3, r2
 80085b2:	d002      	beq.n	80085ba <USB_EPStartXfer+0x10e2>
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	3301      	adds	r3, #1
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	4a2a      	ldr	r2, [pc, #168]	; (800866c <USB_EPStartXfer+0x1194>)
 80085c2:	4694      	mov	ip, r2
 80085c4:	4463      	add	r3, ip
 80085c6:	6859      	ldr	r1, [r3, #4]
 80085c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ca:	069a      	lsls	r2, r3, #26
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	4826      	ldr	r0, [pc, #152]	; (800866c <USB_EPStartXfer+0x1194>)
 80085d4:	4684      	mov	ip, r0
 80085d6:	4463      	add	r3, ip
 80085d8:	430a      	orrs	r2, r1
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	e04e      	b.n	800867c <USB_EPStartXfer+0x11a4>
 80085de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e6:	221f      	movs	r2, #31
 80085e8:	4013      	ands	r3, r2
 80085ea:	d102      	bne.n	80085f2 <USB_EPStartXfer+0x111a>
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	3b01      	subs	r3, #1
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	4a1c      	ldr	r2, [pc, #112]	; (800866c <USB_EPStartXfer+0x1194>)
 80085fa:	4694      	mov	ip, r2
 80085fc:	4463      	add	r3, ip
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	069b      	lsls	r3, r3, #26
 8008604:	431a      	orrs	r2, r3
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	4917      	ldr	r1, [pc, #92]	; (800866c <USB_EPStartXfer+0x1194>)
 800860e:	468c      	mov	ip, r1
 8008610:	4463      	add	r3, ip
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	0609      	lsls	r1, r1, #24
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
 800861a:	e02f      	b.n	800867c <USB_EPStartXfer+0x11a4>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d12b      	bne.n	800867c <USB_EPStartXfer+0x11a4>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	4a10      	ldr	r2, [pc, #64]	; (800866c <USB_EPStartXfer+0x1194>)
 800862c:	4694      	mov	ip, r2
 800862e:	4463      	add	r3, ip
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	490c      	ldr	r1, [pc, #48]	; (800866c <USB_EPStartXfer+0x1194>)
 800863a:	468c      	mov	ip, r1
 800863c:	4463      	add	r3, ip
 800863e:	0412      	lsls	r2, r2, #16
 8008640:	0c12      	lsrs	r2, r2, #16
 8008642:	605a      	str	r2, [r3, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	4a08      	ldr	r2, [pc, #32]	; (800866c <USB_EPStartXfer+0x1194>)
 800864c:	4694      	mov	ip, r2
 800864e:	4463      	add	r3, ip
 8008650:	6859      	ldr	r1, [r3, #4]
 8008652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008654:	041a      	lsls	r2, r3, #16
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	4803      	ldr	r0, [pc, #12]	; (800866c <USB_EPStartXfer+0x1194>)
 800865e:	4684      	mov	ip, r0
 8008660:	4463      	add	r3, ip
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
 8008666:	e009      	b.n	800867c <USB_EPStartXfer+0x11a4>
      }
      else
      {
        return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e024      	b.n	80086b6 <USB_EPStartXfer+0x11de>
 800866c:	40009800 	.word	0x40009800
 8008670:	077f8f8f 	.word	0x077f8f8f
 8008674:	000080c0 	.word	0x000080c0
 8008678:	83ffffff 	.word	0x83ffffff
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	18d3      	adds	r3, r2, r3
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a0d      	ldr	r2, [pc, #52]	; (80086c0 <USB_EPStartXfer+0x11e8>)
 800868a:	4013      	ands	r3, r2
 800868c:	623b      	str	r3, [r7, #32]
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	2280      	movs	r2, #128	; 0x80
 8008692:	0152      	lsls	r2, r2, #5
 8008694:	4053      	eors	r3, r2
 8008696:	623b      	str	r3, [r7, #32]
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	2280      	movs	r2, #128	; 0x80
 800869c:	0192      	lsls	r2, r2, #6
 800869e:	4053      	eors	r3, r2
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	18d3      	adds	r3, r2, r3
 80086ac:	6a3a      	ldr	r2, [r7, #32]
 80086ae:	4905      	ldr	r1, [pc, #20]	; (80086c4 <USB_EPStartXfer+0x11ec>)
 80086b0:	430a      	orrs	r2, r1
 80086b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	0018      	movs	r0, r3
 80086b8:	46bd      	mov	sp, r7
 80086ba:	b019      	add	sp, #100	; 0x64
 80086bc:	bd90      	pop	{r4, r7, pc}
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	077fbf8f 	.word	0x077fbf8f
 80086c4:	00008080 	.word	0x00008080

080086c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d016      	beq.n	8008708 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	18d3      	adds	r3, r2, r3
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a16      	ldr	r2, [pc, #88]	; (8008740 <USB_EPSetStall+0x78>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2210      	movs	r2, #16
 80086f0:	4053      	eors	r3, r2
 80086f2:	60bb      	str	r3, [r7, #8]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	18d3      	adds	r3, r2, r3
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	4910      	ldr	r1, [pc, #64]	; (8008744 <USB_EPSetStall+0x7c>)
 8008702:	430a      	orrs	r2, r1
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	e016      	b.n	8008736 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	18d3      	adds	r3, r2, r3
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a0c      	ldr	r2, [pc, #48]	; (8008748 <USB_EPSetStall+0x80>)
 8008716:	4013      	ands	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2280      	movs	r2, #128	; 0x80
 800871e:	0152      	lsls	r2, r2, #5
 8008720:	4053      	eors	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	18d3      	adds	r3, r2, r3
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4904      	ldr	r1, [pc, #16]	; (8008744 <USB_EPSetStall+0x7c>)
 8008732:	430a      	orrs	r2, r1
 8008734:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	0018      	movs	r0, r3
 800873a:	46bd      	mov	sp, r7
 800873c:	b004      	add	sp, #16
 800873e:	bd80      	pop	{r7, pc}
 8008740:	077f8fbf 	.word	0x077f8fbf
 8008744:	00008080 	.word	0x00008080
 8008748:	077fbf8f 	.word	0x077fbf8f

0800874c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	7a9b      	ldrb	r3, [r3, #10]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d000      	beq.n	8008760 <USB_EPClearStall+0x14>
 800875e:	e075      	b.n	800884c <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d037      	beq.n	80087d8 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	18d3      	adds	r3, r2, r3
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	2240      	movs	r2, #64	; 0x40
 800877a:	4013      	ands	r3, r2
 800877c:	d011      	beq.n	80087a2 <USB_EPClearStall+0x56>
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	18d3      	adds	r3, r2, r3
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a33      	ldr	r2, [pc, #204]	; (8008858 <USB_EPClearStall+0x10c>)
 800878c:	4013      	ands	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	18d3      	adds	r3, r2, r3
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	492f      	ldr	r1, [pc, #188]	; (800885c <USB_EPClearStall+0x110>)
 800879e:	430a      	orrs	r2, r1
 80087a0:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d050      	beq.n	800884c <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	18d3      	adds	r3, r2, r3
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <USB_EPClearStall+0x114>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	60bb      	str	r3, [r7, #8]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2220      	movs	r2, #32
 80087c0:	4053      	eors	r3, r2
 80087c2:	60bb      	str	r3, [r7, #8]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	18d3      	adds	r3, r2, r3
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	4924      	ldr	r1, [pc, #144]	; (8008864 <USB_EPClearStall+0x118>)
 80087d2:	430a      	orrs	r2, r1
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e039      	b.n	800884c <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	18d3      	adds	r3, r2, r3
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	2380      	movs	r3, #128	; 0x80
 80087ea:	01db      	lsls	r3, r3, #7
 80087ec:	4013      	ands	r3, r2
 80087ee:	d011      	beq.n	8008814 <USB_EPClearStall+0xc8>
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	18d3      	adds	r3, r2, r3
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a16      	ldr	r2, [pc, #88]	; (8008858 <USB_EPClearStall+0x10c>)
 80087fe:	4013      	ands	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	18d3      	adds	r3, r2, r3
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	4916      	ldr	r1, [pc, #88]	; (8008868 <USB_EPClearStall+0x11c>)
 8008810:	430a      	orrs	r2, r1
 8008812:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	18d3      	adds	r3, r2, r3
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a12      	ldr	r2, [pc, #72]	; (800886c <USB_EPClearStall+0x120>)
 8008822:	4013      	ands	r3, r2
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2280      	movs	r2, #128	; 0x80
 800882a:	0152      	lsls	r2, r2, #5
 800882c:	4053      	eors	r3, r2
 800882e:	617b      	str	r3, [r7, #20]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2280      	movs	r2, #128	; 0x80
 8008834:	0192      	lsls	r2, r2, #6
 8008836:	4053      	eors	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	18d3      	adds	r3, r2, r3
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4907      	ldr	r1, [pc, #28]	; (8008864 <USB_EPClearStall+0x118>)
 8008848:	430a      	orrs	r2, r1
 800884a:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	0018      	movs	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	b008      	add	sp, #32
 8008854:	bd80      	pop	{r7, pc}
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	077f8f8f 	.word	0x077f8f8f
 800885c:	000080c0 	.word	0x000080c0
 8008860:	077f8fbf 	.word	0x077f8fbf
 8008864:	00008080 	.word	0x00008080
 8008868:	0000c080 	.word	0x0000c080
 800886c:	077fbf8f 	.word	0x077fbf8f

08008870 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	000a      	movs	r2, r1
 800887a:	1cfb      	adds	r3, r7, #3
 800887c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800887e:	1cfb      	adds	r3, r7, #3
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d102      	bne.n	800888c <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2280      	movs	r2, #128	; 0x80
 800888a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	0018      	movs	r0, r3
 8008890:	46bd      	mov	sp, r7
 8008892:	b002      	add	sp, #8
 8008894:	bd80      	pop	{r7, pc}

08008896 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a2:	2280      	movs	r2, #128	; 0x80
 80088a4:	0212      	lsls	r2, r2, #8
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	0018      	movs	r0, r3
 80088b0:	46bd      	mov	sp, r7
 80088b2:	b002      	add	sp, #8
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80088c4:	68fb      	ldr	r3, [r7, #12]
}
 80088c6:	0018      	movs	r0, r3
 80088c8:	46bd      	mov	sp, r7
 80088ca:	b004      	add	sp, #16
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08a      	sub	sp, #40	; 0x28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	0019      	movs	r1, r3
 80088dc:	1dbb      	adds	r3, r7, #6
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	1c0a      	adds	r2, r1, #0
 80088e4:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count, tmp;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80088e6:	1d3b      	adds	r3, r7, #4
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	3303      	adds	r3, #3
 80088ec:	089b      	lsrs	r3, r3, #2
 80088ee:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80088f0:	2016      	movs	r0, #22
 80088f2:	183b      	adds	r3, r7, r0
 80088f4:	1d3a      	adds	r2, r7, #4
 80088f6:	8812      	ldrh	r2, [r2, #0]
 80088f8:	2103      	movs	r1, #3
 80088fa:	400a      	ands	r2, r1
 80088fc:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8008902:	183b      	adds	r3, r7, r0
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <USB_WritePMA+0x40>
  {
    NbWords--;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	3b01      	subs	r3, #1
 800890e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8008910:	1dbb      	adds	r3, r7, #6
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	4a29      	ldr	r2, [pc, #164]	; (80089bc <USB_WritePMA+0xec>)
 8008916:	4694      	mov	ip, r2
 8008918:	4463      	add	r3, ip
 800891a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
 8008920:	e01f      	b.n	8008962 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	7859      	ldrb	r1, [r3, #1]
 8008928:	0209      	lsls	r1, r1, #8
 800892a:	430a      	orrs	r2, r1
 800892c:	7899      	ldrb	r1, [r3, #2]
 800892e:	0409      	lsls	r1, r1, #16
 8008930:	430a      	orrs	r2, r1
 8008932:	78db      	ldrb	r3, [r3, #3]
 8008934:	061b      	lsls	r3, r3, #24
 8008936:	4313      	orrs	r3, r2
 8008938:	001a      	movs	r2, r3
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	3304      	adds	r3, #4
 8008942:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	3301      	adds	r3, #1
 8008948:	613b      	str	r3, [r7, #16]
    pBuf++;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	3301      	adds	r3, #1
 8008954:	613b      	str	r3, [r7, #16]
    pBuf++;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	3301      	adds	r3, #1
 800895a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	3b01      	subs	r3, #1
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1dc      	bne.n	8008922 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8008968:	2316      	movs	r3, #22
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d020      	beq.n	80089b4 <USB_WritePMA+0xe4>
  {
    count = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
    tmp = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	623b      	str	r3, [r7, #32]

    do
    {
      tmp = tmp | ((uint32_t)(*(uint8_t *)pBuf) << (8U * count));
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	001a      	movs	r2, r3
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	409a      	lsls	r2, r3
 8008986:	0013      	movs	r3, r2
 8008988:	6a3a      	ldr	r2, [r7, #32]
 800898a:	4313      	orrs	r3, r2
 800898c:	623b      	str	r3, [r7, #32]
      count++;
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	3301      	adds	r3, #1
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	3301      	adds	r3, #1
 8008998:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800899a:	2116      	movs	r1, #22
 800899c:	187b      	adds	r3, r7, r1
 800899e:	881a      	ldrh	r2, [r3, #0]
 80089a0:	187b      	adds	r3, r7, r1
 80089a2:	3a01      	subs	r2, #1
 80089a4:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80089a6:	187b      	adds	r3, r7, r1
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e5      	bne.n	800897a <USB_WritePMA+0xaa>

    *pdwVal = tmp;
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	6a3a      	ldr	r2, [r7, #32]
 80089b2:	601a      	str	r2, [r3, #0]
  }
}
 80089b4:	46c0      	nop			; (mov r8, r8)
 80089b6:	46bd      	mov	sp, r7
 80089b8:	b00a      	add	sp, #40	; 0x28
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40009800 	.word	0x40009800

080089c0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089c0:	b590      	push	{r4, r7, lr}
 80089c2:	b08b      	sub	sp, #44	; 0x2c
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	0019      	movs	r1, r3
 80089cc:	1dbb      	adds	r3, r7, #6
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	1d3b      	adds	r3, r7, #4
 80089d2:	1c0a      	adds	r2, r1, #0
 80089d4:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count, tmp;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	3303      	adds	r3, #3
 80089dc:	089b      	lsrs	r3, r3, #2
 80089de:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80089e0:	201a      	movs	r0, #26
 80089e2:	183b      	adds	r3, r7, r0
 80089e4:	1d3a      	adds	r2, r7, #4
 80089e6:	8812      	ldrh	r2, [r2, #0]
 80089e8:	2103      	movs	r1, #3
 80089ea:	400a      	ands	r2, r1
 80089ec:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80089f2:	1dbb      	adds	r3, r7, #6
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	4a3a      	ldr	r2, [pc, #232]	; (8008ae0 <USB_ReadPMA+0x120>)
 80089f8:	4694      	mov	ip, r2
 80089fa:	4463      	add	r3, ip
 80089fc:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80089fe:	183b      	adds	r3, r7, r0
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a10:	e03c      	b.n	8008a8c <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	21ff      	movs	r1, #255	; 0xff
 8008a1a:	4011      	ands	r1, r2
 8008a1c:	000c      	movs	r4, r1
 8008a1e:	7819      	ldrb	r1, [r3, #0]
 8008a20:	2000      	movs	r0, #0
 8008a22:	4001      	ands	r1, r0
 8008a24:	1c08      	adds	r0, r1, #0
 8008a26:	1c21      	adds	r1, r4, #0
 8008a28:	4301      	orrs	r1, r0
 8008a2a:	7019      	strb	r1, [r3, #0]
 8008a2c:	0a11      	lsrs	r1, r2, #8
 8008a2e:	20ff      	movs	r0, #255	; 0xff
 8008a30:	4001      	ands	r1, r0
 8008a32:	000c      	movs	r4, r1
 8008a34:	7859      	ldrb	r1, [r3, #1]
 8008a36:	2000      	movs	r0, #0
 8008a38:	4001      	ands	r1, r0
 8008a3a:	1c08      	adds	r0, r1, #0
 8008a3c:	1c21      	adds	r1, r4, #0
 8008a3e:	4301      	orrs	r1, r0
 8008a40:	7059      	strb	r1, [r3, #1]
 8008a42:	0c11      	lsrs	r1, r2, #16
 8008a44:	20ff      	movs	r0, #255	; 0xff
 8008a46:	4001      	ands	r1, r0
 8008a48:	000c      	movs	r4, r1
 8008a4a:	7899      	ldrb	r1, [r3, #2]
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	4001      	ands	r1, r0
 8008a50:	1c08      	adds	r0, r1, #0
 8008a52:	1c21      	adds	r1, r4, #0
 8008a54:	4301      	orrs	r1, r0
 8008a56:	7099      	strb	r1, [r3, #2]
 8008a58:	0e10      	lsrs	r0, r2, #24
 8008a5a:	78da      	ldrb	r2, [r3, #3]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	400a      	ands	r2, r1
 8008a60:	1c11      	adds	r1, r2, #0
 8008a62:	1c02      	adds	r2, r0, #0
 8008a64:	430a      	orrs	r2, r1
 8008a66:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	623b      	str	r3, [r7, #32]
    pBuf++;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	3301      	adds	r3, #1
 8008a72:	617b      	str	r3, [r7, #20]
    pBuf++;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	3301      	adds	r3, #1
 8008a78:	617b      	str	r3, [r7, #20]
    pBuf++;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	617b      	str	r3, [r7, #20]
    pBuf++;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3301      	adds	r3, #1
 8008a84:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1bf      	bne.n	8008a12 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8008a92:	231a      	movs	r3, #26
 8008a94:	18fb      	adds	r3, r7, r3
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01d      	beq.n	8008ad8 <USB_ReadPMA+0x118>
  {
    count = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
    tmp = *(__IO uint32_t *)pdwVal;
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	613b      	str	r3, [r7, #16]
    do
    {
      *(uint8_t *)pBuf = (uint8_t)(tmp >> (8U * (uint8_t)(count)));
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	40da      	lsrs	r2, r3
 8008ab0:	0013      	movs	r3, r2
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	701a      	strb	r2, [r3, #0]
      count++;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	3301      	adds	r3, #1
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
      remaining_bytes-- ;
 8008ac4:	211a      	movs	r1, #26
 8008ac6:	187b      	adds	r3, r7, r1
 8008ac8:	881a      	ldrh	r2, [r3, #0]
 8008aca:	187b      	adds	r3, r7, r1
 8008acc:	3a01      	subs	r2, #1
 8008ace:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8008ad0:	187b      	adds	r3, r7, r1
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <USB_ReadPMA+0xe6>
  }
}
 8008ad8:	46c0      	nop			; (mov r8, r8)
 8008ada:	46bd      	mov	sp, r7
 8008adc:	b00b      	add	sp, #44	; 0x2c
 8008ade:	bd90      	pop	{r4, r7, pc}
 8008ae0:	40009800 	.word	0x40009800

08008ae4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	000a      	movs	r2, r1
 8008aee:	1cfb      	adds	r3, r7, #3
 8008af0:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008af2:	2387      	movs	r3, #135	; 0x87
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	0018      	movs	r0, r3
 8008af8:	f004 fdfa 	bl	800d6f0 <USBD_static_malloc>
 8008afc:	0003      	movs	r3, r0
 8008afe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassData = NULL;
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	23af      	movs	r3, #175	; 0xaf
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8008b10:	2302      	movs	r3, #2
 8008b12:	e06e      	b.n	8008bf2 <USBD_CDC_Init+0x10e>
  }

  pdev->pClassData = (void *)hcdc;
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	23af      	movs	r3, #175	; 0xaf
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	68f9      	ldr	r1, [r7, #12]
 8008b1c:	50d1      	str	r1, [r2, r3]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	7c1b      	ldrb	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11a      	bne.n	8008b5c <USBD_CDC_Init+0x78>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b26:	2380      	movs	r3, #128	; 0x80
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	2181      	movs	r1, #129	; 0x81
 8008b30:	f004 fc19 	bl	800d366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b3a:	2380      	movs	r3, #128	; 0x80
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	2202      	movs	r2, #2
 8008b42:	2101      	movs	r1, #1
 8008b44:	f004 fc0f 	bl	800d366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	23bc      	movs	r3, #188	; 0xbc
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	2101      	movs	r1, #1
 8008b50:	52d1      	strh	r1, [r2, r3]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	224e      	movs	r2, #78	; 0x4e
 8008b56:	2110      	movs	r1, #16
 8008b58:	5299      	strh	r1, [r3, r2]
 8008b5a:	e017      	b.n	8008b8c <USBD_CDC_Init+0xa8>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	2340      	movs	r3, #64	; 0x40
 8008b60:	2202      	movs	r2, #2
 8008b62:	2181      	movs	r1, #129	; 0x81
 8008b64:	f004 fbff 	bl	800d366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	2202      	movs	r2, #2
 8008b74:	2101      	movs	r1, #1
 8008b76:	f004 fbf6 	bl	800d366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	23bc      	movs	r3, #188	; 0xbc
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	2101      	movs	r1, #1
 8008b82:	52d1      	strh	r1, [r2, r3]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	224e      	movs	r2, #78	; 0x4e
 8008b88:	2110      	movs	r1, #16
 8008b8a:	5299      	strh	r1, [r3, r2]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	2308      	movs	r3, #8
 8008b90:	2203      	movs	r2, #3
 8008b92:	2182      	movs	r1, #130	; 0x82
 8008b94:	f004 fbe7 	bl	800d366 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	224c      	movs	r2, #76	; 0x4c
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	5299      	strh	r1, [r3, r2]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	23b0      	movs	r3, #176	; 0xb0
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	58d3      	ldr	r3, [r2, r3]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	2385      	movs	r3, #133	; 0x85
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	2386      	movs	r3, #134	; 0x86
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	50d1      	str	r1, [r2, r3]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	7c1b      	ldrb	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <USBD_CDC_Init+0xfa>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	2381      	movs	r3, #129	; 0x81
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	58d2      	ldr	r2, [r2, r3]
 8008bd0:	2380      	movs	r3, #128	; 0x80
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	f004 fd09 	bl	800d5ee <USBD_LL_PrepareReceive>
 8008bdc:	e008      	b.n	8008bf0 <USBD_CDC_Init+0x10c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	2381      	movs	r3, #129	; 0x81
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	58d2      	ldr	r2, [r2, r3]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	2101      	movs	r1, #1
 8008bec:	f004 fcff 	bl	800d5ee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b004      	add	sp, #16
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	000a      	movs	r2, r1
 8008c04:	1cfb      	adds	r3, r7, #3
 8008c06:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2181      	movs	r1, #129	; 0x81
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f004 fbe1 	bl	800d3d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f004 fbd9 	bl	800d3d4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	23bc      	movs	r3, #188	; 0xbc
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	2100      	movs	r1, #0
 8008c2a:	52d1      	strh	r1, [r2, r3]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2182      	movs	r1, #130	; 0x82
 8008c30:	0018      	movs	r0, r3
 8008c32:	f004 fbcf 	bl	800d3d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	224c      	movs	r2, #76	; 0x4c
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	5299      	strh	r1, [r3, r2]
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	224e      	movs	r2, #78	; 0x4e
 8008c42:	2100      	movs	r1, #0
 8008c44:	5299      	strh	r1, [r3, r2]

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	23af      	movs	r3, #175	; 0xaf
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	58d3      	ldr	r3, [r2, r3]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d011      	beq.n	8008c76 <USBD_CDC_DeInit+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	23b0      	movs	r3, #176	; 0xb0
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	58d3      	ldr	r3, [r2, r3]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	23af      	movs	r3, #175	; 0xaf
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	58d3      	ldr	r3, [r2, r3]
 8008c66:	0018      	movs	r0, r3
 8008c68:	f004 fd4e 	bl	800d708 <USBD_static_free>
    pdev->pClassData = NULL;
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	23af      	movs	r3, #175	; 0xaf
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	2100      	movs	r1, #0
 8008c74:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	0018      	movs	r0, r3
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	b002      	add	sp, #8
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	23af      	movs	r3, #175	; 0xaf
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	58d3      	ldr	r3, [r2, r3]
 8008c92:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c94:	230d      	movs	r3, #13
 8008c96:	18fb      	adds	r3, r7, r3
 8008c98:	2200      	movs	r2, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8008c9c:	230a      	movs	r3, #10
 8008c9e:	18fb      	adds	r3, r7, r3
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ca4:	2317      	movs	r3, #23
 8008ca6:	18fb      	adds	r3, r7, r3
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <USBD_CDC_Setup+0x36>
  {
    return (uint8_t)USBD_FAIL;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e0be      	b.n	8008e34 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	001a      	movs	r2, r3
 8008cbc:	2360      	movs	r3, #96	; 0x60
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	d048      	beq.n	8008d54 <USBD_CDC_Setup+0xd4>
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	d000      	beq.n	8008cc8 <USBD_CDC_Setup+0x48>
 8008cc6:	e0a7      	b.n	8008e18 <USBD_CDC_Setup+0x198>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	88db      	ldrh	r3, [r3, #6]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d036      	beq.n	8008d3e <USBD_CDC_Setup+0xbe>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	da1c      	bge.n	8008d14 <USBD_CDC_Setup+0x94>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	23b0      	movs	r3, #176	; 0xb0
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	58d3      	ldr	r3, [r2, r3]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008ce8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	88d2      	ldrh	r2, [r2, #6]
 8008cee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	88db      	ldrh	r3, [r3, #6]
 8008cf4:	220e      	movs	r2, #14
 8008cf6:	18ba      	adds	r2, r7, r2
 8008cf8:	b299      	uxth	r1, r3
 8008cfa:	2907      	cmp	r1, #7
 8008cfc:	d900      	bls.n	8008d00 <USBD_CDC_Setup+0x80>
 8008cfe:	2307      	movs	r3, #7
 8008d00:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d02:	6939      	ldr	r1, [r7, #16]
 8008d04:	230e      	movs	r3, #14
 8008d06:	18fb      	adds	r3, r7, r3
 8008d08:	881a      	ldrh	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f001 fc56 	bl	800a5be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008d12:	e08c      	b.n	8008e2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	7859      	ldrb	r1, [r3, #1]
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	2380      	movs	r3, #128	; 0x80
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	88db      	ldrh	r3, [r3, #6]
 8008d24:	b2d9      	uxtb	r1, r3
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	4a44      	ldr	r2, [pc, #272]	; (8008e3c <USBD_CDC_Setup+0x1bc>)
 8008d2a:	5499      	strb	r1, [r3, r2]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008d2c:	6939      	ldr	r1, [r7, #16]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	88db      	ldrh	r3, [r3, #6]
 8008d32:	001a      	movs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	0018      	movs	r0, r3
 8008d38:	f001 fc6e 	bl	800a618 <USBD_CtlPrepareRx>
      break;
 8008d3c:	e077      	b.n	8008e2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	23b0      	movs	r3, #176	; 0xb0
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	58d3      	ldr	r3, [r2, r3]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	7850      	ldrb	r0, [r2, #1]
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4798      	blx	r3
      break;
 8008d52:	e06c      	b.n	8008e2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	785b      	ldrb	r3, [r3, #1]
 8008d58:	2b0b      	cmp	r3, #11
 8008d5a:	d03c      	beq.n	8008dd6 <USBD_CDC_Setup+0x156>
 8008d5c:	dc4d      	bgt.n	8008dfa <USBD_CDC_Setup+0x17a>
 8008d5e:	2b0a      	cmp	r3, #10
 8008d60:	d01f      	beq.n	8008da2 <USBD_CDC_Setup+0x122>
 8008d62:	dc4a      	bgt.n	8008dfa <USBD_CDC_Setup+0x17a>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <USBD_CDC_Setup+0xee>
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d051      	beq.n	8008e10 <USBD_CDC_Setup+0x190>
 8008d6c:	e045      	b.n	8008dfa <USBD_CDC_Setup+0x17a>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	23a7      	movs	r3, #167	; 0xa7
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	5cd3      	ldrb	r3, [r2, r3]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d107      	bne.n	8008d8c <USBD_CDC_Setup+0x10c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d7c:	230a      	movs	r3, #10
 8008d7e:	18f9      	adds	r1, r7, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	0018      	movs	r0, r3
 8008d86:	f001 fc1a 	bl	800a5be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d8a:	e044      	b.n	8008e16 <USBD_CDC_Setup+0x196>
            USBD_CtlError(pdev, req);
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	0011      	movs	r1, r2
 8008d92:	0018      	movs	r0, r3
 8008d94:	f001 fb8b 	bl	800a4ae <USBD_CtlError>
            ret = USBD_FAIL;
 8008d98:	2317      	movs	r3, #23
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	2203      	movs	r2, #3
 8008d9e:	701a      	strb	r2, [r3, #0]
          break;
 8008da0:	e039      	b.n	8008e16 <USBD_CDC_Setup+0x196>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	23a7      	movs	r3, #167	; 0xa7
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	5cd3      	ldrb	r3, [r2, r3]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d107      	bne.n	8008dc0 <USBD_CDC_Setup+0x140>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008db0:	230d      	movs	r3, #13
 8008db2:	18f9      	adds	r1, r7, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	0018      	movs	r0, r3
 8008dba:	f001 fc00 	bl	800a5be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dbe:	e02a      	b.n	8008e16 <USBD_CDC_Setup+0x196>
            USBD_CtlError(pdev, req);
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	0011      	movs	r1, r2
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f001 fb71 	bl	800a4ae <USBD_CtlError>
            ret = USBD_FAIL;
 8008dcc:	2317      	movs	r3, #23
 8008dce:	18fb      	adds	r3, r7, r3
 8008dd0:	2203      	movs	r2, #3
 8008dd2:	701a      	strb	r2, [r3, #0]
          break;
 8008dd4:	e01f      	b.n	8008e16 <USBD_CDC_Setup+0x196>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	23a7      	movs	r3, #167	; 0xa7
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	5cd3      	ldrb	r3, [r2, r3]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d017      	beq.n	8008e14 <USBD_CDC_Setup+0x194>
          {
            USBD_CtlError(pdev, req);
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	0011      	movs	r1, r2
 8008dea:	0018      	movs	r0, r3
 8008dec:	f001 fb5f 	bl	800a4ae <USBD_CtlError>
            ret = USBD_FAIL;
 8008df0:	2317      	movs	r3, #23
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	2203      	movs	r2, #3
 8008df6:	701a      	strb	r2, [r3, #0]
          }
          break;
 8008df8:	e00c      	b.n	8008e14 <USBD_CDC_Setup+0x194>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	0011      	movs	r1, r2
 8008e00:	0018      	movs	r0, r3
 8008e02:	f001 fb54 	bl	800a4ae <USBD_CtlError>
          ret = USBD_FAIL;
 8008e06:	2317      	movs	r3, #23
 8008e08:	18fb      	adds	r3, r7, r3
 8008e0a:	2203      	movs	r2, #3
 8008e0c:	701a      	strb	r2, [r3, #0]
          break;
 8008e0e:	e002      	b.n	8008e16 <USBD_CDC_Setup+0x196>
          break;
 8008e10:	46c0      	nop			; (mov r8, r8)
 8008e12:	e00c      	b.n	8008e2e <USBD_CDC_Setup+0x1ae>
          break;
 8008e14:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008e16:	e00a      	b.n	8008e2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	0011      	movs	r1, r2
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f001 fb45 	bl	800a4ae <USBD_CtlError>
      ret = USBD_FAIL;
 8008e24:	2317      	movs	r3, #23
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	2203      	movs	r2, #3
 8008e2a:	701a      	strb	r2, [r3, #0]
      break;
 8008e2c:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8008e2e:	2317      	movs	r3, #23
 8008e30:	18fb      	adds	r3, r7, r3
 8008e32:	781b      	ldrb	r3, [r3, #0]
}
 8008e34:	0018      	movs	r0, r3
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b006      	add	sp, #24
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	00000201 	.word	0x00000201

08008e40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e40:	b590      	push	{r4, r7, lr}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	000a      	movs	r2, r1
 8008e4a:	1cfb      	adds	r3, r7, #3
 8008e4c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	23b1      	movs	r3, #177	; 0xb1
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	58d3      	ldr	r3, [r2, r3]
 8008e56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	23af      	movs	r3, #175	; 0xaf
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	58d3      	ldr	r3, [r2, r3]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <USBD_CDC_DataIn+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e05a      	b.n	8008f1e <USBD_CDC_DataIn+0xde>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	23af      	movs	r3, #175	; 0xaf
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	58d3      	ldr	r3, [r2, r3]
 8008e70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008e72:	1cfb      	adds	r3, r7, #3
 8008e74:	781a      	ldrb	r2, [r3, #0]
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	0013      	movs	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	189b      	adds	r3, r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	18cb      	adds	r3, r1, r3
 8008e82:	3318      	adds	r3, #24
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d02b      	beq.n	8008ee2 <USBD_CDC_DataIn+0xa2>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e8a:	1cfb      	adds	r3, r7, #3
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	0013      	movs	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	18cb      	adds	r3, r1, r3
 8008e9a:	3318      	adds	r3, #24
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	1cfb      	adds	r3, r7, #3
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	0013      	movs	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	189b      	adds	r3, r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	18cb      	adds	r3, r1, r3
 8008eae:	3348      	adds	r3, #72	; 0x48
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	0019      	movs	r1, r3
 8008eb4:	f7f7 f9ae 	bl	8000214 <__aeabi_uidivmod>
 8008eb8:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008eba:	d112      	bne.n	8008ee2 <USBD_CDC_DataIn+0xa2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008ebc:	1cfb      	adds	r3, r7, #3
 8008ebe:	781a      	ldrb	r2, [r3, #0]
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	0013      	movs	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	189b      	adds	r3, r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	18cb      	adds	r3, r1, r3
 8008ecc:	3318      	adds	r3, #24
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ed2:	1cfb      	adds	r3, r7, #3
 8008ed4:	7819      	ldrb	r1, [r3, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	2200      	movs	r2, #0
 8008edc:	f004 fb57 	bl	800d58e <USBD_LL_Transmit>
 8008ee0:	e01c      	b.n	8008f1c <USBD_CDC_DataIn+0xdc>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	2385      	movs	r3, #133	; 0x85
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	2100      	movs	r1, #0
 8008eea:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	23b0      	movs	r3, #176	; 0xb0
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	58d3      	ldr	r3, [r2, r3]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <USBD_CDC_DataIn+0xdc>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	23b0      	movs	r3, #176	; 0xb0
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	58d3      	ldr	r3, [r2, r3]
 8008f02:	691c      	ldr	r4, [r3, #16]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	2382      	movs	r3, #130	; 0x82
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	58d0      	ldr	r0, [r2, r3]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2284      	movs	r2, #132	; 0x84
 8008f10:	0092      	lsls	r2, r2, #2
 8008f12:	1899      	adds	r1, r3, r2
 8008f14:	1cfb      	adds	r3, r7, #3
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	001a      	movs	r2, r3
 8008f1a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	0018      	movs	r0, r3
 8008f20:	46bd      	mov	sp, r7
 8008f22:	b005      	add	sp, #20
 8008f24:	bd90      	pop	{r4, r7, pc}

08008f26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	000a      	movs	r2, r1
 8008f30:	1cfb      	adds	r3, r7, #3
 8008f32:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	23af      	movs	r3, #175	; 0xaf
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	58d3      	ldr	r3, [r2, r3]
 8008f3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	23af      	movs	r3, #175	; 0xaf
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	58d3      	ldr	r3, [r2, r3]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <USBD_CDC_DataOut+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e01c      	b.n	8008f88 <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f4e:	1cfb      	adds	r3, r7, #3
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0011      	movs	r1, r2
 8008f56:	0018      	movs	r0, r3
 8008f58:	f004 fb79 	bl	800d64e <USBD_LL_GetRxDataSize>
 8008f5c:	0001      	movs	r1, r0
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	2383      	movs	r3, #131	; 0x83
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	23b0      	movs	r3, #176	; 0xb0
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	58d3      	ldr	r3, [r2, r3]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	68f9      	ldr	r1, [r7, #12]
 8008f72:	2381      	movs	r3, #129	; 0x81
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	58c8      	ldr	r0, [r1, r3]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2183      	movs	r1, #131	; 0x83
 8008f7c:	0089      	lsls	r1, r1, #2
 8008f7e:	468c      	mov	ip, r1
 8008f80:	4463      	add	r3, ip
 8008f82:	0019      	movs	r1, r3
 8008f84:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	0018      	movs	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b004      	add	sp, #16
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	23af      	movs	r3, #175	; 0xaf
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	58d3      	ldr	r3, [r2, r3]
 8008fa0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <USBD_CDC_EP0_RxReady+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e020      	b.n	8008fee <USBD_CDC_EP0_RxReady+0x5e>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	23b0      	movs	r3, #176	; 0xb0
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	58d3      	ldr	r3, [r2, r3]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d019      	beq.n	8008fec <USBD_CDC_EP0_RxReady+0x5c>
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	2380      	movs	r3, #128	; 0x80
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	5cd3      	ldrb	r3, [r2, r3]
 8008fc0:	2bff      	cmp	r3, #255	; 0xff
 8008fc2:	d013      	beq.n	8008fec <USBD_CDC_EP0_RxReady+0x5c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	23b0      	movs	r3, #176	; 0xb0
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	58d3      	ldr	r3, [r2, r3]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	2280      	movs	r2, #128	; 0x80
 8008fd2:	0092      	lsls	r2, r2, #2
 8008fd4:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 8008fd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4c07      	ldr	r4, [pc, #28]	; (8008ff8 <USBD_CDC_EP0_RxReady+0x68>)
 8008fdc:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fde:	b292      	uxth	r2, r2
 8008fe0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	2380      	movs	r3, #128	; 0x80
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	21ff      	movs	r1, #255	; 0xff
 8008fea:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	0018      	movs	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b005      	add	sp, #20
 8008ff4:	bd90      	pop	{r4, r7, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	00000201 	.word	0x00000201

08008ffc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2243      	movs	r2, #67	; 0x43
 8009008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800900a:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800900c:	0018      	movs	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	b002      	add	sp, #8
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20000094 	.word	0x20000094

08009018 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2243      	movs	r2, #67	; 0x43
 8009024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009026:	4b02      	ldr	r3, [pc, #8]	; (8009030 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b002      	add	sp, #8
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000050 	.word	0x20000050

08009034 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2243      	movs	r2, #67	; 0x43
 8009040:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009042:	4b02      	ldr	r3, [pc, #8]	; (800904c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009044:	0018      	movs	r0, r3
 8009046:	46bd      	mov	sp, r7
 8009048:	b002      	add	sp, #8
 800904a:	bd80      	pop	{r7, pc}
 800904c:	200000d8 	.word	0x200000d8

08009050 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	220a      	movs	r2, #10
 800905c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800905e:	4b02      	ldr	r3, [pc, #8]	; (8009068 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8009060:	0018      	movs	r0, r3
 8009062:	46bd      	mov	sp, r7
 8009064:	b002      	add	sp, #8
 8009066:	bd80      	pop	{r7, pc}
 8009068:	2000000c 	.word	0x2000000c

0800906c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800907c:	2303      	movs	r3, #3
 800907e:	e005      	b.n	800908c <USBD_CDC_RegisterInterface+0x20>
  }

  pdev->pUserData = fops;
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	23b0      	movs	r3, #176	; 0xb0
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	0018      	movs	r0, r3
 800908e:	46bd      	mov	sp, r7
 8009090:	b002      	add	sp, #8
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	23af      	movs	r3, #175	; 0xaf
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	58d3      	ldr	r3, [r2, r3]
 80090a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <USBD_CDC_SetTxBuffer+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e00a      	b.n	80090ca <USBD_CDC_SetTxBuffer+0x36>
  }

  hcdc->TxBuffer = pbuff;
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	2382      	movs	r3, #130	; 0x82
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	2384      	movs	r3, #132	; 0x84
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	0018      	movs	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	b006      	add	sp, #24
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	23af      	movs	r3, #175	; 0xaf
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	58d3      	ldr	r3, [r2, r3]
 80090e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <USBD_CDC_SetRxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e005      	b.n	80090fc <USBD_CDC_SetRxBuffer+0x2a>
  }

  hcdc->RxBuffer = pbuff;
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	2381      	movs	r3, #129	; 0x81
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b004      	add	sp, #16
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	23af      	movs	r3, #175	; 0xaf
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	58d3      	ldr	r3, [r2, r3]
 8009114:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	23af      	movs	r3, #175	; 0xaf
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	58d3      	ldr	r3, [r2, r3]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009122:	2303      	movs	r3, #3
 8009124:	e018      	b.n	8009158 <USBD_CDC_ReceivePacket+0x54>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7c1b      	ldrb	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	2381      	movs	r3, #129	; 0x81
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	58d2      	ldr	r2, [r2, r3]
 8009136:	2380      	movs	r3, #128	; 0x80
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	2101      	movs	r1, #1
 800913e:	f004 fa56 	bl	800d5ee <USBD_LL_PrepareReceive>
 8009142:	e008      	b.n	8009156 <USBD_CDC_ReceivePacket+0x52>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	2381      	movs	r3, #129	; 0x81
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	58d2      	ldr	r2, [r2, r3]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	2340      	movs	r3, #64	; 0x40
 8009150:	2101      	movs	r1, #1
 8009152:	f004 fa4c 	bl	800d5ee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	0018      	movs	r0, r3
 800915a:	46bd      	mov	sp, r7
 800915c:	b004      	add	sp, #16
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	1dfb      	adds	r3, r7, #7
 800916c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009174:	2303      	movs	r3, #3
 8009176:	e029      	b.n	80091cc <USBD_Init+0x6c>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	23ae      	movs	r3, #174	; 0xae
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	2100      	movs	r1, #0
 8009180:	50d1      	str	r1, [r2, r3]
  pdev->pUserData = NULL;
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	23b0      	movs	r3, #176	; 0xb0
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	2100      	movs	r1, #0
 800918a:	50d1      	str	r1, [r2, r3]
  pdev->pConfDesc = NULL;
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	23b3      	movs	r3, #179	; 0xb3
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	2100      	movs	r1, #0
 8009194:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	23ad      	movs	r3, #173	; 0xad
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	23a7      	movs	r3, #167	; 0xa7
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	2101      	movs	r1, #1
 80091ae:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	1dfa      	adds	r2, r7, #7
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091b8:	2517      	movs	r5, #23
 80091ba:	197c      	adds	r4, r7, r5
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	0018      	movs	r0, r3
 80091c0:	f004 f83a 	bl	800d238 <USBD_LL_Init>
 80091c4:	0003      	movs	r3, r0
 80091c6:	7023      	strb	r3, [r4, #0]

  return ret;
 80091c8:	197b      	adds	r3, r7, r5
 80091ca:	781b      	ldrb	r3, [r3, #0]
}
 80091cc:	0018      	movs	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b006      	add	sp, #24
 80091d2:	bdb0      	pop	{r4, r5, r7, pc}

080091d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091de:	230e      	movs	r3, #14
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	2200      	movs	r2, #0
 80091e4:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e01a      	b.n	8009226 <USBD_RegisterClass+0x52>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	23ae      	movs	r3, #174	; 0xae
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	23ae      	movs	r3, #174	; 0xae
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	58d3      	ldr	r3, [r2, r3]
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00d      	beq.n	8009224 <USBD_RegisterClass+0x50>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	23ae      	movs	r3, #174	; 0xae
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	58d3      	ldr	r3, [r2, r3]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	220e      	movs	r2, #14
 8009214:	18ba      	adds	r2, r7, r2
 8009216:	0010      	movs	r0, r2
 8009218:	4798      	blx	r3
 800921a:	0001      	movs	r1, r0
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	23b3      	movs	r3, #179	; 0xb3
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	0018      	movs	r0, r3
 8009228:	46bd      	mov	sp, r7
 800922a:	b004      	add	sp, #16
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	0018      	movs	r0, r3
 800923a:	f004 f86f 	bl	800d31c <USBD_LL_Start>
 800923e:	0003      	movs	r3, r0
}
 8009240:	0018      	movs	r0, r3
 8009242:	46bd      	mov	sp, r7
 8009244:	b002      	add	sp, #8
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	0018      	movs	r0, r3
 8009254:	46bd      	mov	sp, r7
 8009256:	b002      	add	sp, #8
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800925a:	b590      	push	{r4, r7, lr}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	000a      	movs	r2, r1
 8009264:	1cfb      	adds	r3, r7, #3
 8009266:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009268:	210f      	movs	r1, #15
 800926a:	187b      	adds	r3, r7, r1
 800926c:	2203      	movs	r2, #3
 800926e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	23ae      	movs	r3, #174	; 0xae
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	58d3      	ldr	r3, [r2, r3]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00c      	beq.n	8009296 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	23ae      	movs	r3, #174	; 0xae
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	58d3      	ldr	r3, [r2, r3]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	187c      	adds	r4, r7, r1
 8009288:	1cfa      	adds	r2, r7, #3
 800928a:	7811      	ldrb	r1, [r2, #0]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	0010      	movs	r0, r2
 8009290:	4798      	blx	r3
 8009292:	0003      	movs	r3, r0
 8009294:	7023      	strb	r3, [r4, #0]
  }

  return ret;
 8009296:	230f      	movs	r3, #15
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	781b      	ldrb	r3, [r3, #0]
}
 800929c:	0018      	movs	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	b005      	add	sp, #20
 80092a2:	bd90      	pop	{r4, r7, pc}

080092a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	000a      	movs	r2, r1
 80092ae:	1cfb      	adds	r3, r7, #3
 80092b0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	23ae      	movs	r3, #174	; 0xae
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	58d3      	ldr	r3, [r2, r3]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <USBD_ClrClassConfig+0x2e>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	23ae      	movs	r3, #174	; 0xae
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	58d3      	ldr	r3, [r2, r3]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	1cfa      	adds	r2, r7, #3
 80092ca:	7811      	ldrb	r1, [r2, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	0010      	movs	r0, r2
 80092d0:	4798      	blx	r3
  }

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	0018      	movs	r0, r3
 80092d6:	46bd      	mov	sp, r7
 80092d8:	b002      	add	sp, #8
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092dc:	b590      	push	{r4, r7, lr}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a30      	ldr	r2, [pc, #192]	; (80093ac <USBD_LL_SetupStage+0xd0>)
 80092ea:	4694      	mov	ip, r2
 80092ec:	4463      	add	r3, ip
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	0011      	movs	r1, r2
 80092f2:	0018      	movs	r0, r3
 80092f4:	f001 f89e 	bl	800a434 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	23a5      	movs	r3, #165	; 0xa5
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	2101      	movs	r1, #1
 8009300:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	23ac      	movs	r3, #172	; 0xac
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	5ad3      	ldrh	r3, [r2, r3]
 800930a:	0019      	movs	r1, r3
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	23a6      	movs	r3, #166	; 0xa6
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a25      	ldr	r2, [pc, #148]	; (80093ac <USBD_LL_SetupStage+0xd0>)
 8009318:	5c9b      	ldrb	r3, [r3, r2]
 800931a:	001a      	movs	r2, r3
 800931c:	231f      	movs	r3, #31
 800931e:	4013      	ands	r3, r2
 8009320:	2b02      	cmp	r3, #2
 8009322:	d01f      	beq.n	8009364 <USBD_LL_SetupStage+0x88>
 8009324:	d82b      	bhi.n	800937e <USBD_LL_SetupStage+0xa2>
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <USBD_LL_SetupStage+0x54>
 800932a:	2b01      	cmp	r3, #1
 800932c:	d00d      	beq.n	800934a <USBD_LL_SetupStage+0x6e>
 800932e:	e026      	b.n	800937e <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a1e      	ldr	r2, [pc, #120]	; (80093ac <USBD_LL_SetupStage+0xd0>)
 8009334:	189a      	adds	r2, r3, r2
 8009336:	230f      	movs	r3, #15
 8009338:	18fc      	adds	r4, r7, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	0011      	movs	r1, r2
 800933e:	0018      	movs	r0, r3
 8009340:	f000 fa42 	bl	80097c8 <USBD_StdDevReq>
 8009344:	0003      	movs	r3, r0
 8009346:	7023      	strb	r3, [r4, #0]
      break;
 8009348:	e029      	b.n	800939e <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a17      	ldr	r2, [pc, #92]	; (80093ac <USBD_LL_SetupStage+0xd0>)
 800934e:	189a      	adds	r2, r3, r2
 8009350:	230f      	movs	r3, #15
 8009352:	18fc      	adds	r4, r7, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	0011      	movs	r1, r2
 8009358:	0018      	movs	r0, r3
 800935a:	f000 faaf 	bl	80098bc <USBD_StdItfReq>
 800935e:	0003      	movs	r3, r0
 8009360:	7023      	strb	r3, [r4, #0]
      break;
 8009362:	e01c      	b.n	800939e <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a11      	ldr	r2, [pc, #68]	; (80093ac <USBD_LL_SetupStage+0xd0>)
 8009368:	189a      	adds	r2, r3, r2
 800936a:	230f      	movs	r3, #15
 800936c:	18fc      	adds	r4, r7, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	0011      	movs	r1, r2
 8009372:	0018      	movs	r0, r3
 8009374:	f000 fafc 	bl	8009970 <USBD_StdEPReq>
 8009378:	0003      	movs	r3, r0
 800937a:	7023      	strb	r3, [r4, #0]
      break;
 800937c:	e00f      	b.n	800939e <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a0a      	ldr	r2, [pc, #40]	; (80093ac <USBD_LL_SetupStage+0xd0>)
 8009382:	5c9b      	ldrb	r3, [r3, r2]
 8009384:	227f      	movs	r2, #127	; 0x7f
 8009386:	4393      	bics	r3, r2
 8009388:	b2da      	uxtb	r2, r3
 800938a:	230f      	movs	r3, #15
 800938c:	18fc      	adds	r4, r7, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	0011      	movs	r1, r2
 8009392:	0018      	movs	r0, r3
 8009394:	f004 f849 	bl	800d42a <USBD_LL_StallEP>
 8009398:	0003      	movs	r3, r0
 800939a:	7023      	strb	r3, [r4, #0]
      break;
 800939c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800939e:	230f      	movs	r3, #15
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	781b      	ldrb	r3, [r3, #0]
}
 80093a4:	0018      	movs	r0, r3
 80093a6:	46bd      	mov	sp, r7
 80093a8:	b005      	add	sp, #20
 80093aa:	bd90      	pop	{r4, r7, pc}
 80093ac:	000002aa 	.word	0x000002aa

080093b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093b0:	b5b0      	push	{r4, r5, r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	200b      	movs	r0, #11
 80093bc:	183b      	adds	r3, r7, r0
 80093be:	1c0a      	adds	r2, r1, #0
 80093c0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80093c2:	183b      	adds	r3, r7, r0
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d13f      	bne.n	800944a <USBD_LL_DataOutStage+0x9a>
  {
    pep = &pdev->ep_out[0];
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3355      	adds	r3, #85	; 0x55
 80093ce:	33ff      	adds	r3, #255	; 0xff
 80093d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	23a5      	movs	r3, #165	; 0xa5
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	58d3      	ldr	r3, [r2, r3]
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d159      	bne.n	8009492 <USBD_LL_DataOutStage+0xe2>
    {
      if (pep->rem_length > pep->maxpacket)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d914      	bls.n	8009414 <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	1ad2      	subs	r2, r2, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	68d9      	ldr	r1, [r3, #12]
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	000b      	movs	r3, r1
 8009402:	4293      	cmp	r3, r2
 8009404:	d900      	bls.n	8009408 <USBD_LL_DataOutStage+0x58>
 8009406:	0013      	movs	r3, r2
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	001a      	movs	r2, r3
 800940e:	f001 f923 	bl	800a658 <USBD_CtlContinueRx>
 8009412:	e03e      	b.n	8009492 <USBD_LL_DataOutStage+0xe2>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	23a7      	movs	r3, #167	; 0xa7
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	5cd3      	ldrb	r3, [r2, r3]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b03      	cmp	r3, #3
 8009420:	d10e      	bne.n	8009440 <USBD_LL_DataOutStage+0x90>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	23ae      	movs	r3, #174	; 0xae
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	58d3      	ldr	r3, [r2, r3]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <USBD_LL_DataOutStage+0x90>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	23ae      	movs	r3, #174	; 0xae
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	58d3      	ldr	r3, [r2, r3]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	0010      	movs	r0, r2
 800943e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	0018      	movs	r0, r3
 8009444:	f001 f919 	bl	800a67a <USBD_CtlSendStatus>
 8009448:	e023      	b.n	8009492 <USBD_LL_DataOutStage+0xe2>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	23a7      	movs	r3, #167	; 0xa7
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	5cd3      	ldrb	r3, [r2, r3]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b03      	cmp	r3, #3
 8009456:	d11c      	bne.n	8009492 <USBD_LL_DataOutStage+0xe2>
    {
      if (pdev->pClass->DataOut != NULL)
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	23ae      	movs	r3, #174	; 0xae
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	58d3      	ldr	r3, [r2, r3]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d015      	beq.n	8009492 <USBD_LL_DataOutStage+0xe2>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	23ae      	movs	r3, #174	; 0xae
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	58d3      	ldr	r3, [r2, r3]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	2517      	movs	r5, #23
 8009472:	197c      	adds	r4, r7, r5
 8009474:	220b      	movs	r2, #11
 8009476:	18ba      	adds	r2, r7, r2
 8009478:	7811      	ldrb	r1, [r2, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	0010      	movs	r0, r2
 800947e:	4798      	blx	r3
 8009480:	0003      	movs	r3, r0
 8009482:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8009484:	197b      	adds	r3, r7, r5
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d002      	beq.n	8009492 <USBD_LL_DataOutStage+0xe2>
        {
          return ret;
 800948c:	197b      	adds	r3, r7, r5
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	e000      	b.n	8009494 <USBD_LL_DataOutStage+0xe4>
        }
      }
    }
  }

  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	0018      	movs	r0, r3
 8009496:	46bd      	mov	sp, r7
 8009498:	b006      	add	sp, #24
 800949a:	bdb0      	pop	{r4, r5, r7, pc}

0800949c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800949c:	b5b0      	push	{r4, r5, r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	607a      	str	r2, [r7, #4]
 80094a6:	200b      	movs	r0, #11
 80094a8:	183b      	adds	r3, r7, r0
 80094aa:	1c0a      	adds	r2, r1, #0
 80094ac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094ae:	183b      	adds	r3, r7, r0
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d000      	beq.n	80094b8 <USBD_LL_DataInStage+0x1c>
 80094b6:	e078      	b.n	80095aa <USBD_LL_DataInStage+0x10e>
  {
    pep = &pdev->ep_in[0];
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3314      	adds	r3, #20
 80094bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	23a5      	movs	r3, #165	; 0xa5
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	58d3      	ldr	r3, [r2, r3]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d15f      	bne.n	800958a <USBD_LL_DataInStage+0xee>
    {
      if (pep->rem_length > pep->maxpacket)
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	689a      	ldr	r2, [r3, #8]
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d914      	bls.n	8009500 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	1ad2      	subs	r2, r2, r3
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	0018      	movs	r0, r3
 80094ee:	f001 f882 	bl	800a5f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	2300      	movs	r3, #0
 80094f6:	2200      	movs	r2, #0
 80094f8:	2100      	movs	r1, #0
 80094fa:	f004 f878 	bl	800d5ee <USBD_LL_PrepareReceive>
 80094fe:	e044      	b.n	800958a <USBD_LL_DataInStage+0xee>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	429a      	cmp	r2, r3
 800950a:	d11f      	bne.n	800954c <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009514:	429a      	cmp	r2, r3
 8009516:	d319      	bcc.n	800954c <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	68f9      	ldr	r1, [r7, #12]
 800951e:	23a6      	movs	r3, #166	; 0xa6
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009524:	429a      	cmp	r2, r3
 8009526:	d211      	bcs.n	800954c <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	2100      	movs	r1, #0
 800952e:	0018      	movs	r0, r3
 8009530:	f001 f861 	bl	800a5f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	23a6      	movs	r3, #166	; 0xa6
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	2100      	movs	r1, #0
 800953c:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	2300      	movs	r3, #0
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	f004 f852 	bl	800d5ee <USBD_LL_PrepareReceive>
 800954a:	e01e      	b.n	800958a <USBD_LL_DataInStage+0xee>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	23a7      	movs	r3, #167	; 0xa7
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	5cd3      	ldrb	r3, [r2, r3]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b03      	cmp	r3, #3
 8009558:	d10e      	bne.n	8009578 <USBD_LL_DataInStage+0xdc>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	23ae      	movs	r3, #174	; 0xae
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	58d3      	ldr	r3, [r2, r3]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <USBD_LL_DataInStage+0xdc>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	23ae      	movs	r3, #174	; 0xae
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	58d3      	ldr	r3, [r2, r3]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	0010      	movs	r0, r2
 8009576:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2180      	movs	r1, #128	; 0x80
 800957c:	0018      	movs	r0, r3
 800957e:	f003 ff54 	bl	800d42a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	0018      	movs	r0, r3
 8009586:	f001 f88c 	bl	800a6a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	23a8      	movs	r3, #168	; 0xa8
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	5cd3      	ldrb	r3, [r2, r3]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d12d      	bne.n	80095f2 <USBD_LL_DataInStage+0x156>
    {
      (void)USBD_RunTestMode(pdev);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	0018      	movs	r0, r3
 800959a:	f7ff fe55 	bl	8009248 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	23a8      	movs	r3, #168	; 0xa8
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	2100      	movs	r1, #0
 80095a6:	54d1      	strb	r1, [r2, r3]
 80095a8:	e023      	b.n	80095f2 <USBD_LL_DataInStage+0x156>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	23a7      	movs	r3, #167	; 0xa7
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	5cd3      	ldrb	r3, [r2, r3]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d11c      	bne.n	80095f2 <USBD_LL_DataInStage+0x156>
    {
      if (pdev->pClass->DataIn != NULL)
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	23ae      	movs	r3, #174	; 0xae
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	58d3      	ldr	r3, [r2, r3]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d015      	beq.n	80095f2 <USBD_LL_DataInStage+0x156>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	23ae      	movs	r3, #174	; 0xae
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	58d3      	ldr	r3, [r2, r3]
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	2517      	movs	r5, #23
 80095d2:	197c      	adds	r4, r7, r5
 80095d4:	220b      	movs	r2, #11
 80095d6:	18ba      	adds	r2, r7, r2
 80095d8:	7811      	ldrb	r1, [r2, #0]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	0010      	movs	r0, r2
 80095de:	4798      	blx	r3
 80095e0:	0003      	movs	r3, r0
 80095e2:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 80095e4:	197b      	adds	r3, r7, r5
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <USBD_LL_DataInStage+0x156>
        {
          return ret;
 80095ec:	197b      	adds	r3, r7, r5
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	e000      	b.n	80095f4 <USBD_LL_DataInStage+0x158>
        }
      }
    }
  }

  return USBD_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	0018      	movs	r0, r3
 80095f6:	46bd      	mov	sp, r7
 80095f8:	b006      	add	sp, #24
 80095fa:	bdb0      	pop	{r4, r5, r7, pc}

080095fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	23a7      	movs	r3, #167	; 0xa7
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	2101      	movs	r1, #1
 800960c:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	23a5      	movs	r3, #165	; 0xa5
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	2100      	movs	r1, #0
 8009616:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	23a9      	movs	r3, #169	; 0xa9
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	2100      	movs	r1, #0
 8009626:	50d1      	str	r1, [r2, r3]

  if (pdev->pClass == NULL)
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	23ae      	movs	r3, #174	; 0xae
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	58d3      	ldr	r3, [r2, r3]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <USBD_LL_Reset+0x3c>
  {
    return USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	e034      	b.n	80096a2 <USBD_LL_Reset+0xa6>
  }

  if (pdev->pClassData != NULL)
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	23af      	movs	r3, #175	; 0xaf
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	58d3      	ldr	r3, [r2, r3]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d011      	beq.n	8009668 <USBD_LL_Reset+0x6c>
  {
    if (pdev->pClass->DeInit != NULL)
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	23ae      	movs	r3, #174	; 0xae
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	58d3      	ldr	r3, [r2, r3]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <USBD_LL_Reset+0x6c>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	23ae      	movs	r3, #174	; 0xae
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	58d3      	ldr	r3, [r2, r3]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	b2d9      	uxtb	r1, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	0018      	movs	r0, r3
 8009666:	4790      	blx	r2
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	2340      	movs	r3, #64	; 0x40
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	f003 fe79 	bl	800d366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	23b2      	movs	r3, #178	; 0xb2
 8009678:	005b      	lsls	r3, r3, #1
 800967a:	2101      	movs	r1, #1
 800967c:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	23b0      	movs	r3, #176	; 0xb0
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	2140      	movs	r1, #64	; 0x40
 8009686:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	2340      	movs	r3, #64	; 0x40
 800968c:	2200      	movs	r2, #0
 800968e:	2180      	movs	r1, #128	; 0x80
 8009690:	f003 fe69 	bl	800d366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2240      	movs	r2, #64	; 0x40
 800969e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	0018      	movs	r0, r3
 80096a4:	46bd      	mov	sp, r7
 80096a6:	b002      	add	sp, #8
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	000a      	movs	r2, r1
 80096b4:	1cfb      	adds	r3, r7, #3
 80096b6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	1cfa      	adds	r2, r7, #3
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	0018      	movs	r0, r3
 80096c4:	46bd      	mov	sp, r7
 80096c6:	b002      	add	sp, #8
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	23a7      	movs	r3, #167	; 0xa7
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	5cd3      	ldrb	r3, [r2, r3]
 80096dc:	b2d9      	uxtb	r1, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a05      	ldr	r2, [pc, #20]	; (80096f8 <USBD_LL_Suspend+0x2c>)
 80096e2:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	23a7      	movs	r3, #167	; 0xa7
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	2104      	movs	r1, #4
 80096ec:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	0018      	movs	r0, r3
 80096f2:	46bd      	mov	sp, r7
 80096f4:	b002      	add	sp, #8
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	0000029d 	.word	0x0000029d

080096fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	23a7      	movs	r3, #167	; 0xa7
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	5cd3      	ldrb	r3, [r2, r3]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b04      	cmp	r3, #4
 8009710:	d107      	bne.n	8009722 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a05      	ldr	r2, [pc, #20]	; (800972c <USBD_LL_Resume+0x30>)
 8009716:	5c9b      	ldrb	r3, [r3, r2]
 8009718:	b2d9      	uxtb	r1, r3
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	23a7      	movs	r3, #167	; 0xa7
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	0018      	movs	r0, r3
 8009726:	46bd      	mov	sp, r7
 8009728:	b002      	add	sp, #8
 800972a:	bd80      	pop	{r7, pc}
 800972c:	0000029d 	.word	0x0000029d

08009730 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	23ae      	movs	r3, #174	; 0xae
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	58d3      	ldr	r3, [r2, r3]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <USBD_LL_SOF+0x18>
  {
    return USBD_FAIL;
 8009744:	2303      	movs	r3, #3
 8009746:	e016      	b.n	8009776 <USBD_LL_SOF+0x46>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	23a7      	movs	r3, #167	; 0xa7
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	5cd3      	ldrb	r3, [r2, r3]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b03      	cmp	r3, #3
 8009754:	d10e      	bne.n	8009774 <USBD_LL_SOF+0x44>
  {
    if (pdev->pClass->SOF != NULL)
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	23ae      	movs	r3, #174	; 0xae
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	58d3      	ldr	r3, [r2, r3]
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d007      	beq.n	8009774 <USBD_LL_SOF+0x44>
    {
      (void)pdev->pClass->SOF(pdev);
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	23ae      	movs	r3, #174	; 0xae
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	58d3      	ldr	r3, [r2, r3]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	0010      	movs	r0, r2
 8009772:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	0018      	movs	r0, r3
 8009778:	46bd      	mov	sp, r7
 800977a:	b002      	add	sp, #8
 800977c:	bd80      	pop	{r7, pc}

0800977e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b086      	sub	sp, #24
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	2112      	movs	r1, #18
 8009790:	187b      	adds	r3, r7, r1
 8009792:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	3301      	adds	r3, #1
 8009798:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	2010      	movs	r0, #16
 80097a0:	183b      	adds	r3, r7, r0
 80097a2:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097a4:	183b      	adds	r3, r7, r0
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	021b      	lsls	r3, r3, #8
 80097aa:	b21a      	sxth	r2, r3
 80097ac:	187b      	adds	r3, r7, r1
 80097ae:	2100      	movs	r1, #0
 80097b0:	5e5b      	ldrsh	r3, [r3, r1]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	b21a      	sxth	r2, r3
 80097b6:	210e      	movs	r1, #14
 80097b8:	187b      	adds	r3, r7, r1
 80097ba:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 80097bc:	187b      	adds	r3, r7, r1
 80097be:	881b      	ldrh	r3, [r3, #0]
}
 80097c0:	0018      	movs	r0, r3
 80097c2:	46bd      	mov	sp, r7
 80097c4:	b006      	add	sp, #24
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097d2:	230f      	movs	r3, #15
 80097d4:	18fb      	adds	r3, r7, r3
 80097d6:	2200      	movs	r2, #0
 80097d8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	001a      	movs	r2, r3
 80097e0:	2360      	movs	r3, #96	; 0x60
 80097e2:	4013      	ands	r3, r2
 80097e4:	2b40      	cmp	r3, #64	; 0x40
 80097e6:	d004      	beq.n	80097f2 <USBD_StdDevReq+0x2a>
 80097e8:	d857      	bhi.n	800989a <USBD_StdDevReq+0xd2>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00f      	beq.n	800980e <USBD_StdDevReq+0x46>
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	d153      	bne.n	800989a <USBD_StdDevReq+0xd2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	23ae      	movs	r3, #174	; 0xae
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	58d3      	ldr	r3, [r2, r3]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	220f      	movs	r2, #15
 80097fe:	18bc      	adds	r4, r7, r2
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	0010      	movs	r0, r2
 8009806:	4798      	blx	r3
 8009808:	0003      	movs	r3, r0
 800980a:	7023      	strb	r3, [r4, #0]
      break;
 800980c:	e04c      	b.n	80098a8 <USBD_StdDevReq+0xe0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	785b      	ldrb	r3, [r3, #1]
 8009812:	2b09      	cmp	r3, #9
 8009814:	d839      	bhi.n	800988a <USBD_StdDevReq+0xc2>
 8009816:	009a      	lsls	r2, r3, #2
 8009818:	4b27      	ldr	r3, [pc, #156]	; (80098b8 <USBD_StdDevReq+0xf0>)
 800981a:	18d3      	adds	r3, r2, r3
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	0011      	movs	r1, r2
 8009826:	0018      	movs	r0, r3
 8009828:	f000 fa58 	bl	8009cdc <USBD_GetDescriptor>
          break;
 800982c:	e034      	b.n	8009898 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	0011      	movs	r1, r2
 8009834:	0018      	movs	r0, r3
 8009836:	f000 fc2b 	bl	800a090 <USBD_SetAddress>
          break;
 800983a:	e02d      	b.n	8009898 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800983c:	230f      	movs	r3, #15
 800983e:	18fc      	adds	r4, r7, r3
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	0011      	movs	r1, r2
 8009846:	0018      	movs	r0, r3
 8009848:	f000 fc78 	bl	800a13c <USBD_SetConfig>
 800984c:	0003      	movs	r3, r0
 800984e:	7023      	strb	r3, [r4, #0]
          break;
 8009850:	e022      	b.n	8009898 <USBD_StdDevReq+0xd0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	0011      	movs	r1, r2
 8009858:	0018      	movs	r0, r3
 800985a:	f000 fd37 	bl	800a2cc <USBD_GetConfig>
          break;
 800985e:	e01b      	b.n	8009898 <USBD_StdDevReq+0xd0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	0011      	movs	r1, r2
 8009866:	0018      	movs	r0, r3
 8009868:	f000 fd6c 	bl	800a344 <USBD_GetStatus>
          break;
 800986c:	e014      	b.n	8009898 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	0011      	movs	r1, r2
 8009874:	0018      	movs	r0, r3
 8009876:	f000 fda0 	bl	800a3ba <USBD_SetFeature>
          break;
 800987a:	e00d      	b.n	8009898 <USBD_StdDevReq+0xd0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	0011      	movs	r1, r2
 8009882:	0018      	movs	r0, r3
 8009884:	f000 fdaf 	bl	800a3e6 <USBD_ClrFeature>
          break;
 8009888:	e006      	b.n	8009898 <USBD_StdDevReq+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	0011      	movs	r1, r2
 8009890:	0018      	movs	r0, r3
 8009892:	f000 fe0c 	bl	800a4ae <USBD_CtlError>
          break;
 8009896:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009898:	e006      	b.n	80098a8 <USBD_StdDevReq+0xe0>

    default:
      USBD_CtlError(pdev, req);
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	0011      	movs	r1, r2
 80098a0:	0018      	movs	r0, r3
 80098a2:	f000 fe04 	bl	800a4ae <USBD_CtlError>
      break;
 80098a6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80098a8:	230f      	movs	r3, #15
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	781b      	ldrb	r3, [r3, #0]
}
 80098ae:	0018      	movs	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	b005      	add	sp, #20
 80098b4:	bd90      	pop	{r4, r7, pc}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	0800dad0 	.word	0x0800dad0

080098bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098bc:	b5b0      	push	{r4, r5, r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098c6:	230f      	movs	r3, #15
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	001a      	movs	r2, r3
 80098d4:	2360      	movs	r3, #96	; 0x60
 80098d6:	4013      	ands	r3, r2
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	d004      	beq.n	80098e6 <USBD_StdItfReq+0x2a>
 80098dc:	d83a      	bhi.n	8009954 <USBD_StdItfReq+0x98>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <USBD_StdItfReq+0x2a>
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d136      	bne.n	8009954 <USBD_StdItfReq+0x98>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	23a7      	movs	r3, #167	; 0xa7
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	5cd3      	ldrb	r3, [r2, r3]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d825      	bhi.n	8009942 <USBD_StdItfReq+0x86>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	889b      	ldrh	r3, [r3, #4]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d819      	bhi.n	8009934 <USBD_StdItfReq+0x78>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	23ae      	movs	r3, #174	; 0xae
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	58d3      	ldr	r3, [r2, r3]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	250f      	movs	r5, #15
 800990c:	197c      	adds	r4, r7, r5
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	0010      	movs	r0, r2
 8009914:	4798      	blx	r3
 8009916:	0003      	movs	r3, r0
 8009918:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	88db      	ldrh	r3, [r3, #6]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d116      	bne.n	8009950 <USBD_StdItfReq+0x94>
 8009922:	197b      	adds	r3, r7, r5
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d112      	bne.n	8009950 <USBD_StdItfReq+0x94>
            {
              (void)USBD_CtlSendStatus(pdev);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	0018      	movs	r0, r3
 800992e:	f000 fea4 	bl	800a67a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009932:	e00d      	b.n	8009950 <USBD_StdItfReq+0x94>
            USBD_CtlError(pdev, req);
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	0011      	movs	r1, r2
 800993a:	0018      	movs	r0, r3
 800993c:	f000 fdb7 	bl	800a4ae <USBD_CtlError>
          break;
 8009940:	e006      	b.n	8009950 <USBD_StdItfReq+0x94>

        default:
          USBD_CtlError(pdev, req);
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	0011      	movs	r1, r2
 8009948:	0018      	movs	r0, r3
 800994a:	f000 fdb0 	bl	800a4ae <USBD_CtlError>
          break;
 800994e:	e000      	b.n	8009952 <USBD_StdItfReq+0x96>
          break;
 8009950:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009952:	e006      	b.n	8009962 <USBD_StdItfReq+0xa6>

    default:
      USBD_CtlError(pdev, req);
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	0011      	movs	r1, r2
 800995a:	0018      	movs	r0, r3
 800995c:	f000 fda7 	bl	800a4ae <USBD_CtlError>
      break;
 8009960:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009962:	230f      	movs	r3, #15
 8009964:	18fb      	adds	r3, r7, r3
 8009966:	781b      	ldrb	r3, [r3, #0]
}
 8009968:	0018      	movs	r0, r3
 800996a:	46bd      	mov	sp, r7
 800996c:	b004      	add	sp, #16
 800996e:	bdb0      	pop	{r4, r5, r7, pc}

08009970 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800997a:	230f      	movs	r3, #15
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
  ep_addr = LOBYTE(req->wIndex);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	889a      	ldrh	r2, [r3, #4]
 8009986:	230e      	movs	r3, #14
 8009988:	18fb      	adds	r3, r7, r3
 800998a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	001a      	movs	r2, r3
 8009992:	2360      	movs	r3, #96	; 0x60
 8009994:	4013      	ands	r3, r2
 8009996:	2b40      	cmp	r3, #64	; 0x40
 8009998:	d006      	beq.n	80099a8 <USBD_StdEPReq+0x38>
 800999a:	d900      	bls.n	800999e <USBD_StdEPReq+0x2e>
 800999c:	e18f      	b.n	8009cbe <USBD_StdEPReq+0x34e>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d010      	beq.n	80099c4 <USBD_StdEPReq+0x54>
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	d000      	beq.n	80099a8 <USBD_StdEPReq+0x38>
 80099a6:	e18a      	b.n	8009cbe <USBD_StdEPReq+0x34e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	23ae      	movs	r3, #174	; 0xae
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	58d3      	ldr	r3, [r2, r3]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	220f      	movs	r2, #15
 80099b4:	18bc      	adds	r4, r7, r2
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	0010      	movs	r0, r2
 80099bc:	4798      	blx	r3
 80099be:	0003      	movs	r3, r0
 80099c0:	7023      	strb	r3, [r4, #0]
      break;
 80099c2:	e183      	b.n	8009ccc <USBD_StdEPReq+0x35c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d007      	beq.n	80099dc <USBD_StdEPReq+0x6c>
 80099cc:	dd00      	ble.n	80099d0 <USBD_StdEPReq+0x60>
 80099ce:	e16e      	b.n	8009cae <USBD_StdEPReq+0x33e>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d100      	bne.n	80099d6 <USBD_StdEPReq+0x66>
 80099d4:	e0a3      	b.n	8009b1e <USBD_StdEPReq+0x1ae>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d04d      	beq.n	8009a76 <USBD_StdEPReq+0x106>
 80099da:	e168      	b.n	8009cae <USBD_StdEPReq+0x33e>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	23a7      	movs	r3, #167	; 0xa7
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	5cd3      	ldrb	r3, [r2, r3]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d002      	beq.n	80099f0 <USBD_StdEPReq+0x80>
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d01e      	beq.n	8009a2c <USBD_StdEPReq+0xbc>
 80099ee:	e03a      	b.n	8009a66 <USBD_StdEPReq+0xf6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099f0:	220e      	movs	r2, #14
 80099f2:	18bb      	adds	r3, r7, r2
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d011      	beq.n	8009a1e <USBD_StdEPReq+0xae>
 80099fa:	18bb      	adds	r3, r7, r2
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b80      	cmp	r3, #128	; 0x80
 8009a00:	d00d      	beq.n	8009a1e <USBD_StdEPReq+0xae>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a02:	18bb      	adds	r3, r7, r2
 8009a04:	781a      	ldrb	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	0011      	movs	r1, r2
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	f003 fd0d 	bl	800d42a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2180      	movs	r1, #128	; 0x80
 8009a14:	0018      	movs	r0, r3
 8009a16:	f003 fd08 	bl	800d42a <USBD_LL_StallEP>
 8009a1a:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a1c:	e02a      	b.n	8009a74 <USBD_StdEPReq+0x104>
                USBD_CtlError(pdev, req);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	0011      	movs	r1, r2
 8009a24:	0018      	movs	r0, r3
 8009a26:	f000 fd42 	bl	800a4ae <USBD_CtlError>
              break;
 8009a2a:	e023      	b.n	8009a74 <USBD_StdEPReq+0x104>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d113      	bne.n	8009a5c <USBD_StdEPReq+0xec>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a34:	220e      	movs	r2, #14
 8009a36:	18bb      	adds	r3, r7, r2
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00e      	beq.n	8009a5c <USBD_StdEPReq+0xec>
 8009a3e:	18bb      	adds	r3, r7, r2
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d00a      	beq.n	8009a5c <USBD_StdEPReq+0xec>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	88db      	ldrh	r3, [r3, #6]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <USBD_StdEPReq+0xec>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a4e:	18bb      	adds	r3, r7, r2
 8009a50:	781a      	ldrb	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	0011      	movs	r1, r2
 8009a56:	0018      	movs	r0, r3
 8009a58:	f003 fce7 	bl	800d42a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f000 fe0b 	bl	800a67a <USBD_CtlSendStatus>

              break;
 8009a64:	e006      	b.n	8009a74 <USBD_StdEPReq+0x104>

            default:
              USBD_CtlError(pdev, req);
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	0011      	movs	r1, r2
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f000 fd1e 	bl	800a4ae <USBD_CtlError>
              break;
 8009a72:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009a74:	e122      	b.n	8009cbc <USBD_StdEPReq+0x34c>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	23a7      	movs	r3, #167	; 0xa7
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	5cd3      	ldrb	r3, [r2, r3]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d002      	beq.n	8009a8a <USBD_StdEPReq+0x11a>
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d01e      	beq.n	8009ac6 <USBD_StdEPReq+0x156>
 8009a88:	e040      	b.n	8009b0c <USBD_StdEPReq+0x19c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a8a:	220e      	movs	r2, #14
 8009a8c:	18bb      	adds	r3, r7, r2
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d011      	beq.n	8009ab8 <USBD_StdEPReq+0x148>
 8009a94:	18bb      	adds	r3, r7, r2
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b80      	cmp	r3, #128	; 0x80
 8009a9a:	d00d      	beq.n	8009ab8 <USBD_StdEPReq+0x148>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a9c:	18bb      	adds	r3, r7, r2
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	0011      	movs	r1, r2
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	f003 fcc0 	bl	800d42a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2180      	movs	r1, #128	; 0x80
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f003 fcbb 	bl	800d42a <USBD_LL_StallEP>
 8009ab4:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ab6:	e031      	b.n	8009b1c <USBD_StdEPReq+0x1ac>
                USBD_CtlError(pdev, req);
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	0011      	movs	r1, r2
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f000 fcf5 	bl	800a4ae <USBD_CtlError>
              break;
 8009ac4:	e02a      	b.n	8009b1c <USBD_StdEPReq+0x1ac>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d125      	bne.n	8009b1a <USBD_StdEPReq+0x1aa>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ace:	210e      	movs	r1, #14
 8009ad0:	187b      	adds	r3, r7, r1
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	227f      	movs	r2, #127	; 0x7f
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	d006      	beq.n	8009ae8 <USBD_StdEPReq+0x178>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ada:	187b      	adds	r3, r7, r1
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	0011      	movs	r1, r2
 8009ae2:	0018      	movs	r0, r3
 8009ae4:	f003 fccc 	bl	800d480 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	0018      	movs	r0, r3
 8009aec:	f000 fdc5 	bl	800a67a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	23ae      	movs	r3, #174	; 0xae
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	58d3      	ldr	r3, [r2, r3]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	220f      	movs	r2, #15
 8009afc:	18bc      	adds	r4, r7, r2
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	0010      	movs	r0, r2
 8009b04:	4798      	blx	r3
 8009b06:	0003      	movs	r3, r0
 8009b08:	7023      	strb	r3, [r4, #0]
              }
              break;
 8009b0a:	e006      	b.n	8009b1a <USBD_StdEPReq+0x1aa>

            default:
              USBD_CtlError(pdev, req);
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	0011      	movs	r1, r2
 8009b12:	0018      	movs	r0, r3
 8009b14:	f000 fccb 	bl	800a4ae <USBD_CtlError>
              break;
 8009b18:	e000      	b.n	8009b1c <USBD_StdEPReq+0x1ac>
              break;
 8009b1a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009b1c:	e0ce      	b.n	8009cbc <USBD_StdEPReq+0x34c>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	23a7      	movs	r3, #167	; 0xa7
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	5cd3      	ldrb	r3, [r2, r3]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d002      	beq.n	8009b32 <USBD_StdEPReq+0x1c2>
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d03c      	beq.n	8009baa <USBD_StdEPReq+0x23a>
 8009b30:	e0b5      	b.n	8009c9e <USBD_StdEPReq+0x32e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b32:	220e      	movs	r2, #14
 8009b34:	18bb      	adds	r3, r7, r2
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <USBD_StdEPReq+0x1e2>
 8009b3c:	18bb      	adds	r3, r7, r2
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b80      	cmp	r3, #128	; 0x80
 8009b42:	d006      	beq.n	8009b52 <USBD_StdEPReq+0x1e2>
              {
                USBD_CtlError(pdev, req);
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	0011      	movs	r1, r2
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f000 fcaf 	bl	800a4ae <USBD_CtlError>
                break;
 8009b50:	e0ac      	b.n	8009cac <USBD_StdEPReq+0x33c>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b52:	220e      	movs	r2, #14
 8009b54:	18bb      	adds	r3, r7, r2
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	b25b      	sxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	da0c      	bge.n	8009b78 <USBD_StdEPReq+0x208>
 8009b5e:	18bb      	adds	r3, r7, r2
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	227f      	movs	r2, #127	; 0x7f
 8009b64:	401a      	ands	r2, r3
 8009b66:	0013      	movs	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	189b      	adds	r3, r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	3310      	adds	r3, #16
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	18d3      	adds	r3, r2, r3
 8009b74:	3304      	adds	r3, #4
 8009b76:	e00d      	b.n	8009b94 <USBD_StdEPReq+0x224>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b78:	230e      	movs	r3, #14
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	227f      	movs	r2, #127	; 0x7f
 8009b80:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b82:	0013      	movs	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	189b      	adds	r3, r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	3351      	adds	r3, #81	; 0x51
 8009b8c:	33ff      	adds	r3, #255	; 0xff
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	18d3      	adds	r3, r2, r3
 8009b92:	3304      	adds	r3, #4
 8009b94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f000 fd0b 	bl	800a5be <USBD_CtlSendData>
              break;
 8009ba8:	e080      	b.n	8009cac <USBD_StdEPReq+0x33c>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009baa:	220e      	movs	r2, #14
 8009bac:	18bb      	adds	r3, r7, r2
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	b25b      	sxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da14      	bge.n	8009be0 <USBD_StdEPReq+0x270>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bb6:	18bb      	adds	r3, r7, r2
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	220f      	movs	r2, #15
 8009bbc:	401a      	ands	r2, r3
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	0013      	movs	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	189b      	adds	r3, r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	18cb      	adds	r3, r1, r3
 8009bca:	3324      	adds	r3, #36	; 0x24
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d11e      	bne.n	8009c10 <USBD_StdEPReq+0x2a0>
                {
                  USBD_CtlError(pdev, req);
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	0011      	movs	r1, r2
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f000 fc68 	bl	800a4ae <USBD_CtlError>
                  break;
 8009bde:	e065      	b.n	8009cac <USBD_StdEPReq+0x33c>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009be0:	230e      	movs	r3, #14
 8009be2:	18fb      	adds	r3, r7, r3
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	220f      	movs	r2, #15
 8009be8:	401a      	ands	r2, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	23b2      	movs	r3, #178	; 0xb2
 8009bee:	0059      	lsls	r1, r3, #1
 8009bf0:	0013      	movs	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	189b      	adds	r3, r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	18c3      	adds	r3, r0, r3
 8009bfa:	185b      	adds	r3, r3, r1
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <USBD_StdEPReq+0x2a0>
                {
                  USBD_CtlError(pdev, req);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	0011      	movs	r1, r2
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f000 fc50 	bl	800a4ae <USBD_CtlError>
                  break;
 8009c0e:	e04d      	b.n	8009cac <USBD_StdEPReq+0x33c>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c10:	220e      	movs	r2, #14
 8009c12:	18bb      	adds	r3, r7, r2
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	b25b      	sxtb	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	da0c      	bge.n	8009c36 <USBD_StdEPReq+0x2c6>
 8009c1c:	18bb      	adds	r3, r7, r2
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	227f      	movs	r2, #127	; 0x7f
 8009c22:	401a      	ands	r2, r3
 8009c24:	0013      	movs	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	189b      	adds	r3, r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	3310      	adds	r3, #16
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	18d3      	adds	r3, r2, r3
 8009c32:	3304      	adds	r3, #4
 8009c34:	e00d      	b.n	8009c52 <USBD_StdEPReq+0x2e2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c36:	230e      	movs	r3, #14
 8009c38:	18fb      	adds	r3, r7, r3
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	227f      	movs	r2, #127	; 0x7f
 8009c3e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c40:	0013      	movs	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	189b      	adds	r3, r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	3351      	adds	r3, #81	; 0x51
 8009c4a:	33ff      	adds	r3, #255	; 0xff
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	18d3      	adds	r3, r2, r3
 8009c50:	3304      	adds	r3, #4
 8009c52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c54:	220e      	movs	r2, #14
 8009c56:	18bb      	adds	r3, r7, r2
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <USBD_StdEPReq+0x2f6>
 8009c5e:	18bb      	adds	r3, r7, r2
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b80      	cmp	r3, #128	; 0x80
 8009c64:	d103      	bne.n	8009c6e <USBD_StdEPReq+0x2fe>
              {
                pep->status = 0x0000U;
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	e010      	b.n	8009c90 <USBD_StdEPReq+0x320>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c6e:	230e      	movs	r3, #14
 8009c70:	18fb      	adds	r3, r7, r3
 8009c72:	781a      	ldrb	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	0011      	movs	r1, r2
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f003 fc2c 	bl	800d4d6 <USBD_LL_IsStallEP>
 8009c7e:	1e03      	subs	r3, r0, #0
 8009c80:	d003      	beq.n	8009c8a <USBD_StdEPReq+0x31a>
              {
                pep->status = 0x0001U;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2201      	movs	r2, #1
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	e002      	b.n	8009c90 <USBD_StdEPReq+0x320>
              }
              else
              {
                pep->status = 0x0000U;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2202      	movs	r2, #2
 8009c96:	0018      	movs	r0, r3
 8009c98:	f000 fc91 	bl	800a5be <USBD_CtlSendData>
              break;
 8009c9c:	e006      	b.n	8009cac <USBD_StdEPReq+0x33c>

            default:
              USBD_CtlError(pdev, req);
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	0011      	movs	r1, r2
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	f000 fc02 	bl	800a4ae <USBD_CtlError>
              break;
 8009caa:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009cac:	e006      	b.n	8009cbc <USBD_StdEPReq+0x34c>

        default:
          USBD_CtlError(pdev, req);
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	0011      	movs	r1, r2
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	f000 fbfa 	bl	800a4ae <USBD_CtlError>
          break;
 8009cba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009cbc:	e006      	b.n	8009ccc <USBD_StdEPReq+0x35c>

    default:
      USBD_CtlError(pdev, req);
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	0011      	movs	r1, r2
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	f000 fbf2 	bl	800a4ae <USBD_CtlError>
      break;
 8009cca:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009ccc:	230f      	movs	r3, #15
 8009cce:	18fb      	adds	r3, r7, r3
 8009cd0:	781b      	ldrb	r3, [r3, #0]
}
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	b005      	add	sp, #20
 8009cd8:	bd90      	pop	{r4, r7, pc}
	...

08009cdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	18fb      	adds	r3, r7, r3
 8009cea:	2200      	movs	r2, #0
 8009cec:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cf2:	230b      	movs	r3, #11
 8009cf4:	18fb      	adds	r3, r7, r3
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	885b      	ldrh	r3, [r3, #2]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b0f      	cmp	r3, #15
 8009d04:	d900      	bls.n	8009d08 <USBD_GetDescriptor+0x2c>
 8009d06:	e17b      	b.n	800a000 <USBD_GetDescriptor+0x324>
 8009d08:	009a      	lsls	r2, r3, #2
 8009d0a:	4bdd      	ldr	r3, [pc, #884]	; (800a080 <USBD_GetDescriptor+0x3a4>)
 8009d0c:	18d3      	adds	r3, r2, r3
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	23ad      	movs	r3, #173	; 0xad
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	58d3      	ldr	r3, [r2, r3]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00d      	beq.n	8009d3c <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	23ad      	movs	r3, #173	; 0xad
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	58d3      	ldr	r3, [r2, r3]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	7c12      	ldrb	r2, [r2, #16]
 8009d2e:	2108      	movs	r1, #8
 8009d30:	1879      	adds	r1, r7, r1
 8009d32:	0010      	movs	r0, r2
 8009d34:	4798      	blx	r3
 8009d36:	0003      	movs	r3, r0
 8009d38:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d3a:	e16e      	b.n	800a01a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	0011      	movs	r1, r2
 8009d42:	0018      	movs	r0, r3
 8009d44:	f000 fbb3 	bl	800a4ae <USBD_CtlError>
        err++;
 8009d48:	210b      	movs	r1, #11
 8009d4a:	187b      	adds	r3, r7, r1
 8009d4c:	781a      	ldrb	r2, [r3, #0]
 8009d4e:	187b      	adds	r3, r7, r1
 8009d50:	3201      	adds	r2, #1
 8009d52:	701a      	strb	r2, [r3, #0]
      break;
 8009d54:	e161      	b.n	800a01a <USBD_GetDescriptor+0x33e>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	23ad      	movs	r3, #173	; 0xad
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	58d3      	ldr	r3, [r2, r3]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7c12      	ldrb	r2, [r2, #16]
 8009d64:	2108      	movs	r1, #8
 8009d66:	1879      	adds	r1, r7, r1
 8009d68:	0010      	movs	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	0003      	movs	r3, r0
 8009d6e:	60fb      	str	r3, [r7, #12]
      break;
 8009d70:	e153      	b.n	800a01a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7c1b      	ldrb	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10f      	bne.n	8009d9a <USBD_GetDescriptor+0xbe>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	23ae      	movs	r3, #174	; 0xae
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	58d3      	ldr	r3, [r2, r3]
 8009d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d84:	2208      	movs	r2, #8
 8009d86:	18ba      	adds	r2, r7, r2
 8009d88:	0010      	movs	r0, r2
 8009d8a:	4798      	blx	r3
 8009d8c:	0003      	movs	r3, r0
 8009d8e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	2202      	movs	r2, #2
 8009d96:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d98:	e13f      	b.n	800a01a <USBD_GetDescriptor+0x33e>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	23ae      	movs	r3, #174	; 0xae
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	58d3      	ldr	r3, [r2, r3]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	2208      	movs	r2, #8
 8009da6:	18ba      	adds	r2, r7, r2
 8009da8:	0010      	movs	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	0003      	movs	r3, r0
 8009dae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	2202      	movs	r2, #2
 8009db6:	701a      	strb	r2, [r3, #0]
      break;
 8009db8:	e12f      	b.n	800a01a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b05      	cmp	r3, #5
 8009dc2:	d900      	bls.n	8009dc6 <USBD_GetDescriptor+0xea>
 8009dc4:	e0d0      	b.n	8009f68 <USBD_GetDescriptor+0x28c>
 8009dc6:	009a      	lsls	r2, r3, #2
 8009dc8:	4bae      	ldr	r3, [pc, #696]	; (800a084 <USBD_GetDescriptor+0x3a8>)
 8009dca:	18d3      	adds	r3, r2, r3
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	23ad      	movs	r3, #173	; 0xad
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	58d3      	ldr	r3, [r2, r3]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00d      	beq.n	8009dfa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	23ad      	movs	r3, #173	; 0xad
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	58d3      	ldr	r3, [r2, r3]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	7c12      	ldrb	r2, [r2, #16]
 8009dec:	2108      	movs	r1, #8
 8009dee:	1879      	adds	r1, r7, r1
 8009df0:	0010      	movs	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	0003      	movs	r3, r0
 8009df6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009df8:	e0c3      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	0011      	movs	r1, r2
 8009e00:	0018      	movs	r0, r3
 8009e02:	f000 fb54 	bl	800a4ae <USBD_CtlError>
            err++;
 8009e06:	210b      	movs	r1, #11
 8009e08:	187b      	adds	r3, r7, r1
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	187b      	adds	r3, r7, r1
 8009e0e:	3201      	adds	r2, #1
 8009e10:	701a      	strb	r2, [r3, #0]
          break;
 8009e12:	e0b6      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	23ad      	movs	r3, #173	; 0xad
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	58d3      	ldr	r3, [r2, r3]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00d      	beq.n	8009e3e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	23ad      	movs	r3, #173	; 0xad
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	58d3      	ldr	r3, [r2, r3]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	7c12      	ldrb	r2, [r2, #16]
 8009e30:	2108      	movs	r1, #8
 8009e32:	1879      	adds	r1, r7, r1
 8009e34:	0010      	movs	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	0003      	movs	r3, r0
 8009e3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3c:	e0a1      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	0011      	movs	r1, r2
 8009e44:	0018      	movs	r0, r3
 8009e46:	f000 fb32 	bl	800a4ae <USBD_CtlError>
            err++;
 8009e4a:	210b      	movs	r1, #11
 8009e4c:	187b      	adds	r3, r7, r1
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	187b      	adds	r3, r7, r1
 8009e52:	3201      	adds	r2, #1
 8009e54:	701a      	strb	r2, [r3, #0]
          break;
 8009e56:	e094      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	23ad      	movs	r3, #173	; 0xad
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	58d3      	ldr	r3, [r2, r3]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00d      	beq.n	8009e82 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	23ad      	movs	r3, #173	; 0xad
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	58d3      	ldr	r3, [r2, r3]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7c12      	ldrb	r2, [r2, #16]
 8009e74:	2108      	movs	r1, #8
 8009e76:	1879      	adds	r1, r7, r1
 8009e78:	0010      	movs	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	0003      	movs	r3, r0
 8009e7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e80:	e07f      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	0011      	movs	r1, r2
 8009e88:	0018      	movs	r0, r3
 8009e8a:	f000 fb10 	bl	800a4ae <USBD_CtlError>
            err++;
 8009e8e:	210b      	movs	r1, #11
 8009e90:	187b      	adds	r3, r7, r1
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	187b      	adds	r3, r7, r1
 8009e96:	3201      	adds	r2, #1
 8009e98:	701a      	strb	r2, [r3, #0]
          break;
 8009e9a:	e072      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	23ad      	movs	r3, #173	; 0xad
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	58d3      	ldr	r3, [r2, r3]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00d      	beq.n	8009ec6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	23ad      	movs	r3, #173	; 0xad
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	58d3      	ldr	r3, [r2, r3]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	2108      	movs	r1, #8
 8009eba:	1879      	adds	r1, r7, r1
 8009ebc:	0010      	movs	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	0003      	movs	r3, r0
 8009ec2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec4:	e05d      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	0011      	movs	r1, r2
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f000 faee 	bl	800a4ae <USBD_CtlError>
            err++;
 8009ed2:	210b      	movs	r1, #11
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	187b      	adds	r3, r7, r1
 8009eda:	3201      	adds	r2, #1
 8009edc:	701a      	strb	r2, [r3, #0]
          break;
 8009ede:	e050      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	23ad      	movs	r3, #173	; 0xad
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	58d3      	ldr	r3, [r2, r3]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00d      	beq.n	8009f0a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	23ad      	movs	r3, #173	; 0xad
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	58d3      	ldr	r3, [r2, r3]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	7c12      	ldrb	r2, [r2, #16]
 8009efc:	2108      	movs	r1, #8
 8009efe:	1879      	adds	r1, r7, r1
 8009f00:	0010      	movs	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	0003      	movs	r3, r0
 8009f06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f08:	e03b      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	0011      	movs	r1, r2
 8009f10:	0018      	movs	r0, r3
 8009f12:	f000 facc 	bl	800a4ae <USBD_CtlError>
            err++;
 8009f16:	210b      	movs	r1, #11
 8009f18:	187b      	adds	r3, r7, r1
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	187b      	adds	r3, r7, r1
 8009f1e:	3201      	adds	r2, #1
 8009f20:	701a      	strb	r2, [r3, #0]
          break;
 8009f22:	e02e      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	23ad      	movs	r3, #173	; 0xad
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	58d3      	ldr	r3, [r2, r3]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00d      	beq.n	8009f4e <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	23ad      	movs	r3, #173	; 0xad
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	58d3      	ldr	r3, [r2, r3]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	7c12      	ldrb	r2, [r2, #16]
 8009f40:	2108      	movs	r1, #8
 8009f42:	1879      	adds	r1, r7, r1
 8009f44:	0010      	movs	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	0003      	movs	r3, r0
 8009f4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4c:	e019      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	0011      	movs	r1, r2
 8009f54:	0018      	movs	r0, r3
 8009f56:	f000 faaa 	bl	800a4ae <USBD_CtlError>
            err++;
 8009f5a:	210b      	movs	r1, #11
 8009f5c:	187b      	adds	r3, r7, r1
 8009f5e:	781a      	ldrb	r2, [r3, #0]
 8009f60:	187b      	adds	r3, r7, r1
 8009f62:	3201      	adds	r2, #1
 8009f64:	701a      	strb	r2, [r3, #0]
          break;
 8009f66:	e00c      	b.n	8009f82 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	0011      	movs	r1, r2
 8009f6e:	0018      	movs	r0, r3
 8009f70:	f000 fa9d 	bl	800a4ae <USBD_CtlError>
          err++;
 8009f74:	210b      	movs	r1, #11
 8009f76:	187b      	adds	r3, r7, r1
 8009f78:	781a      	ldrb	r2, [r3, #0]
 8009f7a:	187b      	adds	r3, r7, r1
 8009f7c:	3201      	adds	r2, #1
 8009f7e:	701a      	strb	r2, [r3, #0]
#endif
          break;
 8009f80:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009f82:	e04a      	b.n	800a01a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	7c1b      	ldrb	r3, [r3, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10b      	bne.n	8009fa4 <USBD_GetDescriptor+0x2c8>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	23ae      	movs	r3, #174	; 0xae
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	58d3      	ldr	r3, [r2, r3]
 8009f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f96:	2208      	movs	r2, #8
 8009f98:	18ba      	adds	r2, r7, r2
 8009f9a:	0010      	movs	r0, r2
 8009f9c:	4798      	blx	r3
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fa2:	e03a      	b.n	800a01a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	0011      	movs	r1, r2
 8009faa:	0018      	movs	r0, r3
 8009fac:	f000 fa7f 	bl	800a4ae <USBD_CtlError>
        err++;
 8009fb0:	210b      	movs	r1, #11
 8009fb2:	187b      	adds	r3, r7, r1
 8009fb4:	781a      	ldrb	r2, [r3, #0]
 8009fb6:	187b      	adds	r3, r7, r1
 8009fb8:	3201      	adds	r2, #1
 8009fba:	701a      	strb	r2, [r3, #0]
      break;
 8009fbc:	e02d      	b.n	800a01a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7c1b      	ldrb	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10f      	bne.n	8009fe6 <USBD_GetDescriptor+0x30a>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	23ae      	movs	r3, #174	; 0xae
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	58d3      	ldr	r3, [r2, r3]
 8009fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	18ba      	adds	r2, r7, r2
 8009fd4:	0010      	movs	r0, r2
 8009fd6:	4798      	blx	r3
 8009fd8:	0003      	movs	r3, r0
 8009fda:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	2207      	movs	r2, #7
 8009fe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fe4:	e019      	b.n	800a01a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	0011      	movs	r1, r2
 8009fec:	0018      	movs	r0, r3
 8009fee:	f000 fa5e 	bl	800a4ae <USBD_CtlError>
        err++;
 8009ff2:	210b      	movs	r1, #11
 8009ff4:	187b      	adds	r3, r7, r1
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	187b      	adds	r3, r7, r1
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	701a      	strb	r2, [r3, #0]
      break;
 8009ffe:	e00c      	b.n	800a01a <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	0011      	movs	r1, r2
 800a006:	0018      	movs	r0, r3
 800a008:	f000 fa51 	bl	800a4ae <USBD_CtlError>
      err++;
 800a00c:	210b      	movs	r1, #11
 800a00e:	187b      	adds	r3, r7, r1
 800a010:	781a      	ldrb	r2, [r3, #0]
 800a012:	187b      	adds	r3, r7, r1
 800a014:	3201      	adds	r2, #1
 800a016:	701a      	strb	r2, [r3, #0]
      break;
 800a018:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800a01a:	230b      	movs	r3, #11
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d131      	bne.n	800a088 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	88db      	ldrh	r3, [r3, #6]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d023      	beq.n	800a074 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 800a02c:	2108      	movs	r1, #8
 800a02e:	187b      	adds	r3, r7, r1
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d017      	beq.n	800a066 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	88da      	ldrh	r2, [r3, #6]
 800a03a:	187b      	adds	r3, r7, r1
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	1c18      	adds	r0, r3, #0
 800a040:	1c11      	adds	r1, r2, #0
 800a042:	b28a      	uxth	r2, r1
 800a044:	b283      	uxth	r3, r0
 800a046:	429a      	cmp	r2, r3
 800a048:	d900      	bls.n	800a04c <USBD_GetDescriptor+0x370>
 800a04a:	1c01      	adds	r1, r0, #0
 800a04c:	b28a      	uxth	r2, r1
 800a04e:	2108      	movs	r1, #8
 800a050:	187b      	adds	r3, r7, r1
 800a052:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a054:	187b      	adds	r3, r7, r1
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	001a      	movs	r2, r3
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	0018      	movs	r0, r3
 800a060:	f000 faad 	bl	800a5be <USBD_CtlSendData>
 800a064:	e011      	b.n	800a08a <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	0011      	movs	r1, r2
 800a06c:	0018      	movs	r0, r3
 800a06e:	f000 fa1e 	bl	800a4ae <USBD_CtlError>
 800a072:	e00a      	b.n	800a08a <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	0018      	movs	r0, r3
 800a078:	f000 faff 	bl	800a67a <USBD_CtlSendStatus>
 800a07c:	e005      	b.n	800a08a <USBD_GetDescriptor+0x3ae>
 800a07e:	46c0      	nop			; (mov r8, r8)
 800a080:	0800daf8 	.word	0x0800daf8
 800a084:	0800db38 	.word	0x0800db38
    return;
 800a088:	46c0      	nop			; (mov r8, r8)
  }
}
 800a08a:	46bd      	mov	sp, r7
 800a08c:	b004      	add	sp, #16
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a090:	b590      	push	{r4, r7, lr}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	889b      	ldrh	r3, [r3, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d13e      	bne.n	800a120 <USBD_SetAddress+0x90>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	88db      	ldrh	r3, [r3, #6]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d13a      	bne.n	800a120 <USBD_SetAddress+0x90>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a0b0:	d836      	bhi.n	800a120 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	885b      	ldrh	r3, [r3, #2]
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	230f      	movs	r3, #15
 800a0ba:	18fb      	adds	r3, r7, r3
 800a0bc:	217f      	movs	r1, #127	; 0x7f
 800a0be:	400a      	ands	r2, r1
 800a0c0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	23a7      	movs	r3, #167	; 0xa7
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	5cd3      	ldrb	r3, [r2, r3]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d106      	bne.n	800a0de <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	0011      	movs	r1, r2
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	f000 f9e9 	bl	800a4ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0dc:	e027      	b.n	800a12e <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	240f      	movs	r4, #15
 800a0e2:	193a      	adds	r2, r7, r4
 800a0e4:	4914      	ldr	r1, [pc, #80]	; (800a138 <USBD_SetAddress+0xa8>)
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0ea:	193b      	adds	r3, r7, r4
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	0011      	movs	r1, r2
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f003 fa20 	bl	800d538 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f000 fabd 	bl	800a67a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a100:	193b      	adds	r3, r7, r4
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	23a7      	movs	r3, #167	; 0xa7
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	2102      	movs	r1, #2
 800a110:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a112:	e00c      	b.n	800a12e <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	23a7      	movs	r3, #167	; 0xa7
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	2101      	movs	r1, #1
 800a11c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11e:	e006      	b.n	800a12e <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	0011      	movs	r1, r2
 800a126:	0018      	movs	r0, r3
 800a128:	f000 f9c1 	bl	800a4ae <USBD_CtlError>
  }
}
 800a12c:	46c0      	nop			; (mov r8, r8)
 800a12e:	46c0      	nop			; (mov r8, r8)
 800a130:	46bd      	mov	sp, r7
 800a132:	b005      	add	sp, #20
 800a134:	bd90      	pop	{r4, r7, pc}
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	0000029e 	.word	0x0000029e

0800a13c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a13c:	b5b0      	push	{r4, r5, r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a146:	230f      	movs	r3, #15
 800a148:	18fb      	adds	r3, r7, r3
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	885b      	ldrh	r3, [r3, #2]
 800a152:	b2da      	uxtb	r2, r3
 800a154:	4b5c      	ldr	r3, [pc, #368]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a158:	4b5b      	ldr	r3, [pc, #364]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d907      	bls.n	800a170 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	0011      	movs	r1, r2
 800a166:	0018      	movs	r0, r3
 800a168:	f000 f9a1 	bl	800a4ae <USBD_CtlError>
    return USBD_FAIL;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e0a7      	b.n	800a2c0 <USBD_SetConfig+0x184>
  }

  switch (pdev->dev_state)
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	23a7      	movs	r3, #167	; 0xa7
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	5cd3      	ldrb	r3, [r2, r3]
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d002      	beq.n	800a184 <USBD_SetConfig+0x48>
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d02e      	beq.n	800a1e0 <USBD_SetConfig+0xa4>
 800a182:	e088      	b.n	800a296 <USBD_SetConfig+0x15a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a184:	4b50      	ldr	r3, [pc, #320]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d024      	beq.n	800a1d6 <USBD_SetConfig+0x9a>
      {
        pdev->dev_config = cfgidx;
 800a18c:	4b4e      	ldr	r3, [pc, #312]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	001a      	movs	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a196:	4b4c      	ldr	r3, [pc, #304]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	250f      	movs	r5, #15
 800a19c:	197c      	adds	r4, r7, r5
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	0011      	movs	r1, r2
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f7ff f859 	bl	800925a <USBD_SetClassConfig>
 800a1a8:	0003      	movs	r3, r0
 800a1aa:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 800a1ac:	197b      	adds	r3, r7, r5
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d006      	beq.n	800a1c2 <USBD_SetConfig+0x86>
        {
          USBD_CtlError(pdev, req);
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	0011      	movs	r1, r2
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f000 f977 	bl	800a4ae <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1c0:	e07b      	b.n	800a2ba <USBD_SetConfig+0x17e>
          (void)USBD_CtlSendStatus(pdev);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	f000 fa58 	bl	800a67a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	23a7      	movs	r3, #167	; 0xa7
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	2103      	movs	r1, #3
 800a1d2:	54d1      	strb	r1, [r2, r3]
      break;
 800a1d4:	e071      	b.n	800a2ba <USBD_SetConfig+0x17e>
        (void)USBD_CtlSendStatus(pdev);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f000 fa4e 	bl	800a67a <USBD_CtlSendStatus>
      break;
 800a1de:	e06c      	b.n	800a2ba <USBD_SetConfig+0x17e>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1e0:	4b39      	ldr	r3, [pc, #228]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d115      	bne.n	800a214 <USBD_SetConfig+0xd8>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	23a7      	movs	r3, #167	; 0xa7
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 800a1f2:	4b35      	ldr	r3, [pc, #212]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	001a      	movs	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1fc:	4b32      	ldr	r3, [pc, #200]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a1fe:	781a      	ldrb	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0011      	movs	r1, r2
 800a204:	0018      	movs	r0, r3
 800a206:	f7ff f84d 	bl	80092a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	0018      	movs	r0, r3
 800a20e:	f000 fa34 	bl	800a67a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a212:	e052      	b.n	800a2ba <USBD_SetConfig+0x17e>
      else if (cfgidx != pdev->dev_config)
 800a214:	4b2c      	ldr	r3, [pc, #176]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	001a      	movs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d034      	beq.n	800a28c <USBD_SetConfig+0x150>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	b2da      	uxtb	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	0011      	movs	r1, r2
 800a22c:	0018      	movs	r0, r3
 800a22e:	f7ff f839 	bl	80092a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a232:	4b25      	ldr	r3, [pc, #148]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	001a      	movs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a23c:	4b22      	ldr	r3, [pc, #136]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a23e:	781a      	ldrb	r2, [r3, #0]
 800a240:	250f      	movs	r5, #15
 800a242:	197c      	adds	r4, r7, r5
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	0011      	movs	r1, r2
 800a248:	0018      	movs	r0, r3
 800a24a:	f7ff f806 	bl	800925a <USBD_SetClassConfig>
 800a24e:	0003      	movs	r3, r0
 800a250:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 800a252:	197b      	adds	r3, r7, r5
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d013      	beq.n	800a282 <USBD_SetConfig+0x146>
          USBD_CtlError(pdev, req);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	0011      	movs	r1, r2
 800a260:	0018      	movs	r0, r3
 800a262:	f000 f924 	bl	800a4ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	0011      	movs	r1, r2
 800a270:	0018      	movs	r0, r3
 800a272:	f7ff f817 	bl	80092a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	23a7      	movs	r3, #167	; 0xa7
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	2102      	movs	r1, #2
 800a27e:	54d1      	strb	r1, [r2, r3]
      break;
 800a280:	e01b      	b.n	800a2ba <USBD_SetConfig+0x17e>
          (void)USBD_CtlSendStatus(pdev);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	0018      	movs	r0, r3
 800a286:	f000 f9f8 	bl	800a67a <USBD_CtlSendStatus>
      break;
 800a28a:	e016      	b.n	800a2ba <USBD_SetConfig+0x17e>
        (void)USBD_CtlSendStatus(pdev);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	0018      	movs	r0, r3
 800a290:	f000 f9f3 	bl	800a67a <USBD_CtlSendStatus>
      break;
 800a294:	e011      	b.n	800a2ba <USBD_SetConfig+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	0011      	movs	r1, r2
 800a29c:	0018      	movs	r0, r3
 800a29e:	f000 f906 	bl	800a4ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <USBD_SetConfig+0x18c>)
 800a2a4:	781a      	ldrb	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	0011      	movs	r1, r2
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	f7fe fffa 	bl	80092a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2b0:	230f      	movs	r3, #15
 800a2b2:	18fb      	adds	r3, r7, r3
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	701a      	strb	r2, [r3, #0]
      break;
 800a2b8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a2ba:	230f      	movs	r3, #15
 800a2bc:	18fb      	adds	r3, r7, r3
 800a2be:	781b      	ldrb	r3, [r3, #0]
}
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	b004      	add	sp, #16
 800a2c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a2c8:	2000020c 	.word	0x2000020c

0800a2cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	88db      	ldrh	r3, [r3, #6]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d006      	beq.n	800a2ec <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	0011      	movs	r1, r2
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f000 f8e2 	bl	800a4ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2ea:	e027      	b.n	800a33c <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	23a7      	movs	r3, #167	; 0xa7
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	5cd3      	ldrb	r3, [r2, r3]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	dc02      	bgt.n	800a300 <USBD_GetConfig+0x34>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	dc03      	bgt.n	800a306 <USBD_GetConfig+0x3a>
 800a2fe:	e016      	b.n	800a32e <USBD_GetConfig+0x62>
 800a300:	2b03      	cmp	r3, #3
 800a302:	d00c      	beq.n	800a31e <USBD_GetConfig+0x52>
 800a304:	e013      	b.n	800a32e <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3308      	adds	r3, #8
 800a310:	0019      	movs	r1, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	0018      	movs	r0, r3
 800a318:	f000 f951 	bl	800a5be <USBD_CtlSendData>
        break;
 800a31c:	e00e      	b.n	800a33c <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	1d19      	adds	r1, r3, #4
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	0018      	movs	r0, r3
 800a328:	f000 f949 	bl	800a5be <USBD_CtlSendData>
        break;
 800a32c:	e006      	b.n	800a33c <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	0011      	movs	r1, r2
 800a334:	0018      	movs	r0, r3
 800a336:	f000 f8ba 	bl	800a4ae <USBD_CtlError>
        break;
 800a33a:	46c0      	nop			; (mov r8, r8)
}
 800a33c:	46c0      	nop			; (mov r8, r8)
 800a33e:	46bd      	mov	sp, r7
 800a340:	b002      	add	sp, #8
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	23a7      	movs	r3, #167	; 0xa7
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	5cd3      	ldrb	r3, [r2, r3]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	3b01      	subs	r3, #1
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d822      	bhi.n	800a3a4 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	88db      	ldrh	r3, [r3, #6]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d006      	beq.n	800a374 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	0011      	movs	r1, r2
 800a36c:	0018      	movs	r0, r3
 800a36e:	f000 f89e 	bl	800a4ae <USBD_CtlError>
        break;
 800a372:	e01e      	b.n	800a3b2 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	23a9      	movs	r3, #169	; 0xa9
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	58d3      	ldr	r3, [r2, r3]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	2202      	movs	r2, #2
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	330c      	adds	r3, #12
 800a396:	0019      	movs	r1, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	0018      	movs	r0, r3
 800a39e:	f000 f90e 	bl	800a5be <USBD_CtlSendData>
      break;
 800a3a2:	e006      	b.n	800a3b2 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	0011      	movs	r1, r2
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	f000 f87f 	bl	800a4ae <USBD_CtlError>
      break;
 800a3b0:	46c0      	nop			; (mov r8, r8)
  }
}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	b002      	add	sp, #8
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	885b      	ldrh	r3, [r3, #2]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d108      	bne.n	800a3de <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	23a9      	movs	r3, #169	; 0xa9
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f000 f94e 	bl	800a67a <USBD_CtlSendStatus>
  }
}
 800a3de:	46c0      	nop			; (mov r8, r8)
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	b002      	add	sp, #8
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	23a7      	movs	r3, #167	; 0xa7
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	5cd3      	ldrb	r3, [r2, r3]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d80d      	bhi.n	800a41c <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	885b      	ldrh	r3, [r3, #2]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d110      	bne.n	800a42a <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	23a9      	movs	r3, #169	; 0xa9
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	2100      	movs	r1, #0
 800a410:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	0018      	movs	r0, r3
 800a416:	f000 f930 	bl	800a67a <USBD_CtlSendStatus>
      }
      break;
 800a41a:	e006      	b.n	800a42a <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	0011      	movs	r1, r2
 800a422:	0018      	movs	r0, r3
 800a424:	f000 f843 	bl	800a4ae <USBD_CtlError>
      break;
 800a428:	e000      	b.n	800a42c <USBD_ClrFeature+0x46>
      break;
 800a42a:	46c0      	nop			; (mov r8, r8)
  }
}
 800a42c:	46c0      	nop			; (mov r8, r8)
 800a42e:	46bd      	mov	sp, r7
 800a430:	b002      	add	sp, #8
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	781a      	ldrb	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3301      	adds	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	0018      	movs	r0, r3
 800a462:	f7ff f98c 	bl	800977e <SWAPBYTE>
 800a466:	0003      	movs	r3, r0
 800a468:	001a      	movs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3301      	adds	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	0018      	movs	r0, r3
 800a47e:	f7ff f97e 	bl	800977e <SWAPBYTE>
 800a482:	0003      	movs	r3, r0
 800a484:	001a      	movs	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3301      	adds	r3, #1
 800a48e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3301      	adds	r3, #1
 800a494:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	0018      	movs	r0, r3
 800a49a:	f7ff f970 	bl	800977e <SWAPBYTE>
 800a49e:	0003      	movs	r3, r0
 800a4a0:	001a      	movs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	80da      	strh	r2, [r3, #6]
}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	b004      	add	sp, #16
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2180      	movs	r1, #128	; 0x80
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f002 ffb4 	bl	800d42a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f002 ffaf 	bl	800d42a <USBD_LL_StallEP>
}
 800a4cc:	46c0      	nop			; (mov r8, r8)
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	b002      	add	sp, #8
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4e0:	2417      	movs	r4, #23
 800a4e2:	193b      	adds	r3, r7, r4
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d044      	beq.n	800a578 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f000 f843 	bl	800a580 <USBD_GetLen>
 800a4fa:	0003      	movs	r3, r0
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	18db      	adds	r3, r3, r3
 800a502:	b29a      	uxth	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a508:	193b      	adds	r3, r7, r4
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	18d3      	adds	r3, r2, r3
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	7812      	ldrb	r2, [r2, #0]
 800a514:	701a      	strb	r2, [r3, #0]
  idx++;
 800a516:	193b      	adds	r3, r7, r4
 800a518:	781a      	ldrb	r2, [r3, #0]
 800a51a:	193b      	adds	r3, r7, r4
 800a51c:	3201      	adds	r2, #1
 800a51e:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a520:	193b      	adds	r3, r7, r4
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	18d3      	adds	r3, r2, r3
 800a528:	2203      	movs	r2, #3
 800a52a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a52c:	193b      	adds	r3, r7, r4
 800a52e:	781a      	ldrb	r2, [r3, #0]
 800a530:	193b      	adds	r3, r7, r4
 800a532:	3201      	adds	r2, #1
 800a534:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800a536:	e01a      	b.n	800a56e <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800a538:	2117      	movs	r1, #23
 800a53a:	187b      	adds	r3, r7, r1
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	18d3      	adds	r3, r2, r3
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	7812      	ldrb	r2, [r2, #0]
 800a546:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	3301      	adds	r3, #1
 800a54c:	613b      	str	r3, [r7, #16]
    idx++;
 800a54e:	187b      	adds	r3, r7, r1
 800a550:	781a      	ldrb	r2, [r3, #0]
 800a552:	187b      	adds	r3, r7, r1
 800a554:	3201      	adds	r2, #1
 800a556:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800a558:	187b      	adds	r3, r7, r1
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	18d3      	adds	r3, r2, r3
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
    idx++;
 800a564:	187b      	adds	r3, r7, r1
 800a566:	781a      	ldrb	r2, [r3, #0]
 800a568:	187b      	adds	r3, r7, r1
 800a56a:	3201      	adds	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e0      	bne.n	800a538 <USBD_GetString+0x64>
 800a576:	e000      	b.n	800a57a <USBD_GetString+0xa6>
    return;
 800a578:	46c0      	nop			; (mov r8, r8)
  }
}
 800a57a:	46bd      	mov	sp, r7
 800a57c:	b007      	add	sp, #28
 800a57e:	bd90      	pop	{r4, r7, pc}

0800a580 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a588:	230f      	movs	r3, #15
 800a58a:	18fb      	adds	r3, r7, r3
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a594:	e008      	b.n	800a5a8 <USBD_GetLen+0x28>
  {
    len++;
 800a596:	210f      	movs	r1, #15
 800a598:	187b      	adds	r3, r7, r1
 800a59a:	781a      	ldrb	r2, [r3, #0]
 800a59c:	187b      	adds	r3, r7, r1
 800a59e:	3201      	adds	r2, #1
 800a5a0:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1f2      	bne.n	800a596 <USBD_GetLen+0x16>
  }

  return len;
 800a5b0:	230f      	movs	r3, #15
 800a5b2:	18fb      	adds	r3, r7, r3
 800a5b4:	781b      	ldrb	r3, [r3, #0]
}
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	b004      	add	sp, #16
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	23a5      	movs	r3, #165	; 0xa5
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	2102      	movs	r1, #2
 800a5d2:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	f002 ffd1 	bl	800d58e <USBD_LL_Transmit>

  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	b004      	add	sp, #16
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	2100      	movs	r1, #0
 800a60a:	f002 ffc0 	bl	800d58e <USBD_LL_Transmit>

  return USBD_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	0018      	movs	r0, r3
 800a612:	46bd      	mov	sp, r7
 800a614:	b004      	add	sp, #16
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	23a5      	movs	r3, #165	; 0xa5
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	2103      	movs	r1, #3
 800a62c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	23ac      	movs	r3, #172	; 0xac
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	23ae      	movs	r3, #174	; 0xae
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	50d1      	str	r1, [r2, r3]
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	2100      	movs	r1, #0
 800a64a:	f002 ffd0 	bl	800d5ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	0018      	movs	r0, r3
 800a652:	46bd      	mov	sp, r7
 800a654:	b004      	add	sp, #16
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	2100      	movs	r1, #0
 800a66c:	f002 ffbf 	bl	800d5ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	0018      	movs	r0, r3
 800a674:	46bd      	mov	sp, r7
 800a676:	b004      	add	sp, #16
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	23a5      	movs	r3, #165	; 0xa5
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	2104      	movs	r1, #4
 800a68a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	2300      	movs	r3, #0
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	f002 ff7b 	bl	800d58e <USBD_LL_Transmit>

  return USBD_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	0018      	movs	r0, r3
 800a69c:	46bd      	mov	sp, r7
 800a69e:	b002      	add	sp, #8
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	23a5      	movs	r3, #165	; 0xa5
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	2105      	movs	r1, #5
 800a6b2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	f002 ff97 	bl	800d5ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	b002      	add	sp, #8
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <__NVIC_SetPriority>:
{
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	0002      	movs	r2, r0
 800a6d4:	6039      	str	r1, [r7, #0]
 800a6d6:	1dfb      	adds	r3, r7, #7
 800a6d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a6da:	1dfb      	adds	r3, r7, #7
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b7f      	cmp	r3, #127	; 0x7f
 800a6e0:	d828      	bhi.n	800a734 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a6e2:	4a2f      	ldr	r2, [pc, #188]	; (800a7a0 <__NVIC_SetPriority+0xd4>)
 800a6e4:	1dfb      	adds	r3, r7, #7
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	b25b      	sxtb	r3, r3
 800a6ea:	089b      	lsrs	r3, r3, #2
 800a6ec:	33c0      	adds	r3, #192	; 0xc0
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	589b      	ldr	r3, [r3, r2]
 800a6f2:	1dfa      	adds	r2, r7, #7
 800a6f4:	7812      	ldrb	r2, [r2, #0]
 800a6f6:	0011      	movs	r1, r2
 800a6f8:	2203      	movs	r2, #3
 800a6fa:	400a      	ands	r2, r1
 800a6fc:	00d2      	lsls	r2, r2, #3
 800a6fe:	21ff      	movs	r1, #255	; 0xff
 800a700:	4091      	lsls	r1, r2
 800a702:	000a      	movs	r2, r1
 800a704:	43d2      	mvns	r2, r2
 800a706:	401a      	ands	r2, r3
 800a708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	019b      	lsls	r3, r3, #6
 800a70e:	22ff      	movs	r2, #255	; 0xff
 800a710:	401a      	ands	r2, r3
 800a712:	1dfb      	adds	r3, r7, #7
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	0018      	movs	r0, r3
 800a718:	2303      	movs	r3, #3
 800a71a:	4003      	ands	r3, r0
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a720:	481f      	ldr	r0, [pc, #124]	; (800a7a0 <__NVIC_SetPriority+0xd4>)
 800a722:	1dfb      	adds	r3, r7, #7
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	b25b      	sxtb	r3, r3
 800a728:	089b      	lsrs	r3, r3, #2
 800a72a:	430a      	orrs	r2, r1
 800a72c:	33c0      	adds	r3, #192	; 0xc0
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	501a      	str	r2, [r3, r0]
}
 800a732:	e031      	b.n	800a798 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a734:	4a1b      	ldr	r2, [pc, #108]	; (800a7a4 <__NVIC_SetPriority+0xd8>)
 800a736:	1dfb      	adds	r3, r7, #7
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	0019      	movs	r1, r3
 800a73c:	230f      	movs	r3, #15
 800a73e:	400b      	ands	r3, r1
 800a740:	3b08      	subs	r3, #8
 800a742:	089b      	lsrs	r3, r3, #2
 800a744:	3306      	adds	r3, #6
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	18d3      	adds	r3, r2, r3
 800a74a:	3304      	adds	r3, #4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	1dfa      	adds	r2, r7, #7
 800a750:	7812      	ldrb	r2, [r2, #0]
 800a752:	0011      	movs	r1, r2
 800a754:	2203      	movs	r2, #3
 800a756:	400a      	ands	r2, r1
 800a758:	00d2      	lsls	r2, r2, #3
 800a75a:	21ff      	movs	r1, #255	; 0xff
 800a75c:	4091      	lsls	r1, r2
 800a75e:	000a      	movs	r2, r1
 800a760:	43d2      	mvns	r2, r2
 800a762:	401a      	ands	r2, r3
 800a764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	019b      	lsls	r3, r3, #6
 800a76a:	22ff      	movs	r2, #255	; 0xff
 800a76c:	401a      	ands	r2, r3
 800a76e:	1dfb      	adds	r3, r7, #7
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	0018      	movs	r0, r3
 800a774:	2303      	movs	r3, #3
 800a776:	4003      	ands	r3, r0
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a77c:	4809      	ldr	r0, [pc, #36]	; (800a7a4 <__NVIC_SetPriority+0xd8>)
 800a77e:	1dfb      	adds	r3, r7, #7
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	001c      	movs	r4, r3
 800a784:	230f      	movs	r3, #15
 800a786:	4023      	ands	r3, r4
 800a788:	3b08      	subs	r3, #8
 800a78a:	089b      	lsrs	r3, r3, #2
 800a78c:	430a      	orrs	r2, r1
 800a78e:	3306      	adds	r3, #6
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	18c3      	adds	r3, r0, r3
 800a794:	3304      	adds	r3, #4
 800a796:	601a      	str	r2, [r3, #0]
}
 800a798:	46c0      	nop			; (mov r8, r8)
 800a79a:	46bd      	mov	sp, r7
 800a79c:	b003      	add	sp, #12
 800a79e:	bd90      	pop	{r4, r7, pc}
 800a7a0:	e000e100 	.word	0xe000e100
 800a7a4:	e000ed00 	.word	0xe000ed00

0800a7a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <SysTick_Handler+0x1c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a7b0:	f001 fbd0 	bl	800bf54 <xTaskGetSchedulerState>
 800a7b4:	0003      	movs	r3, r0
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d001      	beq.n	800a7be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a7ba:	f002 f89d 	bl	800c8f8 <xPortSysTickHandler>
  }
}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	e000e010 	.word	0xe000e010

0800a7c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a7cc:	2305      	movs	r3, #5
 800a7ce:	425b      	negs	r3, r3
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f7ff ff7a 	bl	800a6cc <__NVIC_SetPriority>
#endif
}
 800a7d8:	46c0      	nop			; (mov r8, r8)
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7e6:	f3ef 8305 	mrs	r3, IPSR
 800a7ea:	603b      	str	r3, [r7, #0]
  return(result);
 800a7ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a7f2:	2306      	movs	r3, #6
 800a7f4:	425b      	negs	r3, r3
 800a7f6:	607b      	str	r3, [r7, #4]
 800a7f8:	e00c      	b.n	800a814 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <osKernelInitialize+0x40>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d105      	bne.n	800a80e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a802:	4b07      	ldr	r3, [pc, #28]	; (800a820 <osKernelInitialize+0x40>)
 800a804:	2201      	movs	r2, #1
 800a806:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a808:	2300      	movs	r3, #0
 800a80a:	607b      	str	r3, [r7, #4]
 800a80c:	e002      	b.n	800a814 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a80e:	2301      	movs	r3, #1
 800a810:	425b      	negs	r3, r3
 800a812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a814:	687b      	ldr	r3, [r7, #4]
}
 800a816:	0018      	movs	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	b002      	add	sp, #8
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	46c0      	nop			; (mov r8, r8)
 800a820:	20000210 	.word	0x20000210

0800a824 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a82a:	f3ef 8305 	mrs	r3, IPSR
 800a82e:	603b      	str	r3, [r7, #0]
  return(result);
 800a830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a836:	2306      	movs	r3, #6
 800a838:	425b      	negs	r3, r3
 800a83a:	607b      	str	r3, [r7, #4]
 800a83c:	e010      	b.n	800a860 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a83e:	4b0b      	ldr	r3, [pc, #44]	; (800a86c <osKernelStart+0x48>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d109      	bne.n	800a85a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a846:	f7ff ffbf 	bl	800a7c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a84a:	4b08      	ldr	r3, [pc, #32]	; (800a86c <osKernelStart+0x48>)
 800a84c:	2202      	movs	r2, #2
 800a84e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a850:	f000 ff86 	bl	800b760 <vTaskStartScheduler>
      stat = osOK;
 800a854:	2300      	movs	r3, #0
 800a856:	607b      	str	r3, [r7, #4]
 800a858:	e002      	b.n	800a860 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a85a:	2301      	movs	r3, #1
 800a85c:	425b      	negs	r3, r3
 800a85e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a860:	687b      	ldr	r3, [r7, #4]
}
 800a862:	0018      	movs	r0, r3
 800a864:	46bd      	mov	sp, r7
 800a866:	b002      	add	sp, #8
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	20000210 	.word	0x20000210

0800a870 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a870:	b5b0      	push	{r4, r5, r7, lr}
 800a872:	b08e      	sub	sp, #56	; 0x38
 800a874:	af04      	add	r7, sp, #16
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a880:	f3ef 8305 	mrs	r3, IPSR
 800a884:	617b      	str	r3, [r7, #20]
  return(result);
 800a886:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d000      	beq.n	800a88e <osThreadNew+0x1e>
 800a88c:	e082      	b.n	800a994 <osThreadNew+0x124>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d100      	bne.n	800a896 <osThreadNew+0x26>
 800a894:	e07e      	b.n	800a994 <osThreadNew+0x124>
    stack = configMINIMAL_STACK_SIZE;
 800a896:	2380      	movs	r3, #128	; 0x80
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a89c:	2318      	movs	r3, #24
 800a89e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	425b      	negs	r3, r3
 800a8a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d044      	beq.n	800a93a <osThreadNew+0xca>
      if (attr->name != NULL) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <osThreadNew+0x4e>
        name = attr->name;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <osThreadNew+0x5c>
        prio = (UBaseType_t)attr->priority;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d007      	beq.n	800a8e2 <osThreadNew+0x72>
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	2b38      	cmp	r3, #56	; 0x38
 800a8d6:	d804      	bhi.n	800a8e2 <osThreadNew+0x72>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d001      	beq.n	800a8e6 <osThreadNew+0x76>
        return (NULL);
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e057      	b.n	800a996 <osThreadNew+0x126>
      }

      if (attr->stack_size > 0U) {
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	089b      	lsrs	r3, r3, #2
 800a8f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00e      	beq.n	800a91c <osThreadNew+0xac>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	2bbb      	cmp	r3, #187	; 0xbb
 800a904:	d90a      	bls.n	800a91c <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d006      	beq.n	800a91c <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <osThreadNew+0xac>
        mem = 1;
 800a916:	2301      	movs	r3, #1
 800a918:	61bb      	str	r3, [r7, #24]
 800a91a:	e010      	b.n	800a93e <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10c      	bne.n	800a93e <osThreadNew+0xce>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d108      	bne.n	800a93e <osThreadNew+0xce>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d104      	bne.n	800a93e <osThreadNew+0xce>
          mem = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	61bb      	str	r3, [r7, #24]
 800a938:	e001      	b.n	800a93e <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d112      	bne.n	800a96a <osThreadNew+0xfa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a94c:	68bd      	ldr	r5, [r7, #8]
 800a94e:	6a3c      	ldr	r4, [r7, #32]
 800a950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	9201      	str	r2, [sp, #4]
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	002b      	movs	r3, r5
 800a95e:	0022      	movs	r2, r4
 800a960:	f000 fd3f 	bl	800b3e2 <xTaskCreateStatic>
 800a964:	0003      	movs	r3, r0
 800a966:	613b      	str	r3, [r7, #16]
 800a968:	e014      	b.n	800a994 <osThreadNew+0x124>
      #endif
    }
    else {
      if (mem == 0) {
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d111      	bne.n	800a994 <osThreadNew+0x124>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	b29a      	uxth	r2, r3
 800a974:	68bc      	ldr	r4, [r7, #8]
 800a976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	2310      	movs	r3, #16
 800a97c:	18fb      	adds	r3, r7, r3
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	0023      	movs	r3, r4
 800a986:	f000 fd70 	bl	800b46a <xTaskCreate>
 800a98a:	0003      	movs	r3, r0
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d001      	beq.n	800a994 <osThreadNew+0x124>
            hTask = NULL;
 800a990:	2300      	movs	r3, #0
 800a992:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a994:	693b      	ldr	r3, [r7, #16]
}
 800a996:	0018      	movs	r0, r3
 800a998:	46bd      	mov	sp, r7
 800a99a:	b00a      	add	sp, #40	; 0x28
 800a99c:	bdb0      	pop	{r4, r5, r7, pc}

0800a99e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9a6:	f3ef 8305 	mrs	r3, IPSR
 800a9aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <osDelay+0x1c>
    stat = osErrorISR;
 800a9b2:	2306      	movs	r3, #6
 800a9b4:	425b      	negs	r3, r3
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e008      	b.n	800a9cc <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <osDelay+0x2e>
      vTaskDelay(ticks);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f000 fea4 	bl	800b714 <vTaskDelay>
    }
  }

  return (stat);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b004      	add	sp, #16
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4a06      	ldr	r2, [pc, #24]	; (800aa00 <vApplicationGetIdleTaskMemory+0x28>)
 800a9e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	4a05      	ldr	r2, [pc, #20]	; (800aa04 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2280      	movs	r2, #128	; 0x80
 800a9f4:	0052      	lsls	r2, r2, #1
 800a9f6:	601a      	str	r2, [r3, #0]
}
 800a9f8:	46c0      	nop			; (mov r8, r8)
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	b004      	add	sp, #16
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	20000214 	.word	0x20000214
 800aa04:	200002d0 	.word	0x200002d0

0800aa08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <vApplicationGetTimerTaskMemory+0x28>)
 800aa18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2280      	movs	r2, #128	; 0x80
 800aa24:	0092      	lsls	r2, r2, #2
 800aa26:	601a      	str	r2, [r3, #0]
}
 800aa28:	46c0      	nop			; (mov r8, r8)
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	b004      	add	sp, #16
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	200006d0 	.word	0x200006d0
 800aa34:	2000078c 	.word	0x2000078c

0800aa38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3308      	adds	r3, #8
 800aa44:	001a      	movs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	4252      	negs	r2, r2
 800aa50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3308      	adds	r3, #8
 800aa56:	001a      	movs	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3308      	adds	r3, #8
 800aa60:	001a      	movs	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa6c:	46c0      	nop			; (mov r8, r8)
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	b002      	add	sp, #8
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	46bd      	mov	sp, r7
 800aa86:	b002      	add	sp, #8
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	689a      	ldr	r2, [r3, #8]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	601a      	str	r2, [r3, #0]
}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	46bd      	mov	sp, r7
 800aaca:	b004      	add	sp, #16
 800aacc:	bd80      	pop	{r7, pc}

0800aace <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	3301      	adds	r3, #1
 800aae2:	d103      	bne.n	800aaec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	60fb      	str	r3, [r7, #12]
 800aaea:	e00c      	b.n	800ab06 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	e002      	b.n	800aafa <vListInsert+0x2c>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d2f6      	bcs.n	800aaf4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	685a      	ldr	r2, [r3, #4]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	601a      	str	r2, [r3, #0]
}
 800ab32:	46c0      	nop			; (mov r8, r8)
 800ab34:	46bd      	mov	sp, r7
 800ab36:	b004      	add	sp, #16
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6892      	ldr	r2, [r2, #8]
 800ab50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6852      	ldr	r2, [r2, #4]
 800ab5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d103      	bne.n	800ab6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689a      	ldr	r2, [r3, #8]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
}
 800ab82:	0018      	movs	r0, r3
 800ab84:	46bd      	mov	sp, r7
 800ab86:	b004      	add	sp, #16
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <xQueueGenericReset+0x18>
 800ab9e:	b672      	cpsid	i
 800aba0:	e7fe      	b.n	800aba0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800aba2:	f001 fe4d 	bl	800c840 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	434b      	muls	r3, r1
 800abb4:	18d2      	adds	r2, r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd0:	1e59      	subs	r1, r3, #1
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	434b      	muls	r3, r1
 800abd8:	18d2      	adds	r2, r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2244      	movs	r2, #68	; 0x44
 800abe2:	21ff      	movs	r1, #255	; 0xff
 800abe4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2245      	movs	r2, #69	; 0x45
 800abea:	21ff      	movs	r1, #255	; 0xff
 800abec:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10d      	bne.n	800ac10 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d013      	beq.n	800ac24 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3310      	adds	r3, #16
 800ac00:	0018      	movs	r0, r3
 800ac02:	f001 f80f 	bl	800bc24 <xTaskRemoveFromEventList>
 800ac06:	1e03      	subs	r3, r0, #0
 800ac08:	d00c      	beq.n	800ac24 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac0a:	f001 fe09 	bl	800c820 <vPortYield>
 800ac0e:	e009      	b.n	800ac24 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3310      	adds	r3, #16
 800ac14:	0018      	movs	r0, r3
 800ac16:	f7ff ff0f 	bl	800aa38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	3324      	adds	r3, #36	; 0x24
 800ac1e:	0018      	movs	r0, r3
 800ac20:	f7ff ff0a 	bl	800aa38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac24:	f001 fe1e 	bl	800c864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac28:	2301      	movs	r3, #1
}
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	b004      	add	sp, #16
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac32:	b590      	push	{r4, r7, lr}
 800ac34:	b089      	sub	sp, #36	; 0x24
 800ac36:	af02      	add	r7, sp, #8
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
 800ac3e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <xQueueGenericCreateStatic+0x18>
 800ac46:	b672      	cpsid	i
 800ac48:	e7fe      	b.n	800ac48 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <xQueueGenericCreateStatic+0x22>
 800ac50:	b672      	cpsid	i
 800ac52:	e7fe      	b.n	800ac52 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <xQueueGenericCreateStatic+0x2e>
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <xQueueGenericCreateStatic+0x32>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <xQueueGenericCreateStatic+0x34>
 800ac64:	2300      	movs	r3, #0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <xQueueGenericCreateStatic+0x3c>
 800ac6a:	b672      	cpsid	i
 800ac6c:	e7fe      	b.n	800ac6c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <xQueueGenericCreateStatic+0x48>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <xQueueGenericCreateStatic+0x4c>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <xQueueGenericCreateStatic+0x4e>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <xQueueGenericCreateStatic+0x56>
 800ac84:	b672      	cpsid	i
 800ac86:	e7fe      	b.n	800ac86 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac88:	2350      	movs	r3, #80	; 0x50
 800ac8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2b50      	cmp	r3, #80	; 0x50
 800ac90:	d001      	beq.n	800ac96 <xQueueGenericCreateStatic+0x64>
 800ac92:	b672      	cpsid	i
 800ac94:	e7fe      	b.n	800ac94 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac96:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00e      	beq.n	800acc0 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2246      	movs	r2, #70	; 0x46
 800aca6:	2101      	movs	r1, #1
 800aca8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acaa:	2328      	movs	r3, #40	; 0x28
 800acac:	18fb      	adds	r3, r7, r3
 800acae:	781c      	ldrb	r4, [r3, #0]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	0023      	movs	r3, r4
 800acbc:	f000 f805 	bl	800acca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acc0:	697b      	ldr	r3, [r7, #20]
	}
 800acc2:	0018      	movs	r0, r3
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b007      	add	sp, #28
 800acc8:	bd90      	pop	{r4, r7, pc}

0800acca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	607a      	str	r2, [r7, #4]
 800acd6:	001a      	movs	r2, r3
 800acd8:	1cfb      	adds	r3, r7, #3
 800acda:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	e002      	b.n	800acf0 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	2101      	movs	r1, #1
 800ad00:	0018      	movs	r0, r3
 800ad02:	f7ff ff42 	bl	800ab8a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	1cfa      	adds	r2, r7, #3
 800ad0a:	214c      	movs	r1, #76	; 0x4c
 800ad0c:	7812      	ldrb	r2, [r2, #0]
 800ad0e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad10:	46c0      	nop			; (mov r8, r8)
 800ad12:	46bd      	mov	sp, r7
 800ad14:	b004      	add	sp, #16
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08a      	sub	sp, #40	; 0x28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad26:	2300      	movs	r3, #0
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <xQueueGenericSend+0x20>
 800ad34:	b672      	cpsid	i
 800ad36:	e7fe      	b.n	800ad36 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d103      	bne.n	800ad46 <xQueueGenericSend+0x2e>
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d101      	bne.n	800ad4a <xQueueGenericSend+0x32>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e000      	b.n	800ad4c <xQueueGenericSend+0x34>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <xQueueGenericSend+0x3c>
 800ad50:	b672      	cpsid	i
 800ad52:	e7fe      	b.n	800ad52 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d103      	bne.n	800ad62 <xQueueGenericSend+0x4a>
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d101      	bne.n	800ad66 <xQueueGenericSend+0x4e>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <xQueueGenericSend+0x50>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <xQueueGenericSend+0x58>
 800ad6c:	b672      	cpsid	i
 800ad6e:	e7fe      	b.n	800ad6e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad70:	f001 f8f0 	bl	800bf54 <xTaskGetSchedulerState>
 800ad74:	1e03      	subs	r3, r0, #0
 800ad76:	d102      	bne.n	800ad7e <xQueueGenericSend+0x66>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <xQueueGenericSend+0x6a>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <xQueueGenericSend+0x6c>
 800ad82:	2300      	movs	r3, #0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <xQueueGenericSend+0x74>
 800ad88:	b672      	cpsid	i
 800ad8a:	e7fe      	b.n	800ad8a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad8c:	f001 fd58 	bl	800c840 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad90:	6a3b      	ldr	r3, [r7, #32]
 800ad92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d302      	bcc.n	800ada2 <xQueueGenericSend+0x8a>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d11e      	bne.n	800ade0 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	0018      	movs	r0, r3
 800adaa:	f000 f9a2 	bl	800b0f2 <prvCopyDataToQueue>
 800adae:	0003      	movs	r3, r0
 800adb0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d009      	beq.n	800adce <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	3324      	adds	r3, #36	; 0x24
 800adbe:	0018      	movs	r0, r3
 800adc0:	f000 ff30 	bl	800bc24 <xTaskRemoveFromEventList>
 800adc4:	1e03      	subs	r3, r0, #0
 800adc6:	d007      	beq.n	800add8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800adc8:	f001 fd2a 	bl	800c820 <vPortYield>
 800adcc:	e004      	b.n	800add8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800add4:	f001 fd24 	bl	800c820 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800add8:	f001 fd44 	bl	800c864 <vPortExitCritical>
				return pdPASS;
 800addc:	2301      	movs	r3, #1
 800adde:	e05b      	b.n	800ae98 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d103      	bne.n	800adee <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ade6:	f001 fd3d 	bl	800c864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800adea:	2300      	movs	r3, #0
 800adec:	e054      	b.n	800ae98 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d106      	bne.n	800ae02 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adf4:	2314      	movs	r3, #20
 800adf6:	18fb      	adds	r3, r7, r3
 800adf8:	0018      	movs	r0, r3
 800adfa:	f000 ff6f 	bl	800bcdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adfe:	2301      	movs	r3, #1
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae02:	f001 fd2f 	bl	800c864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae06:	f000 fd09 	bl	800b81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae0a:	f001 fd19 	bl	800c840 <vPortEnterCritical>
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	2244      	movs	r2, #68	; 0x44
 800ae12:	5c9b      	ldrb	r3, [r3, r2]
 800ae14:	b25b      	sxtb	r3, r3
 800ae16:	3301      	adds	r3, #1
 800ae18:	d103      	bne.n	800ae22 <xQueueGenericSend+0x10a>
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	2244      	movs	r2, #68	; 0x44
 800ae1e:	2100      	movs	r1, #0
 800ae20:	5499      	strb	r1, [r3, r2]
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	2245      	movs	r2, #69	; 0x45
 800ae26:	5c9b      	ldrb	r3, [r3, r2]
 800ae28:	b25b      	sxtb	r3, r3
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	d103      	bne.n	800ae36 <xQueueGenericSend+0x11e>
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	2245      	movs	r2, #69	; 0x45
 800ae32:	2100      	movs	r1, #0
 800ae34:	5499      	strb	r1, [r3, r2]
 800ae36:	f001 fd15 	bl	800c864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae3a:	1d3a      	adds	r2, r7, #4
 800ae3c:	2314      	movs	r3, #20
 800ae3e:	18fb      	adds	r3, r7, r3
 800ae40:	0011      	movs	r1, r2
 800ae42:	0018      	movs	r0, r3
 800ae44:	f000 ff5e 	bl	800bd04 <xTaskCheckForTimeOut>
 800ae48:	1e03      	subs	r3, r0, #0
 800ae4a:	d11e      	bne.n	800ae8a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	0018      	movs	r0, r3
 800ae50:	f000 fa54 	bl	800b2fc <prvIsQueueFull>
 800ae54:	1e03      	subs	r3, r0, #0
 800ae56:	d011      	beq.n	800ae7c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	3310      	adds	r3, #16
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	0011      	movs	r1, r2
 800ae60:	0018      	movs	r0, r3
 800ae62:	f000 fe9b 	bl	800bb9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f000 f9d3 	bl	800b214 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae6e:	f000 fce1 	bl	800b834 <xTaskResumeAll>
 800ae72:	1e03      	subs	r3, r0, #0
 800ae74:	d18a      	bne.n	800ad8c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800ae76:	f001 fcd3 	bl	800c820 <vPortYield>
 800ae7a:	e787      	b.n	800ad8c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	0018      	movs	r0, r3
 800ae80:	f000 f9c8 	bl	800b214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae84:	f000 fcd6 	bl	800b834 <xTaskResumeAll>
 800ae88:	e780      	b.n	800ad8c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	0018      	movs	r0, r3
 800ae8e:	f000 f9c1 	bl	800b214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae92:	f000 fccf 	bl	800b834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae98:	0018      	movs	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	b00a      	add	sp, #40	; 0x28
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b08b      	sub	sp, #44	; 0x2c
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <xQueueGenericSendFromISR+0x1c>
 800aeb8:	b672      	cpsid	i
 800aeba:	e7fe      	b.n	800aeba <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <xQueueGenericSendFromISR+0x2a>
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <xQueueGenericSendFromISR+0x2e>
 800aeca:	2301      	movs	r3, #1
 800aecc:	e000      	b.n	800aed0 <xQueueGenericSendFromISR+0x30>
 800aece:	2300      	movs	r3, #0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <xQueueGenericSendFromISR+0x38>
 800aed4:	b672      	cpsid	i
 800aed6:	e7fe      	b.n	800aed6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d103      	bne.n	800aee6 <xQueueGenericSendFromISR+0x46>
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d101      	bne.n	800aeea <xQueueGenericSendFromISR+0x4a>
 800aee6:	2301      	movs	r3, #1
 800aee8:	e000      	b.n	800aeec <xQueueGenericSendFromISR+0x4c>
 800aeea:	2300      	movs	r3, #0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <xQueueGenericSendFromISR+0x54>
 800aef0:	b672      	cpsid	i
 800aef2:	e7fe      	b.n	800aef2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aef4:	f001 fcce 	bl	800c894 <ulSetInterruptMaskFromISR>
 800aef8:	0003      	movs	r3, r0
 800aefa:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af04:	429a      	cmp	r2, r3
 800af06:	d302      	bcc.n	800af0e <xQueueGenericSendFromISR+0x6e>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d131      	bne.n	800af72 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af0e:	241b      	movs	r4, #27
 800af10:	193b      	adds	r3, r7, r4
 800af12:	6a3a      	ldr	r2, [r7, #32]
 800af14:	2145      	movs	r1, #69	; 0x45
 800af16:	5c52      	ldrb	r2, [r2, r1]
 800af18:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af1a:	6a3b      	ldr	r3, [r7, #32]
 800af1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	68b9      	ldr	r1, [r7, #8]
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	0018      	movs	r0, r3
 800af28:	f000 f8e3 	bl	800b0f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af2c:	193b      	adds	r3, r7, r4
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	b25b      	sxtb	r3, r3
 800af32:	3301      	adds	r3, #1
 800af34:	d111      	bne.n	800af5a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d016      	beq.n	800af6c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	3324      	adds	r3, #36	; 0x24
 800af42:	0018      	movs	r0, r3
 800af44:	f000 fe6e 	bl	800bc24 <xTaskRemoveFromEventList>
 800af48:	1e03      	subs	r3, r0, #0
 800af4a:	d00f      	beq.n	800af6c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00c      	beq.n	800af6c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	e008      	b.n	800af6c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af5a:	231b      	movs	r3, #27
 800af5c:	18fb      	adds	r3, r7, r3
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	b2db      	uxtb	r3, r3
 800af64:	b259      	sxtb	r1, r3
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	2245      	movs	r2, #69	; 0x45
 800af6a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800af6c:	2301      	movs	r3, #1
 800af6e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800af70:	e001      	b.n	800af76 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af72:	2300      	movs	r3, #0
 800af74:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	0018      	movs	r0, r3
 800af7a:	f001 fc91 	bl	800c8a0 <vClearInterruptMaskFromISR>

	return xReturn;
 800af7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af80:	0018      	movs	r0, r3
 800af82:	46bd      	mov	sp, r7
 800af84:	b00b      	add	sp, #44	; 0x2c
 800af86:	bd90      	pop	{r4, r7, pc}

0800af88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af94:	2300      	movs	r3, #0
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <xQueueReceive+0x1e>
 800afa2:	b672      	cpsid	i
 800afa4:	e7fe      	b.n	800afa4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d103      	bne.n	800afb4 <xQueueReceive+0x2c>
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <xQueueReceive+0x30>
 800afb4:	2301      	movs	r3, #1
 800afb6:	e000      	b.n	800afba <xQueueReceive+0x32>
 800afb8:	2300      	movs	r3, #0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <xQueueReceive+0x3a>
 800afbe:	b672      	cpsid	i
 800afc0:	e7fe      	b.n	800afc0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc2:	f000 ffc7 	bl	800bf54 <xTaskGetSchedulerState>
 800afc6:	1e03      	subs	r3, r0, #0
 800afc8:	d102      	bne.n	800afd0 <xQueueReceive+0x48>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <xQueueReceive+0x4c>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <xQueueReceive+0x4e>
 800afd4:	2300      	movs	r3, #0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <xQueueReceive+0x56>
 800afda:	b672      	cpsid	i
 800afdc:	e7fe      	b.n	800afdc <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afde:	f001 fc2f 	bl	800c840 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d01a      	beq.n	800b024 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	0011      	movs	r1, r2
 800aff4:	0018      	movs	r0, r3
 800aff6:	f000 f8e7 	bl	800b1c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	1e5a      	subs	r2, r3, #1
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d008      	beq.n	800b01c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	3310      	adds	r3, #16
 800b00e:	0018      	movs	r0, r3
 800b010:	f000 fe08 	bl	800bc24 <xTaskRemoveFromEventList>
 800b014:	1e03      	subs	r3, r0, #0
 800b016:	d001      	beq.n	800b01c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b018:	f001 fc02 	bl	800c820 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b01c:	f001 fc22 	bl	800c864 <vPortExitCritical>
				return pdPASS;
 800b020:	2301      	movs	r3, #1
 800b022:	e062      	b.n	800b0ea <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d103      	bne.n	800b032 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b02a:	f001 fc1b 	bl	800c864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b02e:	2300      	movs	r3, #0
 800b030:	e05b      	b.n	800b0ea <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d106      	bne.n	800b046 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b038:	2314      	movs	r3, #20
 800b03a:	18fb      	adds	r3, r7, r3
 800b03c:	0018      	movs	r0, r3
 800b03e:	f000 fe4d 	bl	800bcdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b042:	2301      	movs	r3, #1
 800b044:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b046:	f001 fc0d 	bl	800c864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b04a:	f000 fbe7 	bl	800b81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b04e:	f001 fbf7 	bl	800c840 <vPortEnterCritical>
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	2244      	movs	r2, #68	; 0x44
 800b056:	5c9b      	ldrb	r3, [r3, r2]
 800b058:	b25b      	sxtb	r3, r3
 800b05a:	3301      	adds	r3, #1
 800b05c:	d103      	bne.n	800b066 <xQueueReceive+0xde>
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	2244      	movs	r2, #68	; 0x44
 800b062:	2100      	movs	r1, #0
 800b064:	5499      	strb	r1, [r3, r2]
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	2245      	movs	r2, #69	; 0x45
 800b06a:	5c9b      	ldrb	r3, [r3, r2]
 800b06c:	b25b      	sxtb	r3, r3
 800b06e:	3301      	adds	r3, #1
 800b070:	d103      	bne.n	800b07a <xQueueReceive+0xf2>
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	2245      	movs	r2, #69	; 0x45
 800b076:	2100      	movs	r1, #0
 800b078:	5499      	strb	r1, [r3, r2]
 800b07a:	f001 fbf3 	bl	800c864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b07e:	1d3a      	adds	r2, r7, #4
 800b080:	2314      	movs	r3, #20
 800b082:	18fb      	adds	r3, r7, r3
 800b084:	0011      	movs	r1, r2
 800b086:	0018      	movs	r0, r3
 800b088:	f000 fe3c 	bl	800bd04 <xTaskCheckForTimeOut>
 800b08c:	1e03      	subs	r3, r0, #0
 800b08e:	d11e      	bne.n	800b0ce <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	0018      	movs	r0, r3
 800b094:	f000 f91c 	bl	800b2d0 <prvIsQueueEmpty>
 800b098:	1e03      	subs	r3, r0, #0
 800b09a:	d011      	beq.n	800b0c0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	3324      	adds	r3, #36	; 0x24
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	0011      	movs	r1, r2
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f000 fd79 	bl	800bb9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	0018      	movs	r0, r3
 800b0ae:	f000 f8b1 	bl	800b214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0b2:	f000 fbbf 	bl	800b834 <xTaskResumeAll>
 800b0b6:	1e03      	subs	r3, r0, #0
 800b0b8:	d191      	bne.n	800afde <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800b0ba:	f001 fbb1 	bl	800c820 <vPortYield>
 800b0be:	e78e      	b.n	800afde <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f000 f8a6 	bl	800b214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0c8:	f000 fbb4 	bl	800b834 <xTaskResumeAll>
 800b0cc:	e787      	b.n	800afde <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f000 f89f 	bl	800b214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0d6:	f000 fbad 	bl	800b834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	0018      	movs	r0, r3
 800b0de:	f000 f8f7 	bl	800b2d0 <prvIsQueueEmpty>
 800b0e2:	1e03      	subs	r3, r0, #0
 800b0e4:	d100      	bne.n	800b0e8 <xQueueReceive+0x160>
 800b0e6:	e77a      	b.n	800afde <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b00a      	add	sp, #40	; 0x28
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b086      	sub	sp, #24
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	60f8      	str	r0, [r7, #12]
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10e      	bne.n	800b12e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d14e      	bne.n	800b1b6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	0018      	movs	r0, r3
 800b11e:	f000 ff35 	bl	800bf8c <xTaskPriorityDisinherit>
 800b122:	0003      	movs	r3, r0
 800b124:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	609a      	str	r2, [r3, #8]
 800b12c:	e043      	b.n	800b1b6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d119      	bne.n	800b168 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6858      	ldr	r0, [r3, #4]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	0019      	movs	r1, r3
 800b140:	f002 fb4e 	bl	800d7e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14c:	18d2      	adds	r2, r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d32b      	bcc.n	800b1b6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
 800b166:	e026      	b.n	800b1b6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68d8      	ldr	r0, [r3, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	0019      	movs	r1, r3
 800b174:	f002 fb34 	bl	800d7e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	425b      	negs	r3, r3
 800b182:	18d2      	adds	r2, r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	68da      	ldr	r2, [r3, #12]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d207      	bcs.n	800b1a4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	689a      	ldr	r2, [r3, #8]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	425b      	negs	r3, r3
 800b19e:	18d2      	adds	r2, r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d105      	bne.n	800b1b6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b1be:	697b      	ldr	r3, [r7, #20]
}
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	b006      	add	sp, #24
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d018      	beq.n	800b20c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	18d2      	adds	r2, r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d303      	bcc.n	800b1fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68d9      	ldr	r1, [r3, #12]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	0018      	movs	r0, r3
 800b208:	f002 faea 	bl	800d7e0 <memcpy>
	}
}
 800b20c:	46c0      	nop			; (mov r8, r8)
 800b20e:	46bd      	mov	sp, r7
 800b210:	b002      	add	sp, #8
 800b212:	bd80      	pop	{r7, pc}

0800b214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b21c:	f001 fb10 	bl	800c840 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b220:	230f      	movs	r3, #15
 800b222:	18fb      	adds	r3, r7, r3
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	2145      	movs	r1, #69	; 0x45
 800b228:	5c52      	ldrb	r2, [r2, r1]
 800b22a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b22c:	e013      	b.n	800b256 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	2b00      	cmp	r3, #0
 800b234:	d016      	beq.n	800b264 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3324      	adds	r3, #36	; 0x24
 800b23a:	0018      	movs	r0, r3
 800b23c:	f000 fcf2 	bl	800bc24 <xTaskRemoveFromEventList>
 800b240:	1e03      	subs	r3, r0, #0
 800b242:	d001      	beq.n	800b248 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b244:	f000 fdae 	bl	800bda4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b248:	210f      	movs	r1, #15
 800b24a:	187b      	adds	r3, r7, r1
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	3b01      	subs	r3, #1
 800b250:	b2da      	uxtb	r2, r3
 800b252:	187b      	adds	r3, r7, r1
 800b254:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b256:	230f      	movs	r3, #15
 800b258:	18fb      	adds	r3, r7, r3
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	b25b      	sxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	dce5      	bgt.n	800b22e <prvUnlockQueue+0x1a>
 800b262:	e000      	b.n	800b266 <prvUnlockQueue+0x52>
					break;
 800b264:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2245      	movs	r2, #69	; 0x45
 800b26a:	21ff      	movs	r1, #255	; 0xff
 800b26c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b26e:	f001 faf9 	bl	800c864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b272:	f001 fae5 	bl	800c840 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b276:	230e      	movs	r3, #14
 800b278:	18fb      	adds	r3, r7, r3
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	2144      	movs	r1, #68	; 0x44
 800b27e:	5c52      	ldrb	r2, [r2, r1]
 800b280:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b282:	e013      	b.n	800b2ac <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d016      	beq.n	800b2ba <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3310      	adds	r3, #16
 800b290:	0018      	movs	r0, r3
 800b292:	f000 fcc7 	bl	800bc24 <xTaskRemoveFromEventList>
 800b296:	1e03      	subs	r3, r0, #0
 800b298:	d001      	beq.n	800b29e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800b29a:	f000 fd83 	bl	800bda4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b29e:	210e      	movs	r1, #14
 800b2a0:	187b      	adds	r3, r7, r1
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	187b      	adds	r3, r7, r1
 800b2aa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2ac:	230e      	movs	r3, #14
 800b2ae:	18fb      	adds	r3, r7, r3
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	b25b      	sxtb	r3, r3
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dce5      	bgt.n	800b284 <prvUnlockQueue+0x70>
 800b2b8:	e000      	b.n	800b2bc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800b2ba:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2244      	movs	r2, #68	; 0x44
 800b2c0:	21ff      	movs	r1, #255	; 0xff
 800b2c2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b2c4:	f001 face 	bl	800c864 <vPortExitCritical>
}
 800b2c8:	46c0      	nop			; (mov r8, r8)
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	b004      	add	sp, #16
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2d8:	f001 fab2 	bl	800c840 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	e001      	b.n	800b2ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2ee:	f001 fab9 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
}
 800b2f4:	0018      	movs	r0, r3
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	b004      	add	sp, #16
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b304:	f001 fa9c 	bl	800c840 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b310:	429a      	cmp	r2, r3
 800b312:	d102      	bne.n	800b31a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	60fb      	str	r3, [r7, #12]
 800b318:	e001      	b.n	800b31e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b31e:	f001 faa1 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800b322:	68fb      	ldr	r3, [r7, #12]
}
 800b324:	0018      	movs	r0, r3
 800b326:	46bd      	mov	sp, r7
 800b328:	b004      	add	sp, #16
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b336:	2300      	movs	r3, #0
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	e015      	b.n	800b368 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b33c:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <vQueueAddToRegistry+0x4c>)
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	00d2      	lsls	r2, r2, #3
 800b342:	58d3      	ldr	r3, [r2, r3]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10c      	bne.n	800b362 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b348:	4b0b      	ldr	r3, [pc, #44]	; (800b378 <vQueueAddToRegistry+0x4c>)
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	00d2      	lsls	r2, r2, #3
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b352:	4a09      	ldr	r2, [pc, #36]	; (800b378 <vQueueAddToRegistry+0x4c>)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	18d3      	adds	r3, r2, r3
 800b35a:	3304      	adds	r3, #4
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b360:	e006      	b.n	800b370 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3301      	adds	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b07      	cmp	r3, #7
 800b36c:	d9e6      	bls.n	800b33c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	46c0      	nop			; (mov r8, r8)
 800b372:	46bd      	mov	sp, r7
 800b374:	b004      	add	sp, #16
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20011a68 	.word	0x20011a68

0800b37c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b38c:	f001 fa58 	bl	800c840 <vPortEnterCritical>
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	2244      	movs	r2, #68	; 0x44
 800b394:	5c9b      	ldrb	r3, [r3, r2]
 800b396:	b25b      	sxtb	r3, r3
 800b398:	3301      	adds	r3, #1
 800b39a:	d103      	bne.n	800b3a4 <vQueueWaitForMessageRestricted+0x28>
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2244      	movs	r2, #68	; 0x44
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	5499      	strb	r1, [r3, r2]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2245      	movs	r2, #69	; 0x45
 800b3a8:	5c9b      	ldrb	r3, [r3, r2]
 800b3aa:	b25b      	sxtb	r3, r3
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	d103      	bne.n	800b3b8 <vQueueWaitForMessageRestricted+0x3c>
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2245      	movs	r2, #69	; 0x45
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	5499      	strb	r1, [r3, r2]
 800b3b8:	f001 fa54 	bl	800c864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d106      	bne.n	800b3d2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	3324      	adds	r3, #36	; 0x24
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	68b9      	ldr	r1, [r7, #8]
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	f000 fc03 	bl	800bbd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	f7ff ff1d 	bl	800b214 <prvUnlockQueue>
	}
 800b3da:	46c0      	nop			; (mov r8, r8)
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	b006      	add	sp, #24
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3e2:	b590      	push	{r4, r7, lr}
 800b3e4:	b08d      	sub	sp, #52	; 0x34
 800b3e6:	af04      	add	r7, sp, #16
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	607a      	str	r2, [r7, #4]
 800b3ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <xTaskCreateStatic+0x18>
 800b3f6:	b672      	cpsid	i
 800b3f8:	e7fe      	b.n	800b3f8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <xTaskCreateStatic+0x22>
 800b400:	b672      	cpsid	i
 800b402:	e7fe      	b.n	800b402 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b404:	23bc      	movs	r3, #188	; 0xbc
 800b406:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2bbc      	cmp	r3, #188	; 0xbc
 800b40c:	d001      	beq.n	800b412 <xTaskCreateStatic+0x30>
 800b40e:	b672      	cpsid	i
 800b410:	e7fe      	b.n	800b410 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b412:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	2b00      	cmp	r3, #0
 800b418:	d020      	beq.n	800b45c <xTaskCreateStatic+0x7a>
 800b41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d01d      	beq.n	800b45c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b428:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	22b9      	movs	r2, #185	; 0xb9
 800b42e:	2102      	movs	r1, #2
 800b430:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b432:	683c      	ldr	r4, [r7, #0]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9303      	str	r3, [sp, #12]
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	9302      	str	r3, [sp, #8]
 800b442:	2318      	movs	r3, #24
 800b444:	18fb      	adds	r3, r7, r3
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	0023      	movs	r3, r4
 800b44e:	f000 f859 	bl	800b504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	0018      	movs	r0, r3
 800b456:	f000 f8f5 	bl	800b644 <prvAddNewTaskToReadyList>
 800b45a:	e001      	b.n	800b460 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b460:	69bb      	ldr	r3, [r7, #24]
	}
 800b462:	0018      	movs	r0, r3
 800b464:	46bd      	mov	sp, r7
 800b466:	b009      	add	sp, #36	; 0x24
 800b468:	bd90      	pop	{r4, r7, pc}

0800b46a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b46a:	b590      	push	{r4, r7, lr}
 800b46c:	b08d      	sub	sp, #52	; 0x34
 800b46e:	af04      	add	r7, sp, #16
 800b470:	60f8      	str	r0, [r7, #12]
 800b472:	60b9      	str	r1, [r7, #8]
 800b474:	603b      	str	r3, [r7, #0]
 800b476:	1dbb      	adds	r3, r7, #6
 800b478:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b47a:	1dbb      	adds	r3, r7, #6
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	0018      	movs	r0, r3
 800b482:	f001 fa75 	bl	800c970 <pvPortMalloc>
 800b486:	0003      	movs	r3, r0
 800b488:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d010      	beq.n	800b4b2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b490:	20bc      	movs	r0, #188	; 0xbc
 800b492:	f001 fa6d 	bl	800c970 <pvPortMalloc>
 800b496:	0003      	movs	r3, r0
 800b498:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	631a      	str	r2, [r3, #48]	; 0x30
 800b4a6:	e006      	b.n	800b4b6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f001 fb0c 	bl	800cac8 <vPortFree>
 800b4b0:	e001      	b.n	800b4b6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01a      	beq.n	800b4f2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	22b9      	movs	r2, #185	; 0xb9
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4c4:	1dbb      	adds	r3, r7, #6
 800b4c6:	881a      	ldrh	r2, [r3, #0]
 800b4c8:	683c      	ldr	r4, [r7, #0]
 800b4ca:	68b9      	ldr	r1, [r7, #8]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9303      	str	r3, [sp, #12]
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	9302      	str	r3, [sp, #8]
 800b4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	0023      	movs	r3, r4
 800b4e0:	f000 f810 	bl	800b504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	0018      	movs	r0, r3
 800b4e8:	f000 f8ac 	bl	800b644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	61bb      	str	r3, [r7, #24]
 800b4f0:	e002      	b.n	800b4f8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	425b      	negs	r3, r3
 800b4f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4f8:	69bb      	ldr	r3, [r7, #24]
	}
 800b4fa:	0018      	movs	r0, r3
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	b009      	add	sp, #36	; 0x24
 800b500:	bd90      	pop	{r4, r7, pc}
	...

0800b504 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	001a      	movs	r2, r3
 800b51c:	21a5      	movs	r1, #165	; 0xa5
 800b51e:	f002 f968 	bl	800d7f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4942      	ldr	r1, [pc, #264]	; (800b634 <prvInitialiseNewTask+0x130>)
 800b52a:	468c      	mov	ip, r1
 800b52c:	4463      	add	r3, ip
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	18d3      	adds	r3, r2, r3
 800b532:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	2207      	movs	r2, #7
 800b538:	4393      	bics	r3, r2
 800b53a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	2207      	movs	r2, #7
 800b540:	4013      	ands	r3, r2
 800b542:	d001      	beq.n	800b548 <prvInitialiseNewTask+0x44>
 800b544:	b672      	cpsid	i
 800b546:	e7fe      	b.n	800b546 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d020      	beq.n	800b590 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	e013      	b.n	800b57c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	18d3      	adds	r3, r2, r3
 800b55a:	7818      	ldrb	r0, [r3, #0]
 800b55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b55e:	2134      	movs	r1, #52	; 0x34
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	18d3      	adds	r3, r2, r3
 800b564:	185b      	adds	r3, r3, r1
 800b566:	1c02      	adds	r2, r0, #0
 800b568:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	18d3      	adds	r3, r2, r3
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d006      	beq.n	800b584 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	3301      	adds	r3, #1
 800b57a:	617b      	str	r3, [r7, #20]
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2b0f      	cmp	r3, #15
 800b580:	d9e8      	bls.n	800b554 <prvInitialiseNewTask+0x50>
 800b582:	e000      	b.n	800b586 <prvInitialiseNewTask+0x82>
			{
				break;
 800b584:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	2243      	movs	r2, #67	; 0x43
 800b58a:	2100      	movs	r1, #0
 800b58c:	5499      	strb	r1, [r3, r2]
 800b58e:	e003      	b.n	800b598 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	2234      	movs	r2, #52	; 0x34
 800b594:	2100      	movs	r1, #0
 800b596:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	2b37      	cmp	r3, #55	; 0x37
 800b59c:	d901      	bls.n	800b5a2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b59e:	2337      	movs	r3, #55	; 0x37
 800b5a0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a4:	6a3a      	ldr	r2, [r7, #32]
 800b5a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	6a3a      	ldr	r2, [r7, #32]
 800b5ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f7ff fa5b 	bl	800aa74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	3318      	adds	r3, #24
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	f7ff fa56 	bl	800aa74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	2238      	movs	r2, #56	; 0x38
 800b5d2:	1ad2      	subs	r2, r2, r3
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	22b4      	movs	r2, #180	; 0xb4
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e8:	22b8      	movs	r2, #184	; 0xb8
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	3354      	adds	r3, #84	; 0x54
 800b5f2:	2260      	movs	r2, #96	; 0x60
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	0018      	movs	r0, r3
 800b5f8:	f002 f8fb 	bl	800d7f2 <memset>
 800b5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fe:	4a0e      	ldr	r2, [pc, #56]	; (800b638 <prvInitialiseNewTask+0x134>)
 800b600:	659a      	str	r2, [r3, #88]	; 0x58
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	4a0d      	ldr	r2, [pc, #52]	; (800b63c <prvInitialiseNewTask+0x138>)
 800b606:	65da      	str	r2, [r3, #92]	; 0x5c
 800b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60a:	4a0d      	ldr	r2, [pc, #52]	; (800b640 <prvInitialiseNewTask+0x13c>)
 800b60c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	68f9      	ldr	r1, [r7, #12]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	0018      	movs	r0, r3
 800b616:	f001 f87b 	bl	800c710 <pxPortInitialiseStack>
 800b61a:	0002      	movs	r2, r0
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b62a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b62c:	46c0      	nop			; (mov r8, r8)
 800b62e:	46bd      	mov	sp, r7
 800b630:	b006      	add	sp, #24
 800b632:	bd80      	pop	{r7, pc}
 800b634:	3fffffff 	.word	0x3fffffff
 800b638:	0800dc28 	.word	0x0800dc28
 800b63c:	0800dc48 	.word	0x0800dc48
 800b640:	0800dc08 	.word	0x0800dc08

0800b644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b64c:	f001 f8f8 	bl	800c840 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b650:	4b2a      	ldr	r3, [pc, #168]	; (800b6fc <prvAddNewTaskToReadyList+0xb8>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	4b29      	ldr	r3, [pc, #164]	; (800b6fc <prvAddNewTaskToReadyList+0xb8>)
 800b658:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b65a:	4b29      	ldr	r3, [pc, #164]	; (800b700 <prvAddNewTaskToReadyList+0xbc>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d109      	bne.n	800b676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b662:	4b27      	ldr	r3, [pc, #156]	; (800b700 <prvAddNewTaskToReadyList+0xbc>)
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b668:	4b24      	ldr	r3, [pc, #144]	; (800b6fc <prvAddNewTaskToReadyList+0xb8>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d110      	bne.n	800b692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b670:	f000 fbb2 	bl	800bdd8 <prvInitialiseTaskLists>
 800b674:	e00d      	b.n	800b692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b676:	4b23      	ldr	r3, [pc, #140]	; (800b704 <prvAddNewTaskToReadyList+0xc0>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d109      	bne.n	800b692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b67e:	4b20      	ldr	r3, [pc, #128]	; (800b700 <prvAddNewTaskToReadyList+0xbc>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	429a      	cmp	r2, r3
 800b68a:	d802      	bhi.n	800b692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b68c:	4b1c      	ldr	r3, [pc, #112]	; (800b700 <prvAddNewTaskToReadyList+0xbc>)
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b692:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <prvAddNewTaskToReadyList+0xc4>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	4b1b      	ldr	r3, [pc, #108]	; (800b708 <prvAddNewTaskToReadyList+0xc4>)
 800b69a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b69c:	4b1a      	ldr	r3, [pc, #104]	; (800b708 <prvAddNewTaskToReadyList+0xc4>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a8:	4b18      	ldr	r3, [pc, #96]	; (800b70c <prvAddNewTaskToReadyList+0xc8>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d903      	bls.n	800b6b8 <prvAddNewTaskToReadyList+0x74>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b4:	4b15      	ldr	r3, [pc, #84]	; (800b70c <prvAddNewTaskToReadyList+0xc8>)
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6bc:	0013      	movs	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4a12      	ldr	r2, [pc, #72]	; (800b710 <prvAddNewTaskToReadyList+0xcc>)
 800b6c6:	189a      	adds	r2, r3, r2
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	0019      	movs	r1, r3
 800b6ce:	0010      	movs	r0, r2
 800b6d0:	f7ff f9db 	bl	800aa8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6d4:	f001 f8c6 	bl	800c864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6d8:	4b0a      	ldr	r3, [pc, #40]	; (800b704 <prvAddNewTaskToReadyList+0xc0>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d008      	beq.n	800b6f2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6e0:	4b07      	ldr	r3, [pc, #28]	; (800b700 <prvAddNewTaskToReadyList+0xbc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d201      	bcs.n	800b6f2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6ee:	f001 f897 	bl	800c820 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	b002      	add	sp, #8
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	46c0      	nop			; (mov r8, r8)
 800b6fc:	20001460 	.word	0x20001460
 800b700:	20000f8c 	.word	0x20000f8c
 800b704:	2000146c 	.word	0x2000146c
 800b708:	2000147c 	.word	0x2000147c
 800b70c:	20001468 	.word	0x20001468
 800b710:	20000f90 	.word	0x20000f90

0800b714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d010      	beq.n	800b748 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b726:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <vTaskDelay+0x48>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <vTaskDelay+0x1e>
 800b72e:	b672      	cpsid	i
 800b730:	e7fe      	b.n	800b730 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b732:	f000 f873 	bl	800b81c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2100      	movs	r1, #0
 800b73a:	0018      	movs	r0, r3
 800b73c:	f000 fc82 	bl	800c044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b740:	f000 f878 	bl	800b834 <xTaskResumeAll>
 800b744:	0003      	movs	r3, r0
 800b746:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800b74e:	f001 f867 	bl	800c820 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b752:	46c0      	nop			; (mov r8, r8)
 800b754:	46bd      	mov	sp, r7
 800b756:	b004      	add	sp, #16
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	20001488 	.word	0x20001488

0800b760 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b089      	sub	sp, #36	; 0x24
 800b764:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b76e:	003a      	movs	r2, r7
 800b770:	1d39      	adds	r1, r7, #4
 800b772:	2308      	movs	r3, #8
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	0018      	movs	r0, r3
 800b778:	f7ff f92e 	bl	800a9d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b77c:	683c      	ldr	r4, [r7, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	491e      	ldr	r1, [pc, #120]	; (800b7fc <vTaskStartScheduler+0x9c>)
 800b784:	481e      	ldr	r0, [pc, #120]	; (800b800 <vTaskStartScheduler+0xa0>)
 800b786:	9202      	str	r2, [sp, #8]
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	2300      	movs	r3, #0
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	2300      	movs	r3, #0
 800b790:	0022      	movs	r2, r4
 800b792:	f7ff fe26 	bl	800b3e2 <xTaskCreateStatic>
 800b796:	0002      	movs	r2, r0
 800b798:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <vTaskStartScheduler+0xa4>)
 800b79a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b79c:	4b19      	ldr	r3, [pc, #100]	; (800b804 <vTaskStartScheduler+0xa4>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	e001      	b.n	800b7ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d103      	bne.n	800b7bc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800b7b4:	f000 fc9a 	bl	800c0ec <xTimerCreateTimerTask>
 800b7b8:	0003      	movs	r3, r0
 800b7ba:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d113      	bne.n	800b7ea <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b7c2:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7c4:	4b10      	ldr	r3, [pc, #64]	; (800b808 <vTaskStartScheduler+0xa8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	3354      	adds	r3, #84	; 0x54
 800b7ca:	001a      	movs	r2, r3
 800b7cc:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <vTaskStartScheduler+0xac>)
 800b7ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <vTaskStartScheduler+0xb0>)
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	4252      	negs	r2, r2
 800b7d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7d8:	4b0e      	ldr	r3, [pc, #56]	; (800b814 <vTaskStartScheduler+0xb4>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7de:	4b0e      	ldr	r3, [pc, #56]	; (800b818 <vTaskStartScheduler+0xb8>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7e4:	f000 fff8 	bl	800c7d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7e8:	e004      	b.n	800b7f4 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	d101      	bne.n	800b7f4 <vTaskStartScheduler+0x94>
 800b7f0:	b672      	cpsid	i
 800b7f2:	e7fe      	b.n	800b7f2 <vTaskStartScheduler+0x92>
}
 800b7f4:	46c0      	nop			; (mov r8, r8)
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	b005      	add	sp, #20
 800b7fa:	bd90      	pop	{r4, r7, pc}
 800b7fc:	0800d9d4 	.word	0x0800d9d4
 800b800:	0800bdb9 	.word	0x0800bdb9
 800b804:	20001484 	.word	0x20001484
 800b808:	20000f8c 	.word	0x20000f8c
 800b80c:	20000188 	.word	0x20000188
 800b810:	20001480 	.word	0x20001480
 800b814:	2000146c 	.word	0x2000146c
 800b818:	20001464 	.word	0x20001464

0800b81c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b820:	4b03      	ldr	r3, [pc, #12]	; (800b830 <vTaskSuspendAll+0x14>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	4b02      	ldr	r3, [pc, #8]	; (800b830 <vTaskSuspendAll+0x14>)
 800b828:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b82a:	46c0      	nop			; (mov r8, r8)
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	20001488 	.word	0x20001488

0800b834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b83e:	2300      	movs	r3, #0
 800b840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b842:	4b3a      	ldr	r3, [pc, #232]	; (800b92c <xTaskResumeAll+0xf8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <xTaskResumeAll+0x1a>
 800b84a:	b672      	cpsid	i
 800b84c:	e7fe      	b.n	800b84c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b84e:	f000 fff7 	bl	800c840 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b852:	4b36      	ldr	r3, [pc, #216]	; (800b92c <xTaskResumeAll+0xf8>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	1e5a      	subs	r2, r3, #1
 800b858:	4b34      	ldr	r3, [pc, #208]	; (800b92c <xTaskResumeAll+0xf8>)
 800b85a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b85c:	4b33      	ldr	r3, [pc, #204]	; (800b92c <xTaskResumeAll+0xf8>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d15b      	bne.n	800b91c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b864:	4b32      	ldr	r3, [pc, #200]	; (800b930 <xTaskResumeAll+0xfc>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d057      	beq.n	800b91c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b86c:	e02f      	b.n	800b8ce <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86e:	4b31      	ldr	r3, [pc, #196]	; (800b934 <xTaskResumeAll+0x100>)
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	3318      	adds	r3, #24
 800b87a:	0018      	movs	r0, r3
 800b87c:	f7ff f95d 	bl	800ab3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3304      	adds	r3, #4
 800b884:	0018      	movs	r0, r3
 800b886:	f7ff f958 	bl	800ab3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88e:	4b2a      	ldr	r3, [pc, #168]	; (800b938 <xTaskResumeAll+0x104>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d903      	bls.n	800b89e <xTaskResumeAll+0x6a>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89a:	4b27      	ldr	r3, [pc, #156]	; (800b938 <xTaskResumeAll+0x104>)
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a2:	0013      	movs	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	189b      	adds	r3, r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4a24      	ldr	r2, [pc, #144]	; (800b93c <xTaskResumeAll+0x108>)
 800b8ac:	189a      	adds	r2, r3, r2
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	0019      	movs	r1, r3
 800b8b4:	0010      	movs	r0, r2
 800b8b6:	f7ff f8e8 	bl	800aa8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8be:	4b20      	ldr	r3, [pc, #128]	; (800b940 <xTaskResumeAll+0x10c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d302      	bcc.n	800b8ce <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800b8c8:	4b1e      	ldr	r3, [pc, #120]	; (800b944 <xTaskResumeAll+0x110>)
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8ce:	4b19      	ldr	r3, [pc, #100]	; (800b934 <xTaskResumeAll+0x100>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1cb      	bne.n	800b86e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8dc:	f000 fb1c 	bl	800bf18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8e0:	4b19      	ldr	r3, [pc, #100]	; (800b948 <xTaskResumeAll+0x114>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00f      	beq.n	800b90c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8ec:	f000 f83c 	bl	800b968 <xTaskIncrementTick>
 800b8f0:	1e03      	subs	r3, r0, #0
 800b8f2:	d002      	beq.n	800b8fa <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800b8f4:	4b13      	ldr	r3, [pc, #76]	; (800b944 <xTaskResumeAll+0x110>)
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1f2      	bne.n	800b8ec <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800b906:	4b10      	ldr	r3, [pc, #64]	; (800b948 <xTaskResumeAll+0x114>)
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b90c:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <xTaskResumeAll+0x110>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b918:	f000 ff82 	bl	800c820 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b91c:	f000 ffa2 	bl	800c864 <vPortExitCritical>

	return xAlreadyYielded;
 800b920:	68bb      	ldr	r3, [r7, #8]
}
 800b922:	0018      	movs	r0, r3
 800b924:	46bd      	mov	sp, r7
 800b926:	b004      	add	sp, #16
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	46c0      	nop			; (mov r8, r8)
 800b92c:	20001488 	.word	0x20001488
 800b930:	20001460 	.word	0x20001460
 800b934:	20001420 	.word	0x20001420
 800b938:	20001468 	.word	0x20001468
 800b93c:	20000f90 	.word	0x20000f90
 800b940:	20000f8c 	.word	0x20000f8c
 800b944:	20001474 	.word	0x20001474
 800b948:	20001470 	.word	0x20001470

0800b94c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b952:	4b04      	ldr	r3, [pc, #16]	; (800b964 <xTaskGetTickCount+0x18>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b958:	687b      	ldr	r3, [r7, #4]
}
 800b95a:	0018      	movs	r0, r3
 800b95c:	46bd      	mov	sp, r7
 800b95e:	b002      	add	sp, #8
 800b960:	bd80      	pop	{r7, pc}
 800b962:	46c0      	nop			; (mov r8, r8)
 800b964:	20001464 	.word	0x20001464

0800b968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b96e:	2300      	movs	r3, #0
 800b970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b972:	4b4a      	ldr	r3, [pc, #296]	; (800ba9c <xTaskIncrementTick+0x134>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d000      	beq.n	800b97c <xTaskIncrementTick+0x14>
 800b97a:	e084      	b.n	800ba86 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b97c:	4b48      	ldr	r3, [pc, #288]	; (800baa0 <xTaskIncrementTick+0x138>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b984:	4b46      	ldr	r3, [pc, #280]	; (800baa0 <xTaskIncrementTick+0x138>)
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d117      	bne.n	800b9c0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800b990:	4b44      	ldr	r3, [pc, #272]	; (800baa4 <xTaskIncrementTick+0x13c>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <xTaskIncrementTick+0x36>
 800b99a:	b672      	cpsid	i
 800b99c:	e7fe      	b.n	800b99c <xTaskIncrementTick+0x34>
 800b99e:	4b41      	ldr	r3, [pc, #260]	; (800baa4 <xTaskIncrementTick+0x13c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	4b40      	ldr	r3, [pc, #256]	; (800baa8 <xTaskIncrementTick+0x140>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	4b3e      	ldr	r3, [pc, #248]	; (800baa4 <xTaskIncrementTick+0x13c>)
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	4b3e      	ldr	r3, [pc, #248]	; (800baa8 <xTaskIncrementTick+0x140>)
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	4b3e      	ldr	r3, [pc, #248]	; (800baac <xTaskIncrementTick+0x144>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	1c5a      	adds	r2, r3, #1
 800b9b8:	4b3c      	ldr	r3, [pc, #240]	; (800baac <xTaskIncrementTick+0x144>)
 800b9ba:	601a      	str	r2, [r3, #0]
 800b9bc:	f000 faac 	bl	800bf18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9c0:	4b3b      	ldr	r3, [pc, #236]	; (800bab0 <xTaskIncrementTick+0x148>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d349      	bcc.n	800ba5e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ca:	4b36      	ldr	r3, [pc, #216]	; (800baa4 <xTaskIncrementTick+0x13c>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d104      	bne.n	800b9de <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d4:	4b36      	ldr	r3, [pc, #216]	; (800bab0 <xTaskIncrementTick+0x148>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	4252      	negs	r2, r2
 800b9da:	601a      	str	r2, [r3, #0]
					break;
 800b9dc:	e03f      	b.n	800ba5e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9de:	4b31      	ldr	r3, [pc, #196]	; (800baa4 <xTaskIncrementTick+0x13c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d203      	bcs.n	800b9fe <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9f6:	4b2e      	ldr	r3, [pc, #184]	; (800bab0 <xTaskIncrementTick+0x148>)
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9fc:	e02f      	b.n	800ba5e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	3304      	adds	r3, #4
 800ba02:	0018      	movs	r0, r3
 800ba04:	f7ff f899 	bl	800ab3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	3318      	adds	r3, #24
 800ba14:	0018      	movs	r0, r3
 800ba16:	f7ff f890 	bl	800ab3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1e:	4b25      	ldr	r3, [pc, #148]	; (800bab4 <xTaskIncrementTick+0x14c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d903      	bls.n	800ba2e <xTaskIncrementTick+0xc6>
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2a:	4b22      	ldr	r3, [pc, #136]	; (800bab4 <xTaskIncrementTick+0x14c>)
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba32:	0013      	movs	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	189b      	adds	r3, r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4a1f      	ldr	r2, [pc, #124]	; (800bab8 <xTaskIncrementTick+0x150>)
 800ba3c:	189a      	adds	r2, r3, r2
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	3304      	adds	r3, #4
 800ba42:	0019      	movs	r1, r3
 800ba44:	0010      	movs	r0, r2
 800ba46:	f7ff f820 	bl	800aa8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	4b1b      	ldr	r3, [pc, #108]	; (800babc <xTaskIncrementTick+0x154>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d3b8      	bcc.n	800b9ca <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba5c:	e7b5      	b.n	800b9ca <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba5e:	4b17      	ldr	r3, [pc, #92]	; (800babc <xTaskIncrementTick+0x154>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	4914      	ldr	r1, [pc, #80]	; (800bab8 <xTaskIncrementTick+0x150>)
 800ba66:	0013      	movs	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	189b      	adds	r3, r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	585b      	ldr	r3, [r3, r1]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d901      	bls.n	800ba78 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba78:	4b11      	ldr	r3, [pc, #68]	; (800bac0 <xTaskIncrementTick+0x158>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d007      	beq.n	800ba90 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800ba80:	2301      	movs	r3, #1
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e004      	b.n	800ba90 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba86:	4b0f      	ldr	r3, [pc, #60]	; (800bac4 <xTaskIncrementTick+0x15c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <xTaskIncrementTick+0x15c>)
 800ba8e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba90:	697b      	ldr	r3, [r7, #20]
}
 800ba92:	0018      	movs	r0, r3
 800ba94:	46bd      	mov	sp, r7
 800ba96:	b006      	add	sp, #24
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	20001488 	.word	0x20001488
 800baa0:	20001464 	.word	0x20001464
 800baa4:	20001418 	.word	0x20001418
 800baa8:	2000141c 	.word	0x2000141c
 800baac:	20001478 	.word	0x20001478
 800bab0:	20001480 	.word	0x20001480
 800bab4:	20001468 	.word	0x20001468
 800bab8:	20000f90 	.word	0x20000f90
 800babc:	20000f8c 	.word	0x20000f8c
 800bac0:	20001474 	.word	0x20001474
 800bac4:	20001470 	.word	0x20001470

0800bac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bace:	4b2d      	ldr	r3, [pc, #180]	; (800bb84 <vTaskSwitchContext+0xbc>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bad6:	4b2c      	ldr	r3, [pc, #176]	; (800bb88 <vTaskSwitchContext+0xc0>)
 800bad8:	2201      	movs	r2, #1
 800bada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800badc:	e04e      	b.n	800bb7c <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 800bade:	4b2a      	ldr	r3, [pc, #168]	; (800bb88 <vTaskSwitchContext+0xc0>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bae4:	4b29      	ldr	r3, [pc, #164]	; (800bb8c <vTaskSwitchContext+0xc4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	4b28      	ldr	r3, [pc, #160]	; (800bb8c <vTaskSwitchContext+0xc4>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d808      	bhi.n	800bb06 <vTaskSwitchContext+0x3e>
 800baf4:	4b25      	ldr	r3, [pc, #148]	; (800bb8c <vTaskSwitchContext+0xc4>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	4b24      	ldr	r3, [pc, #144]	; (800bb8c <vTaskSwitchContext+0xc4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3334      	adds	r3, #52	; 0x34
 800bafe:	0019      	movs	r1, r3
 800bb00:	0010      	movs	r0, r2
 800bb02:	f7f4 fd8d 	bl	8000620 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb06:	4b22      	ldr	r3, [pc, #136]	; (800bb90 <vTaskSwitchContext+0xc8>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	607b      	str	r3, [r7, #4]
 800bb0c:	e007      	b.n	800bb1e <vTaskSwitchContext+0x56>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d101      	bne.n	800bb18 <vTaskSwitchContext+0x50>
 800bb14:	b672      	cpsid	i
 800bb16:	e7fe      	b.n	800bb16 <vTaskSwitchContext+0x4e>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	607b      	str	r3, [r7, #4]
 800bb1e:	491d      	ldr	r1, [pc, #116]	; (800bb94 <vTaskSwitchContext+0xcc>)
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	0013      	movs	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	189b      	adds	r3, r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	585b      	ldr	r3, [r3, r1]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0ee      	beq.n	800bb0e <vTaskSwitchContext+0x46>
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	0013      	movs	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	189b      	adds	r3, r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4a16      	ldr	r2, [pc, #88]	; (800bb94 <vTaskSwitchContext+0xcc>)
 800bb3c:	189b      	adds	r3, r3, r2
 800bb3e:	603b      	str	r3, [r7, #0]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	685a      	ldr	r2, [r3, #4]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	605a      	str	r2, [r3, #4]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	3308      	adds	r3, #8
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d104      	bne.n	800bb60 <vTaskSwitchContext+0x98>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	605a      	str	r2, [r3, #4]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	68da      	ldr	r2, [r3, #12]
 800bb66:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <vTaskSwitchContext+0xc4>)
 800bb68:	601a      	str	r2, [r3, #0]
 800bb6a:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <vTaskSwitchContext+0xc8>)
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb70:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <vTaskSwitchContext+0xc4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3354      	adds	r3, #84	; 0x54
 800bb76:	001a      	movs	r2, r3
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <vTaskSwitchContext+0xd0>)
 800bb7a:	601a      	str	r2, [r3, #0]
}
 800bb7c:	46c0      	nop			; (mov r8, r8)
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	b002      	add	sp, #8
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20001488 	.word	0x20001488
 800bb88:	20001474 	.word	0x20001474
 800bb8c:	20000f8c 	.word	0x20000f8c
 800bb90:	20001468 	.word	0x20001468
 800bb94:	20000f90 	.word	0x20000f90
 800bb98:	20000188 	.word	0x20000188

0800bb9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <vTaskPlaceOnEventList+0x14>
 800bbac:	b672      	cpsid	i
 800bbae:	e7fe      	b.n	800bbae <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbb0:	4b08      	ldr	r3, [pc, #32]	; (800bbd4 <vTaskPlaceOnEventList+0x38>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3318      	adds	r3, #24
 800bbb6:	001a      	movs	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	0011      	movs	r1, r2
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f7fe ff86 	bl	800aace <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	f000 fa3c 	bl	800c044 <prvAddCurrentTaskToDelayedList>
}
 800bbcc:	46c0      	nop			; (mov r8, r8)
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	b002      	add	sp, #8
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20000f8c 	.word	0x20000f8c

0800bbd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <vTaskPlaceOnEventListRestricted+0x16>
 800bbea:	b672      	cpsid	i
 800bbec:	e7fe      	b.n	800bbec <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbee:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <vTaskPlaceOnEventListRestricted+0x48>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3318      	adds	r3, #24
 800bbf4:	001a      	movs	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	0011      	movs	r1, r2
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f7fe ff45 	bl	800aa8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800bc06:	2301      	movs	r3, #1
 800bc08:	425b      	negs	r3, r3
 800bc0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	0011      	movs	r1, r2
 800bc12:	0018      	movs	r0, r3
 800bc14:	f000 fa16 	bl	800c044 <prvAddCurrentTaskToDelayedList>
	}
 800bc18:	46c0      	nop			; (mov r8, r8)
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	b004      	add	sp, #16
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20000f8c 	.word	0x20000f8c

0800bc24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <xTaskRemoveFromEventList+0x1a>
 800bc3a:	b672      	cpsid	i
 800bc3c:	e7fe      	b.n	800bc3c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	3318      	adds	r3, #24
 800bc42:	0018      	movs	r0, r3
 800bc44:	f7fe ff79 	bl	800ab3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc48:	4b1e      	ldr	r3, [pc, #120]	; (800bcc4 <xTaskRemoveFromEventList+0xa0>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d11d      	bne.n	800bc8c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	3304      	adds	r3, #4
 800bc54:	0018      	movs	r0, r3
 800bc56:	f7fe ff70 	bl	800ab3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5e:	4b1a      	ldr	r3, [pc, #104]	; (800bcc8 <xTaskRemoveFromEventList+0xa4>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d903      	bls.n	800bc6e <xTaskRemoveFromEventList+0x4a>
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6a:	4b17      	ldr	r3, [pc, #92]	; (800bcc8 <xTaskRemoveFromEventList+0xa4>)
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc72:	0013      	movs	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	189b      	adds	r3, r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4a14      	ldr	r2, [pc, #80]	; (800bccc <xTaskRemoveFromEventList+0xa8>)
 800bc7c:	189a      	adds	r2, r3, r2
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	3304      	adds	r3, #4
 800bc82:	0019      	movs	r1, r3
 800bc84:	0010      	movs	r0, r2
 800bc86:	f7fe ff00 	bl	800aa8a <vListInsertEnd>
 800bc8a:	e007      	b.n	800bc9c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	3318      	adds	r3, #24
 800bc90:	001a      	movs	r2, r3
 800bc92:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <xTaskRemoveFromEventList+0xac>)
 800bc94:	0011      	movs	r1, r2
 800bc96:	0018      	movs	r0, r3
 800bc98:	f7fe fef7 	bl	800aa8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca0:	4b0c      	ldr	r3, [pc, #48]	; (800bcd4 <xTaskRemoveFromEventList+0xb0>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d905      	bls.n	800bcb6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bcae:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <xTaskRemoveFromEventList+0xb4>)
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	e001      	b.n	800bcba <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800bcba:	68fb      	ldr	r3, [r7, #12]
}
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	b004      	add	sp, #16
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	20001488 	.word	0x20001488
 800bcc8:	20001468 	.word	0x20001468
 800bccc:	20000f90 	.word	0x20000f90
 800bcd0:	20001420 	.word	0x20001420
 800bcd4:	20000f8c 	.word	0x20000f8c
 800bcd8:	20001474 	.word	0x20001474

0800bcdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <vTaskInternalSetTimeOutState+0x20>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcec:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <vTaskInternalSetTimeOutState+0x24>)
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	605a      	str	r2, [r3, #4]
}
 800bcf4:	46c0      	nop			; (mov r8, r8)
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	b002      	add	sp, #8
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	20001478 	.word	0x20001478
 800bd00:	20001464 	.word	0x20001464

0800bd04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d101      	bne.n	800bd18 <xTaskCheckForTimeOut+0x14>
 800bd14:	b672      	cpsid	i
 800bd16:	e7fe      	b.n	800bd16 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d101      	bne.n	800bd22 <xTaskCheckForTimeOut+0x1e>
 800bd1e:	b672      	cpsid	i
 800bd20:	e7fe      	b.n	800bd20 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800bd22:	f000 fd8d 	bl	800c840 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd26:	4b1d      	ldr	r3, [pc, #116]	; (800bd9c <xTaskCheckForTimeOut+0x98>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	d102      	bne.n	800bd44 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	617b      	str	r3, [r7, #20]
 800bd42:	e024      	b.n	800bd8e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <xTaskCheckForTimeOut+0x9c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d007      	beq.n	800bd60 <xTaskCheckForTimeOut+0x5c>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d302      	bcc.n	800bd60 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	617b      	str	r3, [r7, #20]
 800bd5e:	e016      	b.n	800bd8e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d20c      	bcs.n	800bd84 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	1ad2      	subs	r2, r2, r3
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f7ff ffaf 	bl	800bcdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	617b      	str	r3, [r7, #20]
 800bd82:	e004      	b.n	800bd8e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	2200      	movs	r2, #0
 800bd88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800bd8e:	f000 fd69 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800bd92:	697b      	ldr	r3, [r7, #20]
}
 800bd94:	0018      	movs	r0, r3
 800bd96:	46bd      	mov	sp, r7
 800bd98:	b006      	add	sp, #24
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	20001464 	.word	0x20001464
 800bda0:	20001478 	.word	0x20001478

0800bda4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bda8:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <vTaskMissedYield+0x10>)
 800bdaa:	2201      	movs	r2, #1
 800bdac:	601a      	str	r2, [r3, #0]
}
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20001474 	.word	0x20001474

0800bdb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdc0:	f000 f84e 	bl	800be60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdc4:	4b03      	ldr	r3, [pc, #12]	; (800bdd4 <prvIdleTask+0x1c>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d9f9      	bls.n	800bdc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdcc:	f000 fd28 	bl	800c820 <vPortYield>
		prvCheckTasksWaitingTermination();
 800bdd0:	e7f6      	b.n	800bdc0 <prvIdleTask+0x8>
 800bdd2:	46c0      	nop			; (mov r8, r8)
 800bdd4:	20000f90 	.word	0x20000f90

0800bdd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdde:	2300      	movs	r3, #0
 800bde0:	607b      	str	r3, [r7, #4]
 800bde2:	e00c      	b.n	800bdfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	0013      	movs	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	189b      	adds	r3, r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4a14      	ldr	r2, [pc, #80]	; (800be40 <prvInitialiseTaskLists+0x68>)
 800bdf0:	189b      	adds	r3, r3, r2
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	f7fe fe20 	bl	800aa38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	607b      	str	r3, [r7, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b37      	cmp	r3, #55	; 0x37
 800be02:	d9ef      	bls.n	800bde4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <prvInitialiseTaskLists+0x6c>)
 800be06:	0018      	movs	r0, r3
 800be08:	f7fe fe16 	bl	800aa38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be0c:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <prvInitialiseTaskLists+0x70>)
 800be0e:	0018      	movs	r0, r3
 800be10:	f7fe fe12 	bl	800aa38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be14:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <prvInitialiseTaskLists+0x74>)
 800be16:	0018      	movs	r0, r3
 800be18:	f7fe fe0e 	bl	800aa38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be1c:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <prvInitialiseTaskLists+0x78>)
 800be1e:	0018      	movs	r0, r3
 800be20:	f7fe fe0a 	bl	800aa38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be24:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <prvInitialiseTaskLists+0x7c>)
 800be26:	0018      	movs	r0, r3
 800be28:	f7fe fe06 	bl	800aa38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <prvInitialiseTaskLists+0x80>)
 800be2e:	4a05      	ldr	r2, [pc, #20]	; (800be44 <prvInitialiseTaskLists+0x6c>)
 800be30:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be32:	4b0a      	ldr	r3, [pc, #40]	; (800be5c <prvInitialiseTaskLists+0x84>)
 800be34:	4a04      	ldr	r2, [pc, #16]	; (800be48 <prvInitialiseTaskLists+0x70>)
 800be36:	601a      	str	r2, [r3, #0]
}
 800be38:	46c0      	nop			; (mov r8, r8)
 800be3a:	46bd      	mov	sp, r7
 800be3c:	b002      	add	sp, #8
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20000f90 	.word	0x20000f90
 800be44:	200013f0 	.word	0x200013f0
 800be48:	20001404 	.word	0x20001404
 800be4c:	20001420 	.word	0x20001420
 800be50:	20001434 	.word	0x20001434
 800be54:	2000144c 	.word	0x2000144c
 800be58:	20001418 	.word	0x20001418
 800be5c:	2000141c 	.word	0x2000141c

0800be60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be66:	e01a      	b.n	800be9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800be68:	f000 fcea 	bl	800c840 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be6c:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <prvCheckTasksWaitingTermination+0x50>)
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3304      	adds	r3, #4
 800be78:	0018      	movs	r0, r3
 800be7a:	f7fe fe5e 	bl	800ab3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be7e:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <prvCheckTasksWaitingTermination+0x54>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	1e5a      	subs	r2, r3, #1
 800be84:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <prvCheckTasksWaitingTermination+0x54>)
 800be86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be88:	4b0b      	ldr	r3, [pc, #44]	; (800beb8 <prvCheckTasksWaitingTermination+0x58>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	1e5a      	subs	r2, r3, #1
 800be8e:	4b0a      	ldr	r3, [pc, #40]	; (800beb8 <prvCheckTasksWaitingTermination+0x58>)
 800be90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800be92:	f000 fce7 	bl	800c864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	0018      	movs	r0, r3
 800be9a:	f000 f80f 	bl	800bebc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be9e:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <prvCheckTasksWaitingTermination+0x58>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1e0      	bne.n	800be68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bea6:	46c0      	nop			; (mov r8, r8)
 800bea8:	46c0      	nop			; (mov r8, r8)
 800beaa:	46bd      	mov	sp, r7
 800beac:	b002      	add	sp, #8
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20001434 	.word	0x20001434
 800beb4:	20001460 	.word	0x20001460
 800beb8:	20001448 	.word	0x20001448

0800bebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3354      	adds	r3, #84	; 0x54
 800bec8:	0018      	movs	r0, r3
 800beca:	f001 fcf3 	bl	800d8b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	22b9      	movs	r2, #185	; 0xb9
 800bed2:	5c9b      	ldrb	r3, [r3, r2]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d109      	bne.n	800beec <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bedc:	0018      	movs	r0, r3
 800bede:	f000 fdf3 	bl	800cac8 <vPortFree>
				vPortFree( pxTCB );
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	0018      	movs	r0, r3
 800bee6:	f000 fdef 	bl	800cac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800beea:	e010      	b.n	800bf0e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	22b9      	movs	r2, #185	; 0xb9
 800bef0:	5c9b      	ldrb	r3, [r3, r2]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d104      	bne.n	800bf00 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	0018      	movs	r0, r3
 800befa:	f000 fde5 	bl	800cac8 <vPortFree>
	}
 800befe:	e006      	b.n	800bf0e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	22b9      	movs	r2, #185	; 0xb9
 800bf04:	5c9b      	ldrb	r3, [r3, r2]
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d001      	beq.n	800bf0e <prvDeleteTCB+0x52>
 800bf0a:	b672      	cpsid	i
 800bf0c:	e7fe      	b.n	800bf0c <prvDeleteTCB+0x50>
	}
 800bf0e:	46c0      	nop			; (mov r8, r8)
 800bf10:	46bd      	mov	sp, r7
 800bf12:	b002      	add	sp, #8
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <prvResetNextTaskUnblockTime+0x34>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d104      	bne.n	800bf32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf28:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <prvResetNextTaskUnblockTime+0x38>)
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4252      	negs	r2, r2
 800bf2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf30:	e008      	b.n	800bf44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf32:	4b06      	ldr	r3, [pc, #24]	; (800bf4c <prvResetNextTaskUnblockTime+0x34>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	4b03      	ldr	r3, [pc, #12]	; (800bf50 <prvResetNextTaskUnblockTime+0x38>)
 800bf42:	601a      	str	r2, [r3, #0]
}
 800bf44:	46c0      	nop			; (mov r8, r8)
 800bf46:	46bd      	mov	sp, r7
 800bf48:	b002      	add	sp, #8
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20001418 	.word	0x20001418
 800bf50:	20001480 	.word	0x20001480

0800bf54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf5a:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <xTaskGetSchedulerState+0x30>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d102      	bne.n	800bf68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf62:	2301      	movs	r3, #1
 800bf64:	607b      	str	r3, [r7, #4]
 800bf66:	e008      	b.n	800bf7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf68:	4b07      	ldr	r3, [pc, #28]	; (800bf88 <xTaskGetSchedulerState+0x34>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf70:	2302      	movs	r3, #2
 800bf72:	607b      	str	r3, [r7, #4]
 800bf74:	e001      	b.n	800bf7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf76:	2300      	movs	r3, #0
 800bf78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf7a:	687b      	ldr	r3, [r7, #4]
	}
 800bf7c:	0018      	movs	r0, r3
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	b002      	add	sp, #8
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	2000146c 	.word	0x2000146c
 800bf88:	20001488 	.word	0x20001488

0800bf8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d044      	beq.n	800c02c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfa2:	4b25      	ldr	r3, [pc, #148]	; (800c038 <xTaskPriorityDisinherit+0xac>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d001      	beq.n	800bfb0 <xTaskPriorityDisinherit+0x24>
 800bfac:	b672      	cpsid	i
 800bfae:	e7fe      	b.n	800bfae <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d101      	bne.n	800bfbc <xTaskPriorityDisinherit+0x30>
 800bfb8:	b672      	cpsid	i
 800bfba:	e7fe      	b.n	800bfba <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc0:	1e5a      	subs	r2, r3, #1
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d02c      	beq.n	800c02c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d128      	bne.n	800c02c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	0018      	movs	r0, r3
 800bfe0:	f7fe fdab 	bl	800ab3a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	2238      	movs	r2, #56	; 0x38
 800bff2:	1ad2      	subs	r2, r2, r3
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffc:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <xTaskPriorityDisinherit+0xb0>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d903      	bls.n	800c00c <xTaskPriorityDisinherit+0x80>
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <xTaskPriorityDisinherit+0xb0>)
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c010:	0013      	movs	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	189b      	adds	r3, r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4a09      	ldr	r2, [pc, #36]	; (800c040 <xTaskPriorityDisinherit+0xb4>)
 800c01a:	189a      	adds	r2, r3, r2
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	3304      	adds	r3, #4
 800c020:	0019      	movs	r1, r3
 800c022:	0010      	movs	r0, r2
 800c024:	f7fe fd31 	bl	800aa8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c028:	2301      	movs	r3, #1
 800c02a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c02c:	68fb      	ldr	r3, [r7, #12]
	}
 800c02e:	0018      	movs	r0, r3
 800c030:	46bd      	mov	sp, r7
 800c032:	b004      	add	sp, #16
 800c034:	bd80      	pop	{r7, pc}
 800c036:	46c0      	nop			; (mov r8, r8)
 800c038:	20000f8c 	.word	0x20000f8c
 800c03c:	20001468 	.word	0x20001468
 800c040:	20000f90 	.word	0x20000f90

0800c044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c04e:	4b21      	ldr	r3, [pc, #132]	; (800c0d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c054:	4b20      	ldr	r3, [pc, #128]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3304      	adds	r3, #4
 800c05a:	0018      	movs	r0, r3
 800c05c:	f7fe fd6d 	bl	800ab3a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	3301      	adds	r3, #1
 800c064:	d10b      	bne.n	800c07e <prvAddCurrentTaskToDelayedList+0x3a>
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d008      	beq.n	800c07e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c06c:	4b1a      	ldr	r3, [pc, #104]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	1d1a      	adds	r2, r3, #4
 800c072:	4b1a      	ldr	r3, [pc, #104]	; (800c0dc <prvAddCurrentTaskToDelayedList+0x98>)
 800c074:	0011      	movs	r1, r2
 800c076:	0018      	movs	r0, r3
 800c078:	f7fe fd07 	bl	800aa8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c07c:	e026      	b.n	800c0cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	18d3      	adds	r3, r2, r3
 800c084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c086:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	429a      	cmp	r2, r3
 800c094:	d209      	bcs.n	800c0aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c096:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	4b0f      	ldr	r3, [pc, #60]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	0019      	movs	r1, r3
 800c0a2:	0010      	movs	r0, r2
 800c0a4:	f7fe fd13 	bl	800aace <vListInsert>
}
 800c0a8:	e010      	b.n	800c0cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0aa:	4b0e      	ldr	r3, [pc, #56]	; (800c0e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	0019      	movs	r1, r3
 800c0b6:	0010      	movs	r0, r2
 800c0b8:	f7fe fd09 	bl	800aace <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d202      	bcs.n	800c0cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c0c6:	4b08      	ldr	r3, [pc, #32]	; (800c0e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	601a      	str	r2, [r3, #0]
}
 800c0cc:	46c0      	nop			; (mov r8, r8)
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b004      	add	sp, #16
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20001464 	.word	0x20001464
 800c0d8:	20000f8c 	.word	0x20000f8c
 800c0dc:	2000144c 	.word	0x2000144c
 800c0e0:	2000141c 	.word	0x2000141c
 800c0e4:	20001418 	.word	0x20001418
 800c0e8:	20001480 	.word	0x20001480

0800c0ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0ec:	b590      	push	{r4, r7, lr}
 800c0ee:	b089      	sub	sp, #36	; 0x24
 800c0f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0f6:	f000 fac9 	bl	800c68c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0fa:	4b17      	ldr	r3, [pc, #92]	; (800c158 <xTimerCreateTimerTask+0x6c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d020      	beq.n	800c144 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c102:	2300      	movs	r3, #0
 800c104:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c10a:	003a      	movs	r2, r7
 800c10c:	1d39      	adds	r1, r7, #4
 800c10e:	2308      	movs	r3, #8
 800c110:	18fb      	adds	r3, r7, r3
 800c112:	0018      	movs	r0, r3
 800c114:	f7fe fc78 	bl	800aa08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c118:	683c      	ldr	r4, [r7, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	490f      	ldr	r1, [pc, #60]	; (800c15c <xTimerCreateTimerTask+0x70>)
 800c120:	480f      	ldr	r0, [pc, #60]	; (800c160 <xTimerCreateTimerTask+0x74>)
 800c122:	9202      	str	r2, [sp, #8]
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	2302      	movs	r3, #2
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	2300      	movs	r3, #0
 800c12c:	0022      	movs	r2, r4
 800c12e:	f7ff f958 	bl	800b3e2 <xTaskCreateStatic>
 800c132:	0002      	movs	r2, r0
 800c134:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <xTimerCreateTimerTask+0x78>)
 800c136:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <xTimerCreateTimerTask+0x78>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800c140:	2301      	movs	r3, #1
 800c142:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <xTimerCreateTimerTask+0x62>
 800c14a:	b672      	cpsid	i
 800c14c:	e7fe      	b.n	800c14c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800c14e:	68fb      	ldr	r3, [r7, #12]
}
 800c150:	0018      	movs	r0, r3
 800c152:	46bd      	mov	sp, r7
 800c154:	b005      	add	sp, #20
 800c156:	bd90      	pop	{r4, r7, pc}
 800c158:	200014bc 	.word	0x200014bc
 800c15c:	0800d9dc 	.word	0x0800d9dc
 800c160:	0800c285 	.word	0x0800c285
 800c164:	200014c0 	.word	0x200014c0

0800c168 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c168:	b590      	push	{r4, r7, lr}
 800c16a:	b08b      	sub	sp, #44	; 0x2c
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c176:	2300      	movs	r3, #0
 800c178:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <xTimerGenericCommand+0x1c>
 800c180:	b672      	cpsid	i
 800c182:	e7fe      	b.n	800c182 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c184:	4b1c      	ldr	r3, [pc, #112]	; (800c1f8 <xTimerGenericCommand+0x90>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d030      	beq.n	800c1ee <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c18c:	2414      	movs	r4, #20
 800c18e:	193b      	adds	r3, r7, r4
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c194:	193b      	adds	r3, r7, r4
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c19a:	193b      	adds	r3, r7, r4
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b05      	cmp	r3, #5
 800c1a4:	dc19      	bgt.n	800c1da <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1a6:	f7ff fed5 	bl	800bf54 <xTaskGetSchedulerState>
 800c1aa:	0003      	movs	r3, r0
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d109      	bne.n	800c1c4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1b0:	4b11      	ldr	r3, [pc, #68]	; (800c1f8 <xTimerGenericCommand+0x90>)
 800c1b2:	6818      	ldr	r0, [r3, #0]
 800c1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1b6:	1939      	adds	r1, r7, r4
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f7fe fdad 	bl	800ad18 <xQueueGenericSend>
 800c1be:	0003      	movs	r3, r0
 800c1c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c2:	e014      	b.n	800c1ee <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1c4:	4b0c      	ldr	r3, [pc, #48]	; (800c1f8 <xTimerGenericCommand+0x90>)
 800c1c6:	6818      	ldr	r0, [r3, #0]
 800c1c8:	2314      	movs	r3, #20
 800c1ca:	18f9      	adds	r1, r7, r3
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f7fe fda2 	bl	800ad18 <xQueueGenericSend>
 800c1d4:	0003      	movs	r3, r0
 800c1d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1d8:	e009      	b.n	800c1ee <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1da:	4b07      	ldr	r3, [pc, #28]	; (800c1f8 <xTimerGenericCommand+0x90>)
 800c1dc:	6818      	ldr	r0, [r3, #0]
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	2314      	movs	r3, #20
 800c1e2:	18f9      	adds	r1, r7, r3
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f7fe fe5b 	bl	800aea0 <xQueueGenericSendFromISR>
 800c1ea:	0003      	movs	r3, r0
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1f0:	0018      	movs	r0, r3
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	b00b      	add	sp, #44	; 0x2c
 800c1f6:	bd90      	pop	{r4, r7, pc}
 800c1f8:	200014bc 	.word	0x200014bc

0800c1fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af02      	add	r7, sp, #8
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c206:	4b1e      	ldr	r3, [pc, #120]	; (800c280 <prvProcessExpiredTimer+0x84>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3304      	adds	r3, #4
 800c214:	0018      	movs	r0, r3
 800c216:	f7fe fc90 	bl	800ab3a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2228      	movs	r2, #40	; 0x28
 800c21e:	5c9b      	ldrb	r3, [r3, r2]
 800c220:	001a      	movs	r2, r3
 800c222:	2304      	movs	r3, #4
 800c224:	4013      	ands	r3, r2
 800c226:	d019      	beq.n	800c25c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	699a      	ldr	r2, [r3, #24]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	18d1      	adds	r1, r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f000 f8c3 	bl	800c3c0 <prvInsertTimerInActiveList>
 800c23a:	1e03      	subs	r3, r0, #0
 800c23c:	d017      	beq.n	800c26e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	2300      	movs	r3, #0
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	2300      	movs	r3, #0
 800c248:	2100      	movs	r1, #0
 800c24a:	f7ff ff8d 	bl	800c168 <xTimerGenericCommand>
 800c24e:	0003      	movs	r3, r0
 800c250:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <prvProcessExpiredTimer+0x72>
 800c258:	b672      	cpsid	i
 800c25a:	e7fe      	b.n	800c25a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2228      	movs	r2, #40	; 0x28
 800c260:	5c9b      	ldrb	r3, [r3, r2]
 800c262:	2201      	movs	r2, #1
 800c264:	4393      	bics	r3, r2
 800c266:	b2d9      	uxtb	r1, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2228      	movs	r2, #40	; 0x28
 800c26c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	0010      	movs	r0, r2
 800c276:	4798      	blx	r3
}
 800c278:	46c0      	nop			; (mov r8, r8)
 800c27a:	46bd      	mov	sp, r7
 800c27c:	b004      	add	sp, #16
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	200014b4 	.word	0x200014b4

0800c284 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c28c:	2308      	movs	r3, #8
 800c28e:	18fb      	adds	r3, r7, r3
 800c290:	0018      	movs	r0, r3
 800c292:	f000 f853 	bl	800c33c <prvGetNextExpireTime>
 800c296:	0003      	movs	r3, r0
 800c298:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	0011      	movs	r1, r2
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	f000 f803 	bl	800c2ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c2a6:	f000 f8cd 	bl	800c444 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2aa:	e7ef      	b.n	800c28c <prvTimerTask+0x8>

0800c2ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2b6:	f7ff fab1 	bl	800b81c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2ba:	2308      	movs	r3, #8
 800c2bc:	18fb      	adds	r3, r7, r3
 800c2be:	0018      	movs	r0, r3
 800c2c0:	f000 f85e 	bl	800c380 <prvSampleTimeNow>
 800c2c4:	0003      	movs	r3, r0
 800c2c6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d12b      	bne.n	800c326 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10c      	bne.n	800c2ee <prvProcessTimerOrBlockTask+0x42>
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d808      	bhi.n	800c2ee <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800c2dc:	f7ff faaa 	bl	800b834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	0011      	movs	r1, r2
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	f7ff ff88 	bl	800c1fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2ec:	e01d      	b.n	800c32a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d008      	beq.n	800c306 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2f4:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <prvProcessTimerOrBlockTask+0x88>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <prvProcessTimerOrBlockTask+0x56>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e000      	b.n	800c304 <prvProcessTimerOrBlockTask+0x58>
 800c302:	2300      	movs	r3, #0
 800c304:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c306:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <prvProcessTimerOrBlockTask+0x8c>)
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	0019      	movs	r1, r3
 800c314:	f7ff f832 	bl	800b37c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c318:	f7ff fa8c 	bl	800b834 <xTaskResumeAll>
 800c31c:	1e03      	subs	r3, r0, #0
 800c31e:	d104      	bne.n	800c32a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800c320:	f000 fa7e 	bl	800c820 <vPortYield>
}
 800c324:	e001      	b.n	800c32a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800c326:	f7ff fa85 	bl	800b834 <xTaskResumeAll>
}
 800c32a:	46c0      	nop			; (mov r8, r8)
 800c32c:	46bd      	mov	sp, r7
 800c32e:	b004      	add	sp, #16
 800c330:	bd80      	pop	{r7, pc}
 800c332:	46c0      	nop			; (mov r8, r8)
 800c334:	200014b8 	.word	0x200014b8
 800c338:	200014bc 	.word	0x200014bc

0800c33c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c344:	4b0d      	ldr	r3, [pc, #52]	; (800c37c <prvGetNextExpireTime+0x40>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <prvGetNextExpireTime+0x16>
 800c34e:	2201      	movs	r2, #1
 800c350:	e000      	b.n	800c354 <prvGetNextExpireTime+0x18>
 800c352:	2200      	movs	r2, #0
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d105      	bne.n	800c36c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c360:	4b06      	ldr	r3, [pc, #24]	; (800c37c <prvGetNextExpireTime+0x40>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	e001      	b.n	800c370 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c370:	68fb      	ldr	r3, [r7, #12]
}
 800c372:	0018      	movs	r0, r3
 800c374:	46bd      	mov	sp, r7
 800c376:	b004      	add	sp, #16
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	46c0      	nop			; (mov r8, r8)
 800c37c:	200014b4 	.word	0x200014b4

0800c380 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c388:	f7ff fae0 	bl	800b94c <xTaskGetTickCount>
 800c38c:	0003      	movs	r3, r0
 800c38e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800c390:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <prvSampleTimeNow+0x3c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	429a      	cmp	r2, r3
 800c398:	d205      	bcs.n	800c3a6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800c39a:	f000 f919 	bl	800c5d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e002      	b.n	800c3ac <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3ac:	4b03      	ldr	r3, [pc, #12]	; (800c3bc <prvSampleTimeNow+0x3c>)
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
}
 800c3b4:	0018      	movs	r0, r3
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	b004      	add	sp, #16
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	200014c4 	.word	0x200014c4

0800c3c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3de:	68ba      	ldr	r2, [r7, #8]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d812      	bhi.n	800c40c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	1ad2      	subs	r2, r2, r3
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d302      	bcc.n	800c3fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	617b      	str	r3, [r7, #20]
 800c3f8:	e01b      	b.n	800c432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3fa:	4b10      	ldr	r3, [pc, #64]	; (800c43c <prvInsertTimerInActiveList+0x7c>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3304      	adds	r3, #4
 800c402:	0019      	movs	r1, r3
 800c404:	0010      	movs	r0, r2
 800c406:	f7fe fb62 	bl	800aace <vListInsert>
 800c40a:	e012      	b.n	800c432 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d206      	bcs.n	800c422 <prvInsertTimerInActiveList+0x62>
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d302      	bcc.n	800c422 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c41c:	2301      	movs	r3, #1
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	e007      	b.n	800c432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <prvInsertTimerInActiveList+0x80>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3304      	adds	r3, #4
 800c42a:	0019      	movs	r1, r3
 800c42c:	0010      	movs	r0, r2
 800c42e:	f7fe fb4e 	bl	800aace <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c432:	697b      	ldr	r3, [r7, #20]
}
 800c434:	0018      	movs	r0, r3
 800c436:	46bd      	mov	sp, r7
 800c438:	b006      	add	sp, #24
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	200014b8 	.word	0x200014b8
 800c440:	200014b4 	.word	0x200014b4

0800c444 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c444:	b590      	push	{r4, r7, lr}
 800c446:	b08d      	sub	sp, #52	; 0x34
 800c448:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c44a:	e0ac      	b.n	800c5a6 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c44c:	2208      	movs	r2, #8
 800c44e:	18bb      	adds	r3, r7, r2
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	da0f      	bge.n	800c476 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c456:	18bb      	adds	r3, r7, r2
 800c458:	3304      	adds	r3, #4
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <prvProcessReceivedCommands+0x22>
 800c462:	b672      	cpsid	i
 800c464:	e7fe      	b.n	800c464 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	6858      	ldr	r0, [r3, #4]
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	0019      	movs	r1, r3
 800c474:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c476:	2208      	movs	r2, #8
 800c478:	18bb      	adds	r3, r7, r2
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	da00      	bge.n	800c482 <prvProcessReceivedCommands+0x3e>
 800c480:	e090      	b.n	800c5a4 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c482:	18bb      	adds	r3, r7, r2
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c488:	6a3b      	ldr	r3, [r7, #32]
 800c48a:	695b      	ldr	r3, [r3, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d004      	beq.n	800c49a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	3304      	adds	r3, #4
 800c494:	0018      	movs	r0, r3
 800c496:	f7fe fb50 	bl	800ab3a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c49a:	1d3b      	adds	r3, r7, #4
 800c49c:	0018      	movs	r0, r3
 800c49e:	f7ff ff6f 	bl	800c380 <prvSampleTimeNow>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800c4a6:	2308      	movs	r3, #8
 800c4a8:	18fb      	adds	r3, r7, r3
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b09      	cmp	r3, #9
 800c4ae:	d900      	bls.n	800c4b2 <prvProcessReceivedCommands+0x6e>
 800c4b0:	e079      	b.n	800c5a6 <prvProcessReceivedCommands+0x162>
 800c4b2:	009a      	lsls	r2, r3, #2
 800c4b4:	4b44      	ldr	r3, [pc, #272]	; (800c5c8 <prvProcessReceivedCommands+0x184>)
 800c4b6:	18d3      	adds	r3, r2, r3
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4bc:	6a3b      	ldr	r3, [r7, #32]
 800c4be:	2228      	movs	r2, #40	; 0x28
 800c4c0:	5c9b      	ldrb	r3, [r3, r2]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	b2d9      	uxtb	r1, r3
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	2228      	movs	r2, #40	; 0x28
 800c4cc:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4ce:	2408      	movs	r4, #8
 800c4d0:	193b      	adds	r3, r7, r4
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	18d1      	adds	r1, r2, r3
 800c4da:	193b      	adds	r3, r7, r4
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	69fa      	ldr	r2, [r7, #28]
 800c4e0:	6a38      	ldr	r0, [r7, #32]
 800c4e2:	f7ff ff6d 	bl	800c3c0 <prvInsertTimerInActiveList>
 800c4e6:	1e03      	subs	r3, r0, #0
 800c4e8:	d05d      	beq.n	800c5a6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	6a3a      	ldr	r2, [r7, #32]
 800c4f0:	0010      	movs	r0, r2
 800c4f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4f4:	6a3b      	ldr	r3, [r7, #32]
 800c4f6:	2228      	movs	r2, #40	; 0x28
 800c4f8:	5c9b      	ldrb	r3, [r3, r2]
 800c4fa:	001a      	movs	r2, r3
 800c4fc:	2304      	movs	r3, #4
 800c4fe:	4013      	ands	r3, r2
 800c500:	d051      	beq.n	800c5a6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c502:	193b      	adds	r3, r7, r4
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	18d2      	adds	r2, r2, r3
 800c50c:	6a38      	ldr	r0, [r7, #32]
 800c50e:	2300      	movs	r3, #0
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	2300      	movs	r3, #0
 800c514:	2100      	movs	r1, #0
 800c516:	f7ff fe27 	bl	800c168 <xTimerGenericCommand>
 800c51a:	0003      	movs	r3, r0
 800c51c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d140      	bne.n	800c5a6 <prvProcessReceivedCommands+0x162>
 800c524:	b672      	cpsid	i
 800c526:	e7fe      	b.n	800c526 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	2228      	movs	r2, #40	; 0x28
 800c52c:	5c9b      	ldrb	r3, [r3, r2]
 800c52e:	2201      	movs	r2, #1
 800c530:	4393      	bics	r3, r2
 800c532:	b2d9      	uxtb	r1, r3
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	2228      	movs	r2, #40	; 0x28
 800c538:	5499      	strb	r1, [r3, r2]
					break;
 800c53a:	e034      	b.n	800c5a6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	2228      	movs	r2, #40	; 0x28
 800c540:	5c9b      	ldrb	r3, [r3, r2]
 800c542:	2201      	movs	r2, #1
 800c544:	4313      	orrs	r3, r2
 800c546:	b2d9      	uxtb	r1, r3
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	2228      	movs	r2, #40	; 0x28
 800c54c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c54e:	2308      	movs	r3, #8
 800c550:	18fb      	adds	r3, r7, r3
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <prvProcessReceivedCommands+0x120>
 800c560:	b672      	cpsid	i
 800c562:	e7fe      	b.n	800c562 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	699a      	ldr	r2, [r3, #24]
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	18d1      	adds	r1, r2, r3
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	69fa      	ldr	r2, [r7, #28]
 800c570:	6a38      	ldr	r0, [r7, #32]
 800c572:	f7ff ff25 	bl	800c3c0 <prvInsertTimerInActiveList>
					break;
 800c576:	e016      	b.n	800c5a6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	2228      	movs	r2, #40	; 0x28
 800c57c:	5c9b      	ldrb	r3, [r3, r2]
 800c57e:	001a      	movs	r2, r3
 800c580:	2302      	movs	r3, #2
 800c582:	4013      	ands	r3, r2
 800c584:	d104      	bne.n	800c590 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	0018      	movs	r0, r3
 800c58a:	f000 fa9d 	bl	800cac8 <vPortFree>
 800c58e:	e00a      	b.n	800c5a6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c590:	6a3b      	ldr	r3, [r7, #32]
 800c592:	2228      	movs	r2, #40	; 0x28
 800c594:	5c9b      	ldrb	r3, [r3, r2]
 800c596:	2201      	movs	r2, #1
 800c598:	4393      	bics	r3, r2
 800c59a:	b2d9      	uxtb	r1, r3
 800c59c:	6a3b      	ldr	r3, [r7, #32]
 800c59e:	2228      	movs	r2, #40	; 0x28
 800c5a0:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5a2:	e000      	b.n	800c5a6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5a4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5a6:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <prvProcessReceivedCommands+0x188>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	18b9      	adds	r1, r7, r2
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	f7fe fce9 	bl	800af88 <xQueueReceive>
 800c5b6:	1e03      	subs	r3, r0, #0
 800c5b8:	d000      	beq.n	800c5bc <prvProcessReceivedCommands+0x178>
 800c5ba:	e747      	b.n	800c44c <prvProcessReceivedCommands+0x8>
	}
}
 800c5bc:	46c0      	nop			; (mov r8, r8)
 800c5be:	46c0      	nop			; (mov r8, r8)
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	b00b      	add	sp, #44	; 0x2c
 800c5c4:	bd90      	pop	{r4, r7, pc}
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	0800db50 	.word	0x0800db50
 800c5cc:	200014bc 	.word	0x200014bc

0800c5d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5d6:	e041      	b.n	800c65c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5d8:	4b2a      	ldr	r3, [pc, #168]	; (800c684 <prvSwitchTimerLists+0xb4>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e2:	4b28      	ldr	r3, [pc, #160]	; (800c684 <prvSwitchTimerLists+0xb4>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	0018      	movs	r0, r3
 800c5f2:	f7fe faa2 	bl	800ab3a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	0010      	movs	r0, r2
 800c5fe:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2228      	movs	r2, #40	; 0x28
 800c604:	5c9b      	ldrb	r3, [r3, r2]
 800c606:	001a      	movs	r2, r3
 800c608:	2304      	movs	r3, #4
 800c60a:	4013      	ands	r3, r2
 800c60c:	d026      	beq.n	800c65c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	18d3      	adds	r3, r2, r3
 800c616:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d90e      	bls.n	800c63e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c62c:	4b15      	ldr	r3, [pc, #84]	; (800c684 <prvSwitchTimerLists+0xb4>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3304      	adds	r3, #4
 800c634:	0019      	movs	r1, r3
 800c636:	0010      	movs	r0, r2
 800c638:	f7fe fa49 	bl	800aace <vListInsert>
 800c63c:	e00e      	b.n	800c65c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	2300      	movs	r3, #0
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	2300      	movs	r3, #0
 800c648:	2100      	movs	r1, #0
 800c64a:	f7ff fd8d 	bl	800c168 <xTimerGenericCommand>
 800c64e:	0003      	movs	r3, r0
 800c650:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <prvSwitchTimerLists+0x8c>
 800c658:	b672      	cpsid	i
 800c65a:	e7fe      	b.n	800c65a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c65c:	4b09      	ldr	r3, [pc, #36]	; (800c684 <prvSwitchTimerLists+0xb4>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1b8      	bne.n	800c5d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c666:	4b07      	ldr	r3, [pc, #28]	; (800c684 <prvSwitchTimerLists+0xb4>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c66c:	4b06      	ldr	r3, [pc, #24]	; (800c688 <prvSwitchTimerLists+0xb8>)
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	4b04      	ldr	r3, [pc, #16]	; (800c684 <prvSwitchTimerLists+0xb4>)
 800c672:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800c674:	4b04      	ldr	r3, [pc, #16]	; (800c688 <prvSwitchTimerLists+0xb8>)
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	601a      	str	r2, [r3, #0]
}
 800c67a:	46c0      	nop			; (mov r8, r8)
 800c67c:	46bd      	mov	sp, r7
 800c67e:	b006      	add	sp, #24
 800c680:	bd80      	pop	{r7, pc}
 800c682:	46c0      	nop			; (mov r8, r8)
 800c684:	200014b4 	.word	0x200014b4
 800c688:	200014b8 	.word	0x200014b8

0800c68c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c692:	f000 f8d5 	bl	800c840 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c696:	4b16      	ldr	r3, [pc, #88]	; (800c6f0 <prvCheckForValidListAndQueue+0x64>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d123      	bne.n	800c6e6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800c69e:	4b15      	ldr	r3, [pc, #84]	; (800c6f4 <prvCheckForValidListAndQueue+0x68>)
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	f7fe f9c9 	bl	800aa38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6a6:	4b14      	ldr	r3, [pc, #80]	; (800c6f8 <prvCheckForValidListAndQueue+0x6c>)
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	f7fe f9c5 	bl	800aa38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <prvCheckForValidListAndQueue+0x70>)
 800c6b0:	4a10      	ldr	r2, [pc, #64]	; (800c6f4 <prvCheckForValidListAndQueue+0x68>)
 800c6b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6b4:	4b12      	ldr	r3, [pc, #72]	; (800c700 <prvCheckForValidListAndQueue+0x74>)
 800c6b6:	4a10      	ldr	r2, [pc, #64]	; (800c6f8 <prvCheckForValidListAndQueue+0x6c>)
 800c6b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6ba:	4b12      	ldr	r3, [pc, #72]	; (800c704 <prvCheckForValidListAndQueue+0x78>)
 800c6bc:	4a12      	ldr	r2, [pc, #72]	; (800c708 <prvCheckForValidListAndQueue+0x7c>)
 800c6be:	2100      	movs	r1, #0
 800c6c0:	9100      	str	r1, [sp, #0]
 800c6c2:	2110      	movs	r1, #16
 800c6c4:	200a      	movs	r0, #10
 800c6c6:	f7fe fab4 	bl	800ac32 <xQueueGenericCreateStatic>
 800c6ca:	0002      	movs	r2, r0
 800c6cc:	4b08      	ldr	r3, [pc, #32]	; (800c6f0 <prvCheckForValidListAndQueue+0x64>)
 800c6ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6d0:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <prvCheckForValidListAndQueue+0x64>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d006      	beq.n	800c6e6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6d8:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <prvCheckForValidListAndQueue+0x64>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <prvCheckForValidListAndQueue+0x80>)
 800c6de:	0011      	movs	r1, r2
 800c6e0:	0018      	movs	r0, r3
 800c6e2:	f7fe fe23 	bl	800b32c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6e6:	f000 f8bd 	bl	800c864 <vPortExitCritical>
}
 800c6ea:	46c0      	nop			; (mov r8, r8)
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	200014bc 	.word	0x200014bc
 800c6f4:	2000148c 	.word	0x2000148c
 800c6f8:	200014a0 	.word	0x200014a0
 800c6fc:	200014b4 	.word	0x200014b4
 800c700:	200014b8 	.word	0x200014b8
 800c704:	20001568 	.word	0x20001568
 800c708:	200014c8 	.word	0x200014c8
 800c70c:	0800d9e4 	.word	0x0800d9e4

0800c710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3b04      	subs	r3, #4
 800c720:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2280      	movs	r2, #128	; 0x80
 800c726:	0452      	lsls	r2, r2, #17
 800c728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3b04      	subs	r3, #4
 800c72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3b04      	subs	r3, #4
 800c73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c73c:	4a08      	ldr	r2, [pc, #32]	; (800c760 <pxPortInitialiseStack+0x50>)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3b14      	subs	r3, #20
 800c746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3b20      	subs	r3, #32
 800c752:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c754:	68fb      	ldr	r3, [r7, #12]
}
 800c756:	0018      	movs	r0, r3
 800c758:	46bd      	mov	sp, r7
 800c75a:	b004      	add	sp, #16
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	46c0      	nop			; (mov r8, r8)
 800c760:	0800c765 	.word	0x0800c765

0800c764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c76e:	4b08      	ldr	r3, [pc, #32]	; (800c790 <prvTaskExitError+0x2c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	d001      	beq.n	800c77a <prvTaskExitError+0x16>
 800c776:	b672      	cpsid	i
 800c778:	e7fe      	b.n	800c778 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800c77a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c77c:	46c0      	nop			; (mov r8, r8)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d0fc      	beq.n	800c77e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c784:	46c0      	nop			; (mov r8, r8)
 800c786:	46c0      	nop			; (mov r8, r8)
 800c788:	46bd      	mov	sp, r7
 800c78a:	b002      	add	sp, #8
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	46c0      	nop			; (mov r8, r8)
 800c790:	2000011c 	.word	0x2000011c

0800c794 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800c798:	46c0      	nop			; (mov r8, r8)
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
	...

0800c7a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c7a0:	4a0b      	ldr	r2, [pc, #44]	; (800c7d0 <pxCurrentTCBConst2>)
 800c7a2:	6813      	ldr	r3, [r2, #0]
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	3020      	adds	r0, #32
 800c7a8:	f380 8809 	msr	PSP, r0
 800c7ac:	2002      	movs	r0, #2
 800c7ae:	f380 8814 	msr	CONTROL, r0
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c7b8:	46ae      	mov	lr, r5
 800c7ba:	bc08      	pop	{r3}
 800c7bc:	bc04      	pop	{r2}
 800c7be:	b662      	cpsie	i
 800c7c0:	4718      	bx	r3
 800c7c2:	46c0      	nop			; (mov r8, r8)
 800c7c4:	46c0      	nop			; (mov r8, r8)
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	46c0      	nop			; (mov r8, r8)
 800c7ca:	46c0      	nop			; (mov r8, r8)
 800c7cc:	46c0      	nop			; (mov r8, r8)
 800c7ce:	46c0      	nop			; (mov r8, r8)

0800c7d0 <pxCurrentTCBConst2>:
 800c7d0:	20000f8c 	.word	0x20000f8c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800c7d4:	46c0      	nop			; (mov r8, r8)
 800c7d6:	46c0      	nop			; (mov r8, r8)

0800c7d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7dc:	4b0e      	ldr	r3, [pc, #56]	; (800c818 <xPortStartScheduler+0x40>)
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	4b0d      	ldr	r3, [pc, #52]	; (800c818 <xPortStartScheduler+0x40>)
 800c7e2:	21ff      	movs	r1, #255	; 0xff
 800c7e4:	0409      	lsls	r1, r1, #16
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7ea:	4b0b      	ldr	r3, [pc, #44]	; (800c818 <xPortStartScheduler+0x40>)
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	4b0a      	ldr	r3, [pc, #40]	; (800c818 <xPortStartScheduler+0x40>)
 800c7f0:	21ff      	movs	r1, #255	; 0xff
 800c7f2:	0609      	lsls	r1, r1, #24
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7f8:	f000 f898 	bl	800c92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7fc:	4b07      	ldr	r3, [pc, #28]	; (800c81c <xPortStartScheduler+0x44>)
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800c802:	f7ff ffcd 	bl	800c7a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c806:	f7ff f95f 	bl	800bac8 <vTaskSwitchContext>
	prvTaskExitError();
 800c80a:	f7ff ffab 	bl	800c764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	0018      	movs	r0, r3
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	46c0      	nop			; (mov r8, r8)
 800c818:	e000ed20 	.word	0xe000ed20
 800c81c:	2000011c 	.word	0x2000011c

0800c820 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c824:	4b05      	ldr	r3, [pc, #20]	; (800c83c <vPortYield+0x1c>)
 800c826:	2280      	movs	r2, #128	; 0x80
 800c828:	0552      	lsls	r2, r2, #21
 800c82a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c82c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c830:	f3bf 8f6f 	isb	sy
}
 800c834:	46c0      	nop			; (mov r8, r8)
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	46c0      	nop			; (mov r8, r8)
 800c83c:	e000ed04 	.word	0xe000ed04

0800c840 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c844:	b672      	cpsid	i
	uxCriticalNesting++;
 800c846:	4b06      	ldr	r3, [pc, #24]	; (800c860 <vPortEnterCritical+0x20>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	4b04      	ldr	r3, [pc, #16]	; (800c860 <vPortEnterCritical+0x20>)
 800c84e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c850:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c854:	f3bf 8f6f 	isb	sy
}
 800c858:	46c0      	nop			; (mov r8, r8)
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	2000011c 	.word	0x2000011c

0800c864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c868:	4b09      	ldr	r3, [pc, #36]	; (800c890 <vPortExitCritical+0x2c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <vPortExitCritical+0x10>
 800c870:	b672      	cpsid	i
 800c872:	e7fe      	b.n	800c872 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800c874:	4b06      	ldr	r3, [pc, #24]	; (800c890 <vPortExitCritical+0x2c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	1e5a      	subs	r2, r3, #1
 800c87a:	4b05      	ldr	r3, [pc, #20]	; (800c890 <vPortExitCritical+0x2c>)
 800c87c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800c87e:	4b04      	ldr	r3, [pc, #16]	; (800c890 <vPortExitCritical+0x2c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d100      	bne.n	800c888 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800c886:	b662      	cpsie	i
	}
}
 800c888:	46c0      	nop			; (mov r8, r8)
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	2000011c 	.word	0x2000011c

0800c894 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c894:	f3ef 8010 	mrs	r0, PRIMASK
 800c898:	b672      	cpsid	i
 800c89a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c89c:	46c0      	nop			; (mov r8, r8)
 800c89e:	0018      	movs	r0, r3

0800c8a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c8a0:	f380 8810 	msr	PRIMASK, r0
 800c8a4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c8a6:	46c0      	nop			; (mov r8, r8)
	...

0800c8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8b0:	f3ef 8009 	mrs	r0, PSP
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	; (800c8f0 <pxCurrentTCBConst>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	3820      	subs	r0, #32
 800c8ba:	6010      	str	r0, [r2, #0]
 800c8bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c8be:	4644      	mov	r4, r8
 800c8c0:	464d      	mov	r5, r9
 800c8c2:	4656      	mov	r6, sl
 800c8c4:	465f      	mov	r7, fp
 800c8c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c8c8:	b508      	push	{r3, lr}
 800c8ca:	b672      	cpsid	i
 800c8cc:	f7ff f8fc 	bl	800bac8 <vTaskSwitchContext>
 800c8d0:	b662      	cpsie	i
 800c8d2:	bc0c      	pop	{r2, r3}
 800c8d4:	6811      	ldr	r1, [r2, #0]
 800c8d6:	6808      	ldr	r0, [r1, #0]
 800c8d8:	3010      	adds	r0, #16
 800c8da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c8dc:	46a0      	mov	r8, r4
 800c8de:	46a9      	mov	r9, r5
 800c8e0:	46b2      	mov	sl, r6
 800c8e2:	46bb      	mov	fp, r7
 800c8e4:	f380 8809 	msr	PSP, r0
 800c8e8:	3820      	subs	r0, #32
 800c8ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c8ec:	4718      	bx	r3
 800c8ee:	46c0      	nop			; (mov r8, r8)

0800c8f0 <pxCurrentTCBConst>:
 800c8f0:	20000f8c 	.word	0x20000f8c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800c8f4:	46c0      	nop			; (mov r8, r8)
 800c8f6:	46c0      	nop			; (mov r8, r8)

0800c8f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8fe:	f7ff ffc9 	bl	800c894 <ulSetInterruptMaskFromISR>
 800c902:	0003      	movs	r3, r0
 800c904:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c906:	f7ff f82f 	bl	800b968 <xTaskIncrementTick>
 800c90a:	1e03      	subs	r3, r0, #0
 800c90c:	d003      	beq.n	800c916 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c90e:	4b06      	ldr	r3, [pc, #24]	; (800c928 <xPortSysTickHandler+0x30>)
 800c910:	2280      	movs	r2, #128	; 0x80
 800c912:	0552      	lsls	r2, r2, #21
 800c914:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	0018      	movs	r0, r3
 800c91a:	f7ff ffc1 	bl	800c8a0 <vClearInterruptMaskFromISR>
}
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	46bd      	mov	sp, r7
 800c922:	b002      	add	sp, #8
 800c924:	bd80      	pop	{r7, pc}
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c930:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <vPortSetupTimerInterrupt+0x34>)
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c936:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <vPortSetupTimerInterrupt+0x38>)
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c93c:	4b0a      	ldr	r3, [pc, #40]	; (800c968 <vPortSetupTimerInterrupt+0x3c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	22fa      	movs	r2, #250	; 0xfa
 800c942:	0091      	lsls	r1, r2, #2
 800c944:	0018      	movs	r0, r3
 800c946:	f7f3 fbdf 	bl	8000108 <__udivsi3>
 800c94a:	0003      	movs	r3, r0
 800c94c:	001a      	movs	r2, r3
 800c94e:	4b07      	ldr	r3, [pc, #28]	; (800c96c <vPortSetupTimerInterrupt+0x40>)
 800c950:	3a01      	subs	r2, #1
 800c952:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c954:	4b02      	ldr	r3, [pc, #8]	; (800c960 <vPortSetupTimerInterrupt+0x34>)
 800c956:	2207      	movs	r2, #7
 800c958:	601a      	str	r2, [r3, #0]
}
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	e000e010 	.word	0xe000e010
 800c964:	e000e018 	.word	0xe000e018
 800c968:	20000000 	.word	0x20000000
 800c96c:	e000e014 	.word	0xe000e014

0800c970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c97c:	f7fe ff4e 	bl	800b81c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c980:	4b4b      	ldr	r3, [pc, #300]	; (800cab0 <pvPortMalloc+0x140>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c988:	f000 f8ec 	bl	800cb64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c98c:	4b49      	ldr	r3, [pc, #292]	; (800cab4 <pvPortMalloc+0x144>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	4013      	ands	r3, r2
 800c994:	d000      	beq.n	800c998 <pvPortMalloc+0x28>
 800c996:	e07e      	b.n	800ca96 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d012      	beq.n	800c9c4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800c99e:	2208      	movs	r2, #8
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	189b      	adds	r3, r3, r2
 800c9a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2207      	movs	r2, #7
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	d00a      	beq.n	800c9c4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2207      	movs	r2, #7
 800c9b2:	4393      	bics	r3, r2
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2207      	movs	r2, #7
 800c9bc:	4013      	ands	r3, r2
 800c9be:	d001      	beq.n	800c9c4 <pvPortMalloc+0x54>
 800c9c0:	b672      	cpsid	i
 800c9c2:	e7fe      	b.n	800c9c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d065      	beq.n	800ca96 <pvPortMalloc+0x126>
 800c9ca:	4b3b      	ldr	r3, [pc, #236]	; (800cab8 <pvPortMalloc+0x148>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d860      	bhi.n	800ca96 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9d4:	4b39      	ldr	r3, [pc, #228]	; (800cabc <pvPortMalloc+0x14c>)
 800c9d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c9d8:	4b38      	ldr	r3, [pc, #224]	; (800cabc <pvPortMalloc+0x14c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9de:	e004      	b.n	800c9ea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d903      	bls.n	800c9fc <pvPortMalloc+0x8c>
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1f1      	bne.n	800c9e0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9fc:	4b2c      	ldr	r3, [pc, #176]	; (800cab0 <pvPortMalloc+0x140>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d047      	beq.n	800ca96 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	189b      	adds	r3, r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	1ad2      	subs	r2, r2, r3
 800ca20:	2308      	movs	r3, #8
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d916      	bls.n	800ca56 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	18d3      	adds	r3, r2, r3
 800ca2e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2207      	movs	r2, #7
 800ca34:	4013      	ands	r3, r2
 800ca36:	d001      	beq.n	800ca3c <pvPortMalloc+0xcc>
 800ca38:	b672      	cpsid	i
 800ca3a:	e7fe      	b.n	800ca3a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	1ad2      	subs	r2, r2, r3
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	0018      	movs	r0, r3
 800ca52:	f000 f8e7 	bl	800cc24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca56:	4b18      	ldr	r3, [pc, #96]	; (800cab8 <pvPortMalloc+0x148>)
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	1ad2      	subs	r2, r2, r3
 800ca60:	4b15      	ldr	r3, [pc, #84]	; (800cab8 <pvPortMalloc+0x148>)
 800ca62:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca64:	4b14      	ldr	r3, [pc, #80]	; (800cab8 <pvPortMalloc+0x148>)
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <pvPortMalloc+0x150>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d203      	bcs.n	800ca78 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca70:	4b11      	ldr	r3, [pc, #68]	; (800cab8 <pvPortMalloc+0x148>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	4b12      	ldr	r3, [pc, #72]	; (800cac0 <pvPortMalloc+0x150>)
 800ca76:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <pvPortMalloc+0x144>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	431a      	orrs	r2, r3
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca8c:	4b0d      	ldr	r3, [pc, #52]	; (800cac4 <pvPortMalloc+0x154>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <pvPortMalloc+0x154>)
 800ca94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca96:	f7fe fecd 	bl	800b834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2207      	movs	r2, #7
 800ca9e:	4013      	ands	r3, r2
 800caa0:	d001      	beq.n	800caa6 <pvPortMalloc+0x136>
 800caa2:	b672      	cpsid	i
 800caa4:	e7fe      	b.n	800caa4 <pvPortMalloc+0x134>
	return pvReturn;
 800caa6:	68fb      	ldr	r3, [r7, #12]
}
 800caa8:	0018      	movs	r0, r3
 800caaa:	46bd      	mov	sp, r7
 800caac:	b006      	add	sp, #24
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	200115c0 	.word	0x200115c0
 800cab4:	200115d4 	.word	0x200115d4
 800cab8:	200115c4 	.word	0x200115c4
 800cabc:	200115b8 	.word	0x200115b8
 800cac0:	200115c8 	.word	0x200115c8
 800cac4:	200115cc 	.word	0x200115cc

0800cac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d03a      	beq.n	800cb50 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cada:	2308      	movs	r3, #8
 800cadc:	425b      	negs	r3, r3
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	18d3      	adds	r3, r2, r3
 800cae2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	4b1a      	ldr	r3, [pc, #104]	; (800cb58 <vPortFree+0x90>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4013      	ands	r3, r2
 800caf2:	d101      	bne.n	800caf8 <vPortFree+0x30>
 800caf4:	b672      	cpsid	i
 800caf6:	e7fe      	b.n	800caf6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <vPortFree+0x3c>
 800cb00:	b672      	cpsid	i
 800cb02:	e7fe      	b.n	800cb02 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	4b13      	ldr	r3, [pc, #76]	; (800cb58 <vPortFree+0x90>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	d01f      	beq.n	800cb50 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d11b      	bne.n	800cb50 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	685a      	ldr	r2, [r3, #4]
 800cb1c:	4b0e      	ldr	r3, [pc, #56]	; (800cb58 <vPortFree+0x90>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	43db      	mvns	r3, r3
 800cb22:	401a      	ands	r2, r3
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb28:	f7fe fe78 	bl	800b81c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <vPortFree+0x94>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	18d2      	adds	r2, r2, r3
 800cb36:	4b09      	ldr	r3, [pc, #36]	; (800cb5c <vPortFree+0x94>)
 800cb38:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	f000 f871 	bl	800cc24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <vPortFree+0x98>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <vPortFree+0x98>)
 800cb4a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800cb4c:	f7fe fe72 	bl	800b834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb50:	46c0      	nop			; (mov r8, r8)
 800cb52:	46bd      	mov	sp, r7
 800cb54:	b004      	add	sp, #16
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	200115d4 	.word	0x200115d4
 800cb5c:	200115c4 	.word	0x200115c4
 800cb60:	200115d0 	.word	0x200115d0

0800cb64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb6a:	4b27      	ldr	r3, [pc, #156]	; (800cc08 <prvHeapInit+0xa4>)
 800cb6c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb6e:	4b27      	ldr	r3, [pc, #156]	; (800cc0c <prvHeapInit+0xa8>)
 800cb70:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2207      	movs	r2, #7
 800cb76:	4013      	ands	r3, r2
 800cb78:	d00c      	beq.n	800cb94 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3307      	adds	r3, #7
 800cb7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2207      	movs	r2, #7
 800cb84:	4393      	bics	r3, r2
 800cb86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	1ad2      	subs	r2, r2, r3
 800cb8e:	4b1f      	ldr	r3, [pc, #124]	; (800cc0c <prvHeapInit+0xa8>)
 800cb90:	18d3      	adds	r3, r2, r3
 800cb92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb98:	4b1d      	ldr	r3, [pc, #116]	; (800cc10 <prvHeapInit+0xac>)
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb9e:	4b1c      	ldr	r3, [pc, #112]	; (800cc10 <prvHeapInit+0xac>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	18d3      	adds	r3, r2, r3
 800cbaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbac:	2208      	movs	r2, #8
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1a9b      	subs	r3, r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2207      	movs	r2, #7
 800cbb8:	4393      	bics	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	4b15      	ldr	r3, [pc, #84]	; (800cc14 <prvHeapInit+0xb0>)
 800cbc0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800cbc2:	4b14      	ldr	r3, [pc, #80]	; (800cc14 <prvHeapInit+0xb0>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbca:	4b12      	ldr	r3, [pc, #72]	; (800cc14 <prvHeapInit+0xb0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	1ad2      	subs	r2, r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbe0:	4b0c      	ldr	r3, [pc, #48]	; (800cc14 <prvHeapInit+0xb0>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	4b0a      	ldr	r3, [pc, #40]	; (800cc18 <prvHeapInit+0xb4>)
 800cbee:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	4b09      	ldr	r3, [pc, #36]	; (800cc1c <prvHeapInit+0xb8>)
 800cbf6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbf8:	4b09      	ldr	r3, [pc, #36]	; (800cc20 <prvHeapInit+0xbc>)
 800cbfa:	2280      	movs	r2, #128	; 0x80
 800cbfc:	0612      	lsls	r2, r2, #24
 800cbfe:	601a      	str	r2, [r3, #0]
}
 800cc00:	46c0      	nop			; (mov r8, r8)
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b004      	add	sp, #16
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	0000ffff 	.word	0x0000ffff
 800cc0c:	200015b8 	.word	0x200015b8
 800cc10:	200115b8 	.word	0x200115b8
 800cc14:	200115c0 	.word	0x200115c0
 800cc18:	200115c8 	.word	0x200115c8
 800cc1c:	200115c4 	.word	0x200115c4
 800cc20:	200115d4 	.word	0x200115d4

0800cc24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc2c:	4b27      	ldr	r3, [pc, #156]	; (800cccc <prvInsertBlockIntoFreeList+0xa8>)
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	e002      	b.n	800cc38 <prvInsertBlockIntoFreeList+0x14>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d8f7      	bhi.n	800cc32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	18d3      	adds	r3, r2, r3
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d108      	bne.n	800cc66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	18d2      	adds	r2, r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	18d2      	adds	r2, r2, r3
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d118      	bne.n	800ccac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <prvInsertBlockIntoFreeList+0xac>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d00d      	beq.n	800cca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	18d2      	adds	r2, r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e008      	b.n	800ccb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cca2:	4b0b      	ldr	r3, [pc, #44]	; (800ccd0 <prvInsertBlockIntoFreeList+0xac>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	e003      	b.n	800ccb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d002      	beq.n	800ccc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccc2:	46c0      	nop			; (mov r8, r8)
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	b004      	add	sp, #16
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	46c0      	nop			; (mov r8, r8)
 800cccc:	200115b8 	.word	0x200115b8
 800ccd0:	200115c0 	.word	0x200115c0

0800ccd4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ccd8:	4914      	ldr	r1, [pc, #80]	; (800cd2c <MX_USB_Device_Init+0x58>)
 800ccda:	4b15      	ldr	r3, [pc, #84]	; (800cd30 <MX_USB_Device_Init+0x5c>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	0018      	movs	r0, r3
 800cce0:	f7fc fa3e 	bl	8009160 <USBD_Init>
 800cce4:	1e03      	subs	r3, r0, #0
 800cce6:	d001      	beq.n	800ccec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cce8:	f7f3 ff86 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ccec:	4a11      	ldr	r2, [pc, #68]	; (800cd34 <MX_USB_Device_Init+0x60>)
 800ccee:	4b10      	ldr	r3, [pc, #64]	; (800cd30 <MX_USB_Device_Init+0x5c>)
 800ccf0:	0011      	movs	r1, r2
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	f7fc fa6e 	bl	80091d4 <USBD_RegisterClass>
 800ccf8:	1e03      	subs	r3, r0, #0
 800ccfa:	d001      	beq.n	800cd00 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800ccfc:	f7f3 ff7c 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cd00:	4a0d      	ldr	r2, [pc, #52]	; (800cd38 <MX_USB_Device_Init+0x64>)
 800cd02:	4b0b      	ldr	r3, [pc, #44]	; (800cd30 <MX_USB_Device_Init+0x5c>)
 800cd04:	0011      	movs	r1, r2
 800cd06:	0018      	movs	r0, r3
 800cd08:	f7fc f9b0 	bl	800906c <USBD_CDC_RegisterInterface>
 800cd0c:	1e03      	subs	r3, r0, #0
 800cd0e:	d001      	beq.n	800cd14 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800cd10:	f7f3 ff72 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cd14:	4b06      	ldr	r3, [pc, #24]	; (800cd30 <MX_USB_Device_Init+0x5c>)
 800cd16:	0018      	movs	r0, r3
 800cd18:	f7fc fa89 	bl	800922e <USBD_Start>
 800cd1c:	1e03      	subs	r3, r0, #0
 800cd1e:	d001      	beq.n	800cd24 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800cd20:	f7f3 ff6a 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cd24:	46c0      	nop			; (mov r8, r8)
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	46c0      	nop			; (mov r8, r8)
 800cd2c:	20000134 	.word	0x20000134
 800cd30:	20011aa8 	.word	0x20011aa8
 800cd34:	20000018 	.word	0x20000018
 800cd38:	20000120 	.word	0x20000120

0800cd3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd40:	4907      	ldr	r1, [pc, #28]	; (800cd60 <CDC_Init_FS+0x24>)
 800cd42:	4b08      	ldr	r3, [pc, #32]	; (800cd64 <CDC_Init_FS+0x28>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	0018      	movs	r0, r3
 800cd48:	f7fc f9a4 	bl	8009094 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd4c:	4a06      	ldr	r2, [pc, #24]	; (800cd68 <CDC_Init_FS+0x2c>)
 800cd4e:	4b05      	ldr	r3, [pc, #20]	; (800cd64 <CDC_Init_FS+0x28>)
 800cd50:	0011      	movs	r1, r2
 800cd52:	0018      	movs	r0, r3
 800cd54:	f7fc f9bd 	bl	80090d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd58:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20012578 	.word	0x20012578
 800cd64:	20011aa8 	.word	0x20011aa8
 800cd68:	20011d78 	.word	0x20011d78

0800cd6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd72:	0018      	movs	r0, r3
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6039      	str	r1, [r7, #0]
 800cd80:	0011      	movs	r1, r2
 800cd82:	1dfb      	adds	r3, r7, #7
 800cd84:	1c02      	adds	r2, r0, #0
 800cd86:	701a      	strb	r2, [r3, #0]
 800cd88:	1d3b      	adds	r3, r7, #4
 800cd8a:	1c0a      	adds	r2, r1, #0
 800cd8c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd8e:	1dfb      	adds	r3, r7, #7
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	2b23      	cmp	r3, #35	; 0x23
 800cd94:	d804      	bhi.n	800cda0 <CDC_Control_FS+0x28>
 800cd96:	009a      	lsls	r2, r3, #2
 800cd98:	4b04      	ldr	r3, [pc, #16]	; (800cdac <CDC_Control_FS+0x34>)
 800cd9a:	18d3      	adds	r3, r2, r3
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cda0:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800cda2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cda4:	0018      	movs	r0, r3
 800cda6:	46bd      	mov	sp, r7
 800cda8:	b002      	add	sp, #8
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	0800db78 	.word	0x0800db78

0800cdb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	4b06      	ldr	r3, [pc, #24]	; (800cdd8 <CDC_Receive_FS+0x28>)
 800cdbe:	0011      	movs	r1, r2
 800cdc0:	0018      	movs	r0, r3
 800cdc2:	f7fc f986 	bl	80090d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cdc6:	4b04      	ldr	r3, [pc, #16]	; (800cdd8 <CDC_Receive_FS+0x28>)
 800cdc8:	0018      	movs	r0, r3
 800cdca:	f7fc f99b 	bl	8009104 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cdce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdd0:	0018      	movs	r0, r3
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	b002      	add	sp, #8
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	20011aa8 	.word	0x20011aa8

0800cddc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	1dfb      	adds	r3, r7, #7
 800cde8:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cdea:	2117      	movs	r1, #23
 800cdec:	187b      	adds	r3, r7, r1
 800cdee:	2200      	movs	r2, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdf2:	187b      	adds	r3, r7, r1
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	b25b      	sxtb	r3, r3
}
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	b006      	add	sp, #24
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	0002      	movs	r2, r0
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	1dfb      	adds	r3, r7, #7
 800ce0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2212      	movs	r2, #18
 800ce12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ce14:	4b02      	ldr	r3, [pc, #8]	; (800ce20 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ce16:	0018      	movs	r0, r3
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	b002      	add	sp, #8
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	46c0      	nop			; (mov r8, r8)
 800ce20:	20000154 	.word	0x20000154

0800ce24 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	0002      	movs	r2, r0
 800ce2c:	6039      	str	r1, [r7, #0]
 800ce2e:	1dfb      	adds	r3, r7, #7
 800ce30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	2204      	movs	r2, #4
 800ce36:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce38:	4b02      	ldr	r3, [pc, #8]	; (800ce44 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ce3a:	0018      	movs	r0, r3
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	b002      	add	sp, #8
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	46c0      	nop			; (mov r8, r8)
 800ce44:	20000168 	.word	0x20000168

0800ce48 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	0002      	movs	r2, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	1dfb      	adds	r3, r7, #7
 800ce54:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ce56:	1dfb      	adds	r3, r7, #7
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4908      	ldr	r1, [pc, #32]	; (800ce84 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800ce62:	4b09      	ldr	r3, [pc, #36]	; (800ce88 <USBD_CDC_ProductStrDescriptor+0x40>)
 800ce64:	0018      	movs	r0, r3
 800ce66:	f7fd fb35 	bl	800a4d4 <USBD_GetString>
 800ce6a:	e005      	b.n	800ce78 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ce6c:	683a      	ldr	r2, [r7, #0]
 800ce6e:	4905      	ldr	r1, [pc, #20]	; (800ce84 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800ce70:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <USBD_CDC_ProductStrDescriptor+0x40>)
 800ce72:	0018      	movs	r0, r3
 800ce74:	f7fd fb2e 	bl	800a4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce78:	4b02      	ldr	r3, [pc, #8]	; (800ce84 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800ce7a:	0018      	movs	r0, r3
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	b002      	add	sp, #8
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	46c0      	nop			; (mov r8, r8)
 800ce84:	20012d78 	.word	0x20012d78
 800ce88:	0800d9ec 	.word	0x0800d9ec

0800ce8c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	0002      	movs	r2, r0
 800ce94:	6039      	str	r1, [r7, #0]
 800ce96:	1dfb      	adds	r3, r7, #7
 800ce98:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	4904      	ldr	r1, [pc, #16]	; (800ceb0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800cea0:	0018      	movs	r0, r3
 800cea2:	f7fd fb17 	bl	800a4d4 <USBD_GetString>
  return USBD_StrDesc;
 800cea6:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800cea8:	0018      	movs	r0, r3
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	b002      	add	sp, #8
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20012d78 	.word	0x20012d78
 800ceb4:	0800da04 	.word	0x0800da04

0800ceb8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	0002      	movs	r2, r0
 800cec0:	6039      	str	r1, [r7, #0]
 800cec2:	1dfb      	adds	r3, r7, #7
 800cec4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	221a      	movs	r2, #26
 800ceca:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cecc:	f000 f84c 	bl	800cf68 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ced0:	4b02      	ldr	r3, [pc, #8]	; (800cedc <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800ced2:	0018      	movs	r0, r3
 800ced4:	46bd      	mov	sp, r7
 800ced6:	b002      	add	sp, #8
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	46c0      	nop			; (mov r8, r8)
 800cedc:	2000016c 	.word	0x2000016c

0800cee0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	0002      	movs	r2, r0
 800cee8:	6039      	str	r1, [r7, #0]
 800ceea:	1dfb      	adds	r3, r7, #7
 800ceec:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ceee:	1dfb      	adds	r3, r7, #7
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	4908      	ldr	r1, [pc, #32]	; (800cf1c <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800cefa:	4b09      	ldr	r3, [pc, #36]	; (800cf20 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800cefc:	0018      	movs	r0, r3
 800cefe:	f7fd fae9 	bl	800a4d4 <USBD_GetString>
 800cf02:	e005      	b.n	800cf10 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	4905      	ldr	r1, [pc, #20]	; (800cf1c <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800cf08:	4b05      	ldr	r3, [pc, #20]	; (800cf20 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f7fd fae2 	bl	800a4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf10:	4b02      	ldr	r3, [pc, #8]	; (800cf1c <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800cf12:	0018      	movs	r0, r3
 800cf14:	46bd      	mov	sp, r7
 800cf16:	b002      	add	sp, #8
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	46c0      	nop			; (mov r8, r8)
 800cf1c:	20012d78 	.word	0x20012d78
 800cf20:	0800da18 	.word	0x0800da18

0800cf24 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	0002      	movs	r2, r0
 800cf2c:	6039      	str	r1, [r7, #0]
 800cf2e:	1dfb      	adds	r3, r7, #7
 800cf30:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cf32:	1dfb      	adds	r3, r7, #7
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	4908      	ldr	r1, [pc, #32]	; (800cf60 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800cf3e:	4b09      	ldr	r3, [pc, #36]	; (800cf64 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800cf40:	0018      	movs	r0, r3
 800cf42:	f7fd fac7 	bl	800a4d4 <USBD_GetString>
 800cf46:	e005      	b.n	800cf54 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cf48:	683a      	ldr	r2, [r7, #0]
 800cf4a:	4905      	ldr	r1, [pc, #20]	; (800cf60 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800cf4c:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f7fd fac0 	bl	800a4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf54:	4b02      	ldr	r3, [pc, #8]	; (800cf60 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800cf56:	0018      	movs	r0, r3
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	b002      	add	sp, #8
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	46c0      	nop			; (mov r8, r8)
 800cf60:	20012d78 	.word	0x20012d78
 800cf64:	0800da24 	.word	0x0800da24

0800cf68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf6e:	4b10      	ldr	r3, [pc, #64]	; (800cfb0 <Get_SerialNum+0x48>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf74:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <Get_SerialNum+0x4c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf7a:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <Get_SerialNum+0x50>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	18d3      	adds	r3, r2, r3
 800cf86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00b      	beq.n	800cfa6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf8e:	490b      	ldr	r1, [pc, #44]	; (800cfbc <Get_SerialNum+0x54>)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2208      	movs	r2, #8
 800cf94:	0018      	movs	r0, r3
 800cf96:	f000 f815 	bl	800cfc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf9a:	4909      	ldr	r1, [pc, #36]	; (800cfc0 <Get_SerialNum+0x58>)
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2204      	movs	r2, #4
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f000 f80f 	bl	800cfc4 <IntToUnicode>
  }
}
 800cfa6:	46c0      	nop			; (mov r8, r8)
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	b004      	add	sp, #16
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	1fff7590 	.word	0x1fff7590
 800cfb4:	1fff7594 	.word	0x1fff7594
 800cfb8:	1fff7598 	.word	0x1fff7598
 800cfbc:	2000016e 	.word	0x2000016e
 800cfc0:	2000017e 	.word	0x2000017e

0800cfc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	1dfb      	adds	r3, r7, #7
 800cfd0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cfd2:	2117      	movs	r1, #23
 800cfd4:	187b      	adds	r3, r7, r1
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cfda:	187b      	adds	r3, r7, r1
 800cfdc:	2200      	movs	r2, #0
 800cfde:	701a      	strb	r2, [r3, #0]
 800cfe0:	e02f      	b.n	800d042 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	0f1b      	lsrs	r3, r3, #28
 800cfe6:	2b09      	cmp	r3, #9
 800cfe8:	d80d      	bhi.n	800d006 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	0f1b      	lsrs	r3, r3, #28
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	2317      	movs	r3, #23
 800cff2:	18fb      	adds	r3, r7, r3
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	0019      	movs	r1, r3
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	185b      	adds	r3, r3, r1
 800cffe:	3230      	adds	r2, #48	; 0x30
 800d000:	b2d2      	uxtb	r2, r2
 800d002:	701a      	strb	r2, [r3, #0]
 800d004:	e00c      	b.n	800d020 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	0f1b      	lsrs	r3, r3, #28
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	2317      	movs	r3, #23
 800d00e:	18fb      	adds	r3, r7, r3
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	0019      	movs	r1, r3
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	185b      	adds	r3, r3, r1
 800d01a:	3237      	adds	r2, #55	; 0x37
 800d01c:	b2d2      	uxtb	r2, r2
 800d01e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	011b      	lsls	r3, r3, #4
 800d024:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d026:	2117      	movs	r1, #23
 800d028:	187b      	adds	r3, r7, r1
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	3301      	adds	r3, #1
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	18d3      	adds	r3, r2, r3
 800d034:	2200      	movs	r2, #0
 800d036:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d038:	187b      	adds	r3, r7, r1
 800d03a:	781a      	ldrb	r2, [r3, #0]
 800d03c:	187b      	adds	r3, r7, r1
 800d03e:	3201      	adds	r2, #1
 800d040:	701a      	strb	r2, [r3, #0]
 800d042:	2317      	movs	r3, #23
 800d044:	18fa      	adds	r2, r7, r3
 800d046:	1dfb      	adds	r3, r7, #7
 800d048:	7812      	ldrb	r2, [r2, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d3c8      	bcc.n	800cfe2 <IntToUnicode+0x1e>
  }
}
 800d050:	46c0      	nop			; (mov r8, r8)
 800d052:	46c0      	nop			; (mov r8, r8)
 800d054:	46bd      	mov	sp, r7
 800d056:	b006      	add	sp, #24
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_DRD_FS)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a0e      	ldr	r2, [pc, #56]	; (800d0a4 <HAL_PCD_MspInit+0x48>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d115      	bne.n	800d09a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_DRD_FS_MspInit 0 */

  /* USER CODE END USB_DRD_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d06e:	4b0e      	ldr	r3, [pc, #56]	; (800d0a8 <HAL_PCD_MspInit+0x4c>)
 800d070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d072:	4b0d      	ldr	r3, [pc, #52]	; (800d0a8 <HAL_PCD_MspInit+0x4c>)
 800d074:	2180      	movs	r1, #128	; 0x80
 800d076:	0189      	lsls	r1, r1, #6
 800d078:	430a      	orrs	r2, r1
 800d07a:	63da      	str	r2, [r3, #60]	; 0x3c
 800d07c:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <HAL_PCD_MspInit+0x4c>)
 800d07e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d080:	2380      	movs	r3, #128	; 0x80
 800d082:	019b      	lsls	r3, r3, #6
 800d084:	4013      	ands	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 3, 0);
 800d08a:	2200      	movs	r2, #0
 800d08c:	2103      	movs	r1, #3
 800d08e:	2008      	movs	r0, #8
 800d090:	f7f4 f920 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 800d094:	2008      	movs	r0, #8
 800d096:	f7f4 f932 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800d09a:	46c0      	nop			; (mov r8, r8)
 800d09c:	46bd      	mov	sp, r7
 800d09e:	b004      	add	sp, #16
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	46c0      	nop			; (mov r8, r8)
 800d0a4:	40005c00 	.word	0x40005c00
 800d0a8:	40021000 	.word	0x40021000

0800d0ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	23c0      	movs	r3, #192	; 0xc0
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	58d2      	ldr	r2, [r2, r3]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	21b0      	movs	r1, #176	; 0xb0
 800d0c0:	0089      	lsls	r1, r1, #2
 800d0c2:	468c      	mov	ip, r1
 800d0c4:	4463      	add	r3, ip
 800d0c6:	0019      	movs	r1, r3
 800d0c8:	0010      	movs	r0, r2
 800d0ca:	f7fc f907 	bl	80092dc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d0ce:	46c0      	nop			; (mov r8, r8)
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	b002      	add	sp, #8
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d6:	b590      	push	{r4, r7, lr}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	000a      	movs	r2, r1
 800d0e0:	1cfb      	adds	r3, r7, #3
 800d0e2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	23c0      	movs	r3, #192	; 0xc0
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	58d4      	ldr	r4, [r2, r3]
 800d0ec:	1cfb      	adds	r3, r7, #3
 800d0ee:	781a      	ldrb	r2, [r3, #0]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	23c6      	movs	r3, #198	; 0xc6
 800d0f4:	0059      	lsls	r1, r3, #1
 800d0f6:	0013      	movs	r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	189b      	adds	r3, r3, r2
 800d0fc:	00db      	lsls	r3, r3, #3
 800d0fe:	18c3      	adds	r3, r0, r3
 800d100:	185b      	adds	r3, r3, r1
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	1cfb      	adds	r3, r7, #3
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	0019      	movs	r1, r3
 800d10a:	0020      	movs	r0, r4
 800d10c:	f7fc f950 	bl	80093b0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d110:	46c0      	nop			; (mov r8, r8)
 800d112:	46bd      	mov	sp, r7
 800d114:	b003      	add	sp, #12
 800d116:	bd90      	pop	{r4, r7, pc}

0800d118 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	000a      	movs	r2, r1
 800d122:	1cfb      	adds	r3, r7, #3
 800d124:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	23c0      	movs	r3, #192	; 0xc0
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	58d0      	ldr	r0, [r2, r3]
 800d12e:	1cfb      	adds	r3, r7, #3
 800d130:	781a      	ldrb	r2, [r3, #0]
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	0013      	movs	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	189b      	adds	r3, r3, r2
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	18cb      	adds	r3, r1, r3
 800d13e:	334c      	adds	r3, #76	; 0x4c
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	1cfb      	adds	r3, r7, #3
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	0019      	movs	r1, r3
 800d148:	f7fc f9a8 	bl	800949c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d14c:	46c0      	nop			; (mov r8, r8)
 800d14e:	46bd      	mov	sp, r7
 800d150:	b002      	add	sp, #8
 800d152:	bd80      	pop	{r7, pc}

0800d154 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	23c0      	movs	r3, #192	; 0xc0
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	58d3      	ldr	r3, [r2, r3]
 800d164:	0018      	movs	r0, r3
 800d166:	f7fc fae3 	bl	8009730 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d16a:	46c0      	nop			; (mov r8, r8)
 800d16c:	46bd      	mov	sp, r7
 800d16e:	b002      	add	sp, #8
 800d170:	bd80      	pop	{r7, pc}

0800d172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b084      	sub	sp, #16
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d17a:	230f      	movs	r3, #15
 800d17c:	18fb      	adds	r3, r7, r3
 800d17e:	2201      	movs	r2, #1
 800d180:	701a      	strb	r2, [r3, #0]
  if (( hpcd->Init.speed != USB_DRD_SPEED_FS) || (hpcd->Init.speed != USB_DRD_SPEED_LS))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d103      	bne.n	800d192 <HAL_PCD_ResetCallback+0x20>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d001      	beq.n	800d196 <HAL_PCD_ResetCallback+0x24>
  {
    Error_Handler();
 800d192:	f7f3 fd31 	bl	8000bf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	23c0      	movs	r3, #192	; 0xc0
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	58d2      	ldr	r2, [r2, r3]
 800d19e:	230f      	movs	r3, #15
 800d1a0:	18fb      	adds	r3, r7, r3
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	0019      	movs	r1, r3
 800d1a6:	0010      	movs	r0, r2
 800d1a8:	f7fc fa7f 	bl	80096aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	23c0      	movs	r3, #192	; 0xc0
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	58d3      	ldr	r3, [r2, r3]
 800d1b4:	0018      	movs	r0, r3
 800d1b6:	f7fc fa21 	bl	80095fc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d1ba:	46c0      	nop			; (mov r8, r8)
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	b004      	add	sp, #16
 800d1c0:	bd80      	pop	{r7, pc}
	...

0800d1c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	23c0      	movs	r3, #192	; 0xc0
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	58d3      	ldr	r3, [r2, r3]
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	f7fc fa79 	bl	80096cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	69db      	ldr	r3, [r3, #28]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d005      	beq.n	800d1ee <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1e2:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <HAL_PCD_SuspendCallback+0x34>)
 800d1e4:	691a      	ldr	r2, [r3, #16]
 800d1e6:	4b04      	ldr	r3, [pc, #16]	; (800d1f8 <HAL_PCD_SuspendCallback+0x34>)
 800d1e8:	2106      	movs	r1, #6
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d1ee:	46c0      	nop			; (mov r8, r8)
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	b002      	add	sp, #8
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	46c0      	nop			; (mov r8, r8)
 800d1f8:	e000ed00 	.word	0xe000ed00

0800d1fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	69db      	ldr	r3, [r3, #28]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d20c:	4b09      	ldr	r3, [pc, #36]	; (800d234 <HAL_PCD_ResumeCallback+0x38>)
 800d20e:	691a      	ldr	r2, [r3, #16]
 800d210:	4b08      	ldr	r3, [pc, #32]	; (800d234 <HAL_PCD_ResumeCallback+0x38>)
 800d212:	2106      	movs	r1, #6
 800d214:	438a      	bics	r2, r1
 800d216:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d218:	f000 fa7e 	bl	800d718 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	23c0      	movs	r3, #192	; 0xc0
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	58d3      	ldr	r3, [r2, r3]
 800d224:	0018      	movs	r0, r3
 800d226:	f7fc fa69 	bl	80096fc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d22a:	46c0      	nop			; (mov r8, r8)
 800d22c:	46bd      	mov	sp, r7
 800d22e:	b002      	add	sp, #8
 800d230:	bd80      	pop	{r7, pc}
 800d232:	46c0      	nop			; (mov r8, r8)
 800d234:	e000ed00 	.word	0xe000ed00

0800d238 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800d240:	4a34      	ldr	r2, [pc, #208]	; (800d314 <USBD_LL_Init+0xdc>)
 800d242:	23c0      	movs	r3, #192	; 0xc0
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	23b1      	movs	r3, #177	; 0xb1
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4930      	ldr	r1, [pc, #192]	; (800d314 <USBD_LL_Init+0xdc>)
 800d252:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800d254:	4b2f      	ldr	r3, [pc, #188]	; (800d314 <USBD_LL_Init+0xdc>)
 800d256:	4a30      	ldr	r2, [pc, #192]	; (800d318 <USBD_LL_Init+0xe0>)
 800d258:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800d25a:	4b2e      	ldr	r3, [pc, #184]	; (800d314 <USBD_LL_Init+0xdc>)
 800d25c:	2208      	movs	r2, #8
 800d25e:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800d260:	4b2c      	ldr	r3, [pc, #176]	; (800d314 <USBD_LL_Init+0xdc>)
 800d262:	2208      	movs	r2, #8
 800d264:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = USB_DRD_SPEED_FS;
 800d266:	4b2b      	ldr	r3, [pc, #172]	; (800d314 <USBD_LL_Init+0xdc>)
 800d268:	2201      	movs	r2, #1
 800d26a:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d26c:	4b29      	ldr	r3, [pc, #164]	; (800d314 <USBD_LL_Init+0xdc>)
 800d26e:	2202      	movs	r2, #2
 800d270:	615a      	str	r2, [r3, #20]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800d272:	4b28      	ldr	r3, [pc, #160]	; (800d314 <USBD_LL_Init+0xdc>)
 800d274:	2200      	movs	r2, #0
 800d276:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800d278:	4b26      	ldr	r3, [pc, #152]	; (800d314 <USBD_LL_Init+0xdc>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800d27e:	4b25      	ldr	r3, [pc, #148]	; (800d314 <USBD_LL_Init+0xdc>)
 800d280:	2200      	movs	r2, #0
 800d282:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800d284:	4b23      	ldr	r3, [pc, #140]	; (800d314 <USBD_LL_Init+0xdc>)
 800d286:	2200      	movs	r2, #0
 800d288:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800d28a:	4b22      	ldr	r3, [pc, #136]	; (800d314 <USBD_LL_Init+0xdc>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800d290:	4b20      	ldr	r3, [pc, #128]	; (800d314 <USBD_LL_Init+0xdc>)
 800d292:	2200      	movs	r2, #0
 800d294:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800d296:	4b1f      	ldr	r3, [pc, #124]	; (800d314 <USBD_LL_Init+0xdc>)
 800d298:	2200      	movs	r2, #0
 800d29a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800d29c:	4b1d      	ldr	r3, [pc, #116]	; (800d314 <USBD_LL_Init+0xdc>)
 800d29e:	0018      	movs	r0, r3
 800d2a0:	f7f5 fbe6 	bl	8002a70 <HAL_PCD_Init>
 800d2a4:	1e03      	subs	r3, r0, #0
 800d2a6:	d001      	beq.n	800d2ac <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800d2a8:	f7f3 fca6 	bl	8000bf8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	23b1      	movs	r3, #177	; 0xb1
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	58d0      	ldr	r0, [r2, r3]
 800d2b4:	2318      	movs	r3, #24
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	f7f6 ff31 	bl	8004120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	23b1      	movs	r3, #177	; 0xb1
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	58d0      	ldr	r0, [r2, r3]
 800d2c6:	2358      	movs	r3, #88	; 0x58
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2180      	movs	r1, #128	; 0x80
 800d2cc:	f7f6 ff28 	bl	8004120 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	23b1      	movs	r3, #177	; 0xb1
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	58d0      	ldr	r0, [r2, r3]
 800d2d8:	23c0      	movs	r3, #192	; 0xc0
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2181      	movs	r1, #129	; 0x81
 800d2de:	f7f6 ff1f 	bl	8004120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	23b1      	movs	r3, #177	; 0xb1
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	58d0      	ldr	r0, [r2, r3]
 800d2ea:	2388      	movs	r3, #136	; 0x88
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	f7f6 ff15 	bl	8004120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	23b1      	movs	r3, #177	; 0xb1
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	58d0      	ldr	r0, [r2, r3]
 800d2fe:	2380      	movs	r3, #128	; 0x80
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	2200      	movs	r2, #0
 800d304:	2182      	movs	r1, #130	; 0x82
 800d306:	f7f6 ff0b 	bl	8004120 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	0018      	movs	r0, r3
 800d30e:	46bd      	mov	sp, r7
 800d310:	b002      	add	sp, #8
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20012f78 	.word	0x20012f78
 800d318:	40005c00 	.word	0x40005c00

0800d31c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d324:	210f      	movs	r1, #15
 800d326:	187b      	adds	r3, r7, r1
 800d328:	2200      	movs	r2, #0
 800d32a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d32c:	260e      	movs	r6, #14
 800d32e:	19bb      	adds	r3, r7, r6
 800d330:	2200      	movs	r2, #0
 800d332:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	23b1      	movs	r3, #177	; 0xb1
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	58d3      	ldr	r3, [r2, r3]
 800d33c:	000d      	movs	r5, r1
 800d33e:	187c      	adds	r4, r7, r1
 800d340:	0018      	movs	r0, r3
 800d342:	f7f5 fcab 	bl	8002c9c <HAL_PCD_Start>
 800d346:	0003      	movs	r3, r0
 800d348:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d34a:	19bc      	adds	r4, r7, r6
 800d34c:	197b      	adds	r3, r7, r5
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	0018      	movs	r0, r3
 800d352:	f000 f9e8 	bl	800d726 <USBD_Get_USB_Status>
 800d356:	0003      	movs	r3, r0
 800d358:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d35a:	19bb      	adds	r3, r7, r6
 800d35c:	781b      	ldrb	r3, [r3, #0]
}
 800d35e:	0018      	movs	r0, r3
 800d360:	46bd      	mov	sp, r7
 800d362:	b005      	add	sp, #20
 800d364:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d366:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d368:	b085      	sub	sp, #20
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	000c      	movs	r4, r1
 800d370:	0010      	movs	r0, r2
 800d372:	0019      	movs	r1, r3
 800d374:	1cfb      	adds	r3, r7, #3
 800d376:	1c22      	adds	r2, r4, #0
 800d378:	701a      	strb	r2, [r3, #0]
 800d37a:	1cbb      	adds	r3, r7, #2
 800d37c:	1c02      	adds	r2, r0, #0
 800d37e:	701a      	strb	r2, [r3, #0]
 800d380:	003b      	movs	r3, r7
 800d382:	1c0a      	adds	r2, r1, #0
 800d384:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d386:	260f      	movs	r6, #15
 800d388:	19bb      	adds	r3, r7, r6
 800d38a:	2200      	movs	r2, #0
 800d38c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d38e:	250e      	movs	r5, #14
 800d390:	197b      	adds	r3, r7, r5
 800d392:	2200      	movs	r2, #0
 800d394:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	23b1      	movs	r3, #177	; 0xb1
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	58d0      	ldr	r0, [r2, r3]
 800d39e:	19bc      	adds	r4, r7, r6
 800d3a0:	1cbb      	adds	r3, r7, #2
 800d3a2:	781d      	ldrb	r5, [r3, #0]
 800d3a4:	003b      	movs	r3, r7
 800d3a6:	881a      	ldrh	r2, [r3, #0]
 800d3a8:	1cfb      	adds	r3, r7, #3
 800d3aa:	7819      	ldrb	r1, [r3, #0]
 800d3ac:	002b      	movs	r3, r5
 800d3ae:	f7f5 fe0a 	bl	8002fc6 <HAL_PCD_EP_Open>
 800d3b2:	0003      	movs	r3, r0
 800d3b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3b6:	250e      	movs	r5, #14
 800d3b8:	197c      	adds	r4, r7, r5
 800d3ba:	19bb      	adds	r3, r7, r6
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	0018      	movs	r0, r3
 800d3c0:	f000 f9b1 	bl	800d726 <USBD_Get_USB_Status>
 800d3c4:	0003      	movs	r3, r0
 800d3c6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d3c8:	197b      	adds	r3, r7, r5
 800d3ca:	781b      	ldrb	r3, [r3, #0]
}
 800d3cc:	0018      	movs	r0, r3
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	b005      	add	sp, #20
 800d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	000a      	movs	r2, r1
 800d3de:	1cfb      	adds	r3, r7, #3
 800d3e0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e2:	210f      	movs	r1, #15
 800d3e4:	187b      	adds	r3, r7, r1
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ea:	260e      	movs	r6, #14
 800d3ec:	19bb      	adds	r3, r7, r6
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	23b1      	movs	r3, #177	; 0xb1
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	58d2      	ldr	r2, [r2, r3]
 800d3fa:	000d      	movs	r5, r1
 800d3fc:	187c      	adds	r4, r7, r1
 800d3fe:	1cfb      	adds	r3, r7, #3
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	0019      	movs	r1, r3
 800d404:	0010      	movs	r0, r2
 800d406:	f7f5 fe56 	bl	80030b6 <HAL_PCD_EP_Close>
 800d40a:	0003      	movs	r3, r0
 800d40c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d40e:	19bc      	adds	r4, r7, r6
 800d410:	197b      	adds	r3, r7, r5
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	0018      	movs	r0, r3
 800d416:	f000 f986 	bl	800d726 <USBD_Get_USB_Status>
 800d41a:	0003      	movs	r3, r0
 800d41c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d41e:	19bb      	adds	r3, r7, r6
 800d420:	781b      	ldrb	r3, [r3, #0]
}
 800d422:	0018      	movs	r0, r3
 800d424:	46bd      	mov	sp, r7
 800d426:	b005      	add	sp, #20
 800d428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d42a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d42c:	b085      	sub	sp, #20
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	000a      	movs	r2, r1
 800d434:	1cfb      	adds	r3, r7, #3
 800d436:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	210f      	movs	r1, #15
 800d43a:	187b      	adds	r3, r7, r1
 800d43c:	2200      	movs	r2, #0
 800d43e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d440:	260e      	movs	r6, #14
 800d442:	19bb      	adds	r3, r7, r6
 800d444:	2200      	movs	r2, #0
 800d446:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	23b1      	movs	r3, #177	; 0xb1
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	58d2      	ldr	r2, [r2, r3]
 800d450:	000d      	movs	r5, r1
 800d452:	187c      	adds	r4, r7, r1
 800d454:	1cfb      	adds	r3, r7, #3
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	0019      	movs	r1, r3
 800d45a:	0010      	movs	r0, r2
 800d45c:	f7f5 ff22 	bl	80032a4 <HAL_PCD_EP_SetStall>
 800d460:	0003      	movs	r3, r0
 800d462:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d464:	19bc      	adds	r4, r7, r6
 800d466:	197b      	adds	r3, r7, r5
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	0018      	movs	r0, r3
 800d46c:	f000 f95b 	bl	800d726 <USBD_Get_USB_Status>
 800d470:	0003      	movs	r3, r0
 800d472:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d474:	19bb      	adds	r3, r7, r6
 800d476:	781b      	ldrb	r3, [r3, #0]
}
 800d478:	0018      	movs	r0, r3
 800d47a:	46bd      	mov	sp, r7
 800d47c:	b005      	add	sp, #20
 800d47e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d480 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	000a      	movs	r2, r1
 800d48a:	1cfb      	adds	r3, r7, #3
 800d48c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d48e:	210f      	movs	r1, #15
 800d490:	187b      	adds	r3, r7, r1
 800d492:	2200      	movs	r2, #0
 800d494:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d496:	260e      	movs	r6, #14
 800d498:	19bb      	adds	r3, r7, r6
 800d49a:	2200      	movs	r2, #0
 800d49c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	23b1      	movs	r3, #177	; 0xb1
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	58d2      	ldr	r2, [r2, r3]
 800d4a6:	000d      	movs	r5, r1
 800d4a8:	187c      	adds	r4, r7, r1
 800d4aa:	1cfb      	adds	r3, r7, #3
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	0019      	movs	r1, r3
 800d4b0:	0010      	movs	r0, r2
 800d4b2:	f7f5 ff53 	bl	800335c <HAL_PCD_EP_ClrStall>
 800d4b6:	0003      	movs	r3, r0
 800d4b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4ba:	19bc      	adds	r4, r7, r6
 800d4bc:	197b      	adds	r3, r7, r5
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	f000 f930 	bl	800d726 <USBD_Get_USB_Status>
 800d4c6:	0003      	movs	r3, r0
 800d4c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d4ca:	19bb      	adds	r3, r7, r6
 800d4cc:	781b      	ldrb	r3, [r3, #0]
}
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	b005      	add	sp, #20
 800d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4d6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	000a      	movs	r2, r1
 800d4e0:	1cfb      	adds	r3, r7, #3
 800d4e2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	23b1      	movs	r3, #177	; 0xb1
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	58d3      	ldr	r3, [r2, r3]
 800d4ec:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4ee:	1cfb      	adds	r3, r7, #3
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	b25b      	sxtb	r3, r3
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	da0d      	bge.n	800d514 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4f8:	1cfb      	adds	r3, r7, #3
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	227f      	movs	r2, #127	; 0x7f
 800d4fe:	401a      	ands	r2, r3
 800d500:	68f9      	ldr	r1, [r7, #12]
 800d502:	203a      	movs	r0, #58	; 0x3a
 800d504:	0013      	movs	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	189b      	adds	r3, r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	18cb      	adds	r3, r1, r3
 800d50e:	181b      	adds	r3, r3, r0
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	e00d      	b.n	800d530 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d514:	1cfb      	adds	r3, r7, #3
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	227f      	movs	r2, #127	; 0x7f
 800d51a:	401a      	ands	r2, r3
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	23bd      	movs	r3, #189	; 0xbd
 800d520:	0059      	lsls	r1, r3, #1
 800d522:	0013      	movs	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	189b      	adds	r3, r3, r2
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	18c3      	adds	r3, r0, r3
 800d52c:	185b      	adds	r3, r3, r1
 800d52e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d530:	0018      	movs	r0, r3
 800d532:	46bd      	mov	sp, r7
 800d534:	b004      	add	sp, #16
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	000a      	movs	r2, r1
 800d542:	1cfb      	adds	r3, r7, #3
 800d544:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d546:	210f      	movs	r1, #15
 800d548:	187b      	adds	r3, r7, r1
 800d54a:	2200      	movs	r2, #0
 800d54c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d54e:	260e      	movs	r6, #14
 800d550:	19bb      	adds	r3, r7, r6
 800d552:	2200      	movs	r2, #0
 800d554:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	23b1      	movs	r3, #177	; 0xb1
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	58d2      	ldr	r2, [r2, r3]
 800d55e:	000d      	movs	r5, r1
 800d560:	187c      	adds	r4, r7, r1
 800d562:	1cfb      	adds	r3, r7, #3
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	0019      	movs	r1, r3
 800d568:	0010      	movs	r0, r2
 800d56a:	f7f5 fd01 	bl	8002f70 <HAL_PCD_SetAddress>
 800d56e:	0003      	movs	r3, r0
 800d570:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d572:	19bc      	adds	r4, r7, r6
 800d574:	197b      	adds	r3, r7, r5
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	0018      	movs	r0, r3
 800d57a:	f000 f8d4 	bl	800d726 <USBD_Get_USB_Status>
 800d57e:	0003      	movs	r3, r0
 800d580:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d582:	19bb      	adds	r3, r7, r6
 800d584:	781b      	ldrb	r3, [r3, #0]
}
 800d586:	0018      	movs	r0, r3
 800d588:	46bd      	mov	sp, r7
 800d58a:	b005      	add	sp, #20
 800d58c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d58e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d590:	b087      	sub	sp, #28
 800d592:	af00      	add	r7, sp, #0
 800d594:	60f8      	str	r0, [r7, #12]
 800d596:	607a      	str	r2, [r7, #4]
 800d598:	603b      	str	r3, [r7, #0]
 800d59a:	230b      	movs	r3, #11
 800d59c:	18fb      	adds	r3, r7, r3
 800d59e:	1c0a      	adds	r2, r1, #0
 800d5a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5a2:	2617      	movs	r6, #23
 800d5a4:	19bb      	adds	r3, r7, r6
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5aa:	2516      	movs	r5, #22
 800d5ac:	197b      	adds	r3, r7, r5
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	23b1      	movs	r3, #177	; 0xb1
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	58d0      	ldr	r0, [r2, r3]
 800d5ba:	19bc      	adds	r4, r7, r6
 800d5bc:	683d      	ldr	r5, [r7, #0]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	230b      	movs	r3, #11
 800d5c2:	18fb      	adds	r3, r7, r3
 800d5c4:	7819      	ldrb	r1, [r3, #0]
 800d5c6:	002b      	movs	r3, r5
 800d5c8:	f7f5 fe23 	bl	8003212 <HAL_PCD_EP_Transmit>
 800d5cc:	0003      	movs	r3, r0
 800d5ce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d0:	2516      	movs	r5, #22
 800d5d2:	197c      	adds	r4, r7, r5
 800d5d4:	19bb      	adds	r3, r7, r6
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	0018      	movs	r0, r3
 800d5da:	f000 f8a4 	bl	800d726 <USBD_Get_USB_Status>
 800d5de:	0003      	movs	r3, r0
 800d5e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d5e2:	197b      	adds	r3, r7, r5
 800d5e4:	781b      	ldrb	r3, [r3, #0]
}
 800d5e6:	0018      	movs	r0, r3
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	b007      	add	sp, #28
 800d5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5ee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f0:	b087      	sub	sp, #28
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	60f8      	str	r0, [r7, #12]
 800d5f6:	607a      	str	r2, [r7, #4]
 800d5f8:	603b      	str	r3, [r7, #0]
 800d5fa:	230b      	movs	r3, #11
 800d5fc:	18fb      	adds	r3, r7, r3
 800d5fe:	1c0a      	adds	r2, r1, #0
 800d600:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d602:	2617      	movs	r6, #23
 800d604:	19bb      	adds	r3, r7, r6
 800d606:	2200      	movs	r2, #0
 800d608:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d60a:	2516      	movs	r5, #22
 800d60c:	197b      	adds	r3, r7, r5
 800d60e:	2200      	movs	r2, #0
 800d610:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	23b1      	movs	r3, #177	; 0xb1
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	58d0      	ldr	r0, [r2, r3]
 800d61a:	19bc      	adds	r4, r7, r6
 800d61c:	683d      	ldr	r5, [r7, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	230b      	movs	r3, #11
 800d622:	18fb      	adds	r3, r7, r3
 800d624:	7819      	ldrb	r1, [r3, #0]
 800d626:	002b      	movs	r3, r5
 800d628:	f7f5 fd96 	bl	8003158 <HAL_PCD_EP_Receive>
 800d62c:	0003      	movs	r3, r0
 800d62e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d630:	2516      	movs	r5, #22
 800d632:	197c      	adds	r4, r7, r5
 800d634:	19bb      	adds	r3, r7, r6
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	0018      	movs	r0, r3
 800d63a:	f000 f874 	bl	800d726 <USBD_Get_USB_Status>
 800d63e:	0003      	movs	r3, r0
 800d640:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d642:	197b      	adds	r3, r7, r5
 800d644:	781b      	ldrb	r3, [r3, #0]
}
 800d646:	0018      	movs	r0, r3
 800d648:	46bd      	mov	sp, r7
 800d64a:	b007      	add	sp, #28
 800d64c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d64e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b082      	sub	sp, #8
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	000a      	movs	r2, r1
 800d658:	1cfb      	adds	r3, r7, #3
 800d65a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	23b1      	movs	r3, #177	; 0xb1
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	58d2      	ldr	r2, [r2, r3]
 800d664:	1cfb      	adds	r3, r7, #3
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	0019      	movs	r1, r3
 800d66a:	0010      	movs	r0, r2
 800d66c:	f7f5 fdb8 	bl	80031e0 <HAL_PCD_EP_GetRxCount>
 800d670:	0003      	movs	r3, r0
}
 800d672:	0018      	movs	r0, r3
 800d674:	46bd      	mov	sp, r7
 800d676:	b002      	add	sp, #8
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	000a      	movs	r2, r1
 800d686:	1cfb      	adds	r3, r7, #3
 800d688:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d68a:	1cfb      	adds	r3, r7, #3
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <HAL_PCDEx_LPM_Callback+0x1c>
 800d692:	2b01      	cmp	r3, #1
 800d694:	d014      	beq.n	800d6c0 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d696:	e025      	b.n	800d6e4 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d007      	beq.n	800d6b0 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 800d6a0:	f000 f83a 	bl	800d718 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6a4:	4b11      	ldr	r3, [pc, #68]	; (800d6ec <HAL_PCDEx_LPM_Callback+0x70>)
 800d6a6:	691a      	ldr	r2, [r3, #16]
 800d6a8:	4b10      	ldr	r3, [pc, #64]	; (800d6ec <HAL_PCDEx_LPM_Callback+0x70>)
 800d6aa:	2106      	movs	r1, #6
 800d6ac:	438a      	bics	r2, r1
 800d6ae:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	23c0      	movs	r3, #192	; 0xc0
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	58d3      	ldr	r3, [r2, r3]
 800d6b8:	0018      	movs	r0, r3
 800d6ba:	f7fc f81f 	bl	80096fc <USBD_LL_Resume>
    break;
 800d6be:	e011      	b.n	800d6e4 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	23c0      	movs	r3, #192	; 0xc0
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	58d3      	ldr	r3, [r2, r3]
 800d6c8:	0018      	movs	r0, r3
 800d6ca:	f7fb ffff 	bl	80096cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d005      	beq.n	800d6e2 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6d6:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <HAL_PCDEx_LPM_Callback+0x70>)
 800d6d8:	691a      	ldr	r2, [r3, #16]
 800d6da:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <HAL_PCDEx_LPM_Callback+0x70>)
 800d6dc:	2106      	movs	r1, #6
 800d6de:	430a      	orrs	r2, r1
 800d6e0:	611a      	str	r2, [r3, #16]
    break;
 800d6e2:	46c0      	nop			; (mov r8, r8)
}
 800d6e4:	46c0      	nop			; (mov r8, r8)
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	b002      	add	sp, #8
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	e000ed00 	.word	0xe000ed00

0800d6f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d6f8:	4b02      	ldr	r3, [pc, #8]	; (800d704 <USBD_static_malloc+0x14>)
}
 800d6fa:	0018      	movs	r0, r3
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	b002      	add	sp, #8
 800d700:	bd80      	pop	{r7, pc}
 800d702:	46c0      	nop			; (mov r8, r8)
 800d704:	200115d8 	.word	0x200115d8

0800d708 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]

}
 800d710:	46c0      	nop			; (mov r8, r8)
 800d712:	46bd      	mov	sp, r7
 800d714:	b002      	add	sp, #8
 800d716:	bd80      	pop	{r7, pc}

0800d718 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d71c:	f7f2 ffb4 	bl	8000688 <SystemClock_Config>
}
 800d720:	46c0      	nop			; (mov r8, r8)
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	0002      	movs	r2, r0
 800d72e:	1dfb      	adds	r3, r7, #7
 800d730:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d732:	230f      	movs	r3, #15
 800d734:	18fb      	adds	r3, r7, r3
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d73a:	1dfb      	adds	r3, r7, #7
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d017      	beq.n	800d772 <USBD_Get_USB_Status+0x4c>
 800d742:	dc1b      	bgt.n	800d77c <USBD_Get_USB_Status+0x56>
 800d744:	2b02      	cmp	r3, #2
 800d746:	d00f      	beq.n	800d768 <USBD_Get_USB_Status+0x42>
 800d748:	dc18      	bgt.n	800d77c <USBD_Get_USB_Status+0x56>
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <USBD_Get_USB_Status+0x2e>
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d005      	beq.n	800d75e <USBD_Get_USB_Status+0x38>
 800d752:	e013      	b.n	800d77c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d754:	230f      	movs	r3, #15
 800d756:	18fb      	adds	r3, r7, r3
 800d758:	2200      	movs	r2, #0
 800d75a:	701a      	strb	r2, [r3, #0]
    break;
 800d75c:	e013      	b.n	800d786 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d75e:	230f      	movs	r3, #15
 800d760:	18fb      	adds	r3, r7, r3
 800d762:	2203      	movs	r2, #3
 800d764:	701a      	strb	r2, [r3, #0]
    break;
 800d766:	e00e      	b.n	800d786 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d768:	230f      	movs	r3, #15
 800d76a:	18fb      	adds	r3, r7, r3
 800d76c:	2201      	movs	r2, #1
 800d76e:	701a      	strb	r2, [r3, #0]
    break;
 800d770:	e009      	b.n	800d786 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d772:	230f      	movs	r3, #15
 800d774:	18fb      	adds	r3, r7, r3
 800d776:	2203      	movs	r2, #3
 800d778:	701a      	strb	r2, [r3, #0]
    break;
 800d77a:	e004      	b.n	800d786 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d77c:	230f      	movs	r3, #15
 800d77e:	18fb      	adds	r3, r7, r3
 800d780:	2203      	movs	r2, #3
 800d782:	701a      	strb	r2, [r3, #0]
    break;
 800d784:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800d786:	230f      	movs	r3, #15
 800d788:	18fb      	adds	r3, r7, r3
 800d78a:	781b      	ldrb	r3, [r3, #0]
}
 800d78c:	0018      	movs	r0, r3
 800d78e:	46bd      	mov	sp, r7
 800d790:	b004      	add	sp, #16
 800d792:	bd80      	pop	{r7, pc}

0800d794 <__libc_init_array>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	2600      	movs	r6, #0
 800d798:	4d0c      	ldr	r5, [pc, #48]	; (800d7cc <__libc_init_array+0x38>)
 800d79a:	4c0d      	ldr	r4, [pc, #52]	; (800d7d0 <__libc_init_array+0x3c>)
 800d79c:	1b64      	subs	r4, r4, r5
 800d79e:	10a4      	asrs	r4, r4, #2
 800d7a0:	42a6      	cmp	r6, r4
 800d7a2:	d109      	bne.n	800d7b8 <__libc_init_array+0x24>
 800d7a4:	2600      	movs	r6, #0
 800d7a6:	f000 f8fb 	bl	800d9a0 <_init>
 800d7aa:	4d0a      	ldr	r5, [pc, #40]	; (800d7d4 <__libc_init_array+0x40>)
 800d7ac:	4c0a      	ldr	r4, [pc, #40]	; (800d7d8 <__libc_init_array+0x44>)
 800d7ae:	1b64      	subs	r4, r4, r5
 800d7b0:	10a4      	asrs	r4, r4, #2
 800d7b2:	42a6      	cmp	r6, r4
 800d7b4:	d105      	bne.n	800d7c2 <__libc_init_array+0x2e>
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	00b3      	lsls	r3, r6, #2
 800d7ba:	58eb      	ldr	r3, [r5, r3]
 800d7bc:	4798      	blx	r3
 800d7be:	3601      	adds	r6, #1
 800d7c0:	e7ee      	b.n	800d7a0 <__libc_init_array+0xc>
 800d7c2:	00b3      	lsls	r3, r6, #2
 800d7c4:	58eb      	ldr	r3, [r5, r3]
 800d7c6:	4798      	blx	r3
 800d7c8:	3601      	adds	r6, #1
 800d7ca:	e7f2      	b.n	800d7b2 <__libc_init_array+0x1e>
 800d7cc:	0800dc70 	.word	0x0800dc70
 800d7d0:	0800dc70 	.word	0x0800dc70
 800d7d4:	0800dc70 	.word	0x0800dc70
 800d7d8:	0800dc74 	.word	0x0800dc74

0800d7dc <__retarget_lock_acquire_recursive>:
 800d7dc:	4770      	bx	lr

0800d7de <__retarget_lock_release_recursive>:
 800d7de:	4770      	bx	lr

0800d7e0 <memcpy>:
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	b510      	push	{r4, lr}
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d100      	bne.n	800d7ea <memcpy+0xa>
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	5ccc      	ldrb	r4, [r1, r3]
 800d7ec:	54c4      	strb	r4, [r0, r3]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	e7f8      	b.n	800d7e4 <memcpy+0x4>

0800d7f2 <memset>:
 800d7f2:	0003      	movs	r3, r0
 800d7f4:	1882      	adds	r2, r0, r2
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d100      	bne.n	800d7fc <memset+0xa>
 800d7fa:	4770      	bx	lr
 800d7fc:	7019      	strb	r1, [r3, #0]
 800d7fe:	3301      	adds	r3, #1
 800d800:	e7f9      	b.n	800d7f6 <memset+0x4>
	...

0800d804 <_free_r>:
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	0005      	movs	r5, r0
 800d808:	2900      	cmp	r1, #0
 800d80a:	d010      	beq.n	800d82e <_free_r+0x2a>
 800d80c:	1f0c      	subs	r4, r1, #4
 800d80e:	6823      	ldr	r3, [r4, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	da00      	bge.n	800d816 <_free_r+0x12>
 800d814:	18e4      	adds	r4, r4, r3
 800d816:	0028      	movs	r0, r5
 800d818:	f000 f8b2 	bl	800d980 <__malloc_lock>
 800d81c:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <_free_r+0x90>)
 800d81e:	6813      	ldr	r3, [r2, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d105      	bne.n	800d830 <_free_r+0x2c>
 800d824:	6063      	str	r3, [r4, #4]
 800d826:	6014      	str	r4, [r2, #0]
 800d828:	0028      	movs	r0, r5
 800d82a:	f000 f8b1 	bl	800d990 <__malloc_unlock>
 800d82e:	bd70      	pop	{r4, r5, r6, pc}
 800d830:	42a3      	cmp	r3, r4
 800d832:	d908      	bls.n	800d846 <_free_r+0x42>
 800d834:	6821      	ldr	r1, [r4, #0]
 800d836:	1860      	adds	r0, r4, r1
 800d838:	4283      	cmp	r3, r0
 800d83a:	d1f3      	bne.n	800d824 <_free_r+0x20>
 800d83c:	6818      	ldr	r0, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	1841      	adds	r1, r0, r1
 800d842:	6021      	str	r1, [r4, #0]
 800d844:	e7ee      	b.n	800d824 <_free_r+0x20>
 800d846:	001a      	movs	r2, r3
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d001      	beq.n	800d852 <_free_r+0x4e>
 800d84e:	42a3      	cmp	r3, r4
 800d850:	d9f9      	bls.n	800d846 <_free_r+0x42>
 800d852:	6811      	ldr	r1, [r2, #0]
 800d854:	1850      	adds	r0, r2, r1
 800d856:	42a0      	cmp	r0, r4
 800d858:	d10b      	bne.n	800d872 <_free_r+0x6e>
 800d85a:	6820      	ldr	r0, [r4, #0]
 800d85c:	1809      	adds	r1, r1, r0
 800d85e:	1850      	adds	r0, r2, r1
 800d860:	6011      	str	r1, [r2, #0]
 800d862:	4283      	cmp	r3, r0
 800d864:	d1e0      	bne.n	800d828 <_free_r+0x24>
 800d866:	6818      	ldr	r0, [r3, #0]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	1841      	adds	r1, r0, r1
 800d86c:	6011      	str	r1, [r2, #0]
 800d86e:	6053      	str	r3, [r2, #4]
 800d870:	e7da      	b.n	800d828 <_free_r+0x24>
 800d872:	42a0      	cmp	r0, r4
 800d874:	d902      	bls.n	800d87c <_free_r+0x78>
 800d876:	230c      	movs	r3, #12
 800d878:	602b      	str	r3, [r5, #0]
 800d87a:	e7d5      	b.n	800d828 <_free_r+0x24>
 800d87c:	6821      	ldr	r1, [r4, #0]
 800d87e:	1860      	adds	r0, r4, r1
 800d880:	4283      	cmp	r3, r0
 800d882:	d103      	bne.n	800d88c <_free_r+0x88>
 800d884:	6818      	ldr	r0, [r3, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	1841      	adds	r1, r0, r1
 800d88a:	6021      	str	r1, [r4, #0]
 800d88c:	6063      	str	r3, [r4, #4]
 800d88e:	6054      	str	r4, [r2, #4]
 800d890:	e7ca      	b.n	800d828 <_free_r+0x24>
 800d892:	46c0      	nop			; (mov r8, r8)
 800d894:	200117f8 	.word	0x200117f8

0800d898 <cleanup_glue>:
 800d898:	b570      	push	{r4, r5, r6, lr}
 800d89a:	000d      	movs	r5, r1
 800d89c:	6809      	ldr	r1, [r1, #0]
 800d89e:	0004      	movs	r4, r0
 800d8a0:	2900      	cmp	r1, #0
 800d8a2:	d001      	beq.n	800d8a8 <cleanup_glue+0x10>
 800d8a4:	f7ff fff8 	bl	800d898 <cleanup_glue>
 800d8a8:	0029      	movs	r1, r5
 800d8aa:	0020      	movs	r0, r4
 800d8ac:	f7ff ffaa 	bl	800d804 <_free_r>
 800d8b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8b4 <_reclaim_reent>:
 800d8b4:	4b31      	ldr	r3, [pc, #196]	; (800d97c <_reclaim_reent+0xc8>)
 800d8b6:	b570      	push	{r4, r5, r6, lr}
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	0004      	movs	r4, r0
 800d8bc:	4283      	cmp	r3, r0
 800d8be:	d049      	beq.n	800d954 <_reclaim_reent+0xa0>
 800d8c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00a      	beq.n	800d8dc <_reclaim_reent+0x28>
 800d8c6:	2500      	movs	r5, #0
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	42ab      	cmp	r3, r5
 800d8cc:	d147      	bne.n	800d95e <_reclaim_reent+0xaa>
 800d8ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8d0:	6819      	ldr	r1, [r3, #0]
 800d8d2:	2900      	cmp	r1, #0
 800d8d4:	d002      	beq.n	800d8dc <_reclaim_reent+0x28>
 800d8d6:	0020      	movs	r0, r4
 800d8d8:	f7ff ff94 	bl	800d804 <_free_r>
 800d8dc:	6961      	ldr	r1, [r4, #20]
 800d8de:	2900      	cmp	r1, #0
 800d8e0:	d002      	beq.n	800d8e8 <_reclaim_reent+0x34>
 800d8e2:	0020      	movs	r0, r4
 800d8e4:	f7ff ff8e 	bl	800d804 <_free_r>
 800d8e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d8ea:	2900      	cmp	r1, #0
 800d8ec:	d002      	beq.n	800d8f4 <_reclaim_reent+0x40>
 800d8ee:	0020      	movs	r0, r4
 800d8f0:	f7ff ff88 	bl	800d804 <_free_r>
 800d8f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d8f6:	2900      	cmp	r1, #0
 800d8f8:	d002      	beq.n	800d900 <_reclaim_reent+0x4c>
 800d8fa:	0020      	movs	r0, r4
 800d8fc:	f7ff ff82 	bl	800d804 <_free_r>
 800d900:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d902:	2900      	cmp	r1, #0
 800d904:	d002      	beq.n	800d90c <_reclaim_reent+0x58>
 800d906:	0020      	movs	r0, r4
 800d908:	f7ff ff7c 	bl	800d804 <_free_r>
 800d90c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d90e:	2900      	cmp	r1, #0
 800d910:	d002      	beq.n	800d918 <_reclaim_reent+0x64>
 800d912:	0020      	movs	r0, r4
 800d914:	f7ff ff76 	bl	800d804 <_free_r>
 800d918:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d91a:	2900      	cmp	r1, #0
 800d91c:	d002      	beq.n	800d924 <_reclaim_reent+0x70>
 800d91e:	0020      	movs	r0, r4
 800d920:	f7ff ff70 	bl	800d804 <_free_r>
 800d924:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d926:	2900      	cmp	r1, #0
 800d928:	d002      	beq.n	800d930 <_reclaim_reent+0x7c>
 800d92a:	0020      	movs	r0, r4
 800d92c:	f7ff ff6a 	bl	800d804 <_free_r>
 800d930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d932:	2900      	cmp	r1, #0
 800d934:	d002      	beq.n	800d93c <_reclaim_reent+0x88>
 800d936:	0020      	movs	r0, r4
 800d938:	f7ff ff64 	bl	800d804 <_free_r>
 800d93c:	69a3      	ldr	r3, [r4, #24]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d008      	beq.n	800d954 <_reclaim_reent+0xa0>
 800d942:	0020      	movs	r0, r4
 800d944:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d946:	4798      	blx	r3
 800d948:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d94a:	2900      	cmp	r1, #0
 800d94c:	d002      	beq.n	800d954 <_reclaim_reent+0xa0>
 800d94e:	0020      	movs	r0, r4
 800d950:	f7ff ffa2 	bl	800d898 <cleanup_glue>
 800d954:	bd70      	pop	{r4, r5, r6, pc}
 800d956:	5949      	ldr	r1, [r1, r5]
 800d958:	2900      	cmp	r1, #0
 800d95a:	d108      	bne.n	800d96e <_reclaim_reent+0xba>
 800d95c:	3504      	adds	r5, #4
 800d95e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d960:	68d9      	ldr	r1, [r3, #12]
 800d962:	2d80      	cmp	r5, #128	; 0x80
 800d964:	d1f7      	bne.n	800d956 <_reclaim_reent+0xa2>
 800d966:	0020      	movs	r0, r4
 800d968:	f7ff ff4c 	bl	800d804 <_free_r>
 800d96c:	e7af      	b.n	800d8ce <_reclaim_reent+0x1a>
 800d96e:	680e      	ldr	r6, [r1, #0]
 800d970:	0020      	movs	r0, r4
 800d972:	f7ff ff47 	bl	800d804 <_free_r>
 800d976:	0031      	movs	r1, r6
 800d978:	e7ee      	b.n	800d958 <_reclaim_reent+0xa4>
 800d97a:	46c0      	nop			; (mov r8, r8)
 800d97c:	20000188 	.word	0x20000188

0800d980 <__malloc_lock>:
 800d980:	b510      	push	{r4, lr}
 800d982:	4802      	ldr	r0, [pc, #8]	; (800d98c <__malloc_lock+0xc>)
 800d984:	f7ff ff2a 	bl	800d7dc <__retarget_lock_acquire_recursive>
 800d988:	bd10      	pop	{r4, pc}
 800d98a:	46c0      	nop			; (mov r8, r8)
 800d98c:	20013280 	.word	0x20013280

0800d990 <__malloc_unlock>:
 800d990:	b510      	push	{r4, lr}
 800d992:	4802      	ldr	r0, [pc, #8]	; (800d99c <__malloc_unlock+0xc>)
 800d994:	f7ff ff23 	bl	800d7de <__retarget_lock_release_recursive>
 800d998:	bd10      	pop	{r4, pc}
 800d99a:	46c0      	nop			; (mov r8, r8)
 800d99c:	20013280 	.word	0x20013280

0800d9a0 <_init>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	46c0      	nop			; (mov r8, r8)
 800d9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a6:	bc08      	pop	{r3}
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	4770      	bx	lr

0800d9ac <_fini>:
 800d9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ae:	46c0      	nop			; (mov r8, r8)
 800d9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b2:	bc08      	pop	{r3}
 800d9b4:	469e      	mov	lr, r3
 800d9b6:	4770      	bx	lr
